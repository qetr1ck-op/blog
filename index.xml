<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OP blog</title>
    <link>https://qetr1ck-op.github.io/blog/index.xml</link>
    <description>Recent content on OP blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 14 May 2017 17:43:40 +0300</lastBuildDate>
    <atom:link href="https://qetr1ck-op.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Interview question: NodeJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/nodejs-interview-question/</link>
      <pubDate>Sun, 14 May 2017 17:43:40 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/nodejs-interview-question/</guid>
      <description>&lt;p&gt;Based on original post &lt;a href=&#34;https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8&#34;&gt;How well do you know Node.js?&lt;/a&gt;. In it, Samer Buna lists 48 questions which be expects a Node.js developer to be able to answer.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-relationship-between-node-js-and-v8-can-node-work-without-v8&#34;&gt;What is the relationship between Node.js and V8? Can Node work without V8?&lt;/h1&gt;

&lt;p&gt;V8 is a JavaScript engine developed by The Chromium Project, first for the Google Chrome web browser and later for other projects, including NodeJS. It allows to compile, optimize and run JavaScript code and is the base for code execution inside Node.js. However, V8 is not essential for Node.js; There are attempts to use other javascript engines, such as &lt;a href=&#34;https://github.com/nodejs/node-chakracore&#34;&gt;node-chakracore&lt;/a&gt; (Node.js on ChakraCore) or &lt;a href=&#34;https://github.com/mozilla/spidernode&#34;&gt;spidernode&lt;/a&gt; (Node.js on top of SpiderMonkey).&lt;/p&gt;

&lt;h1 id=&#34;how-come-when-you-declare-a-global-variable-in-any-node-js-file-it-s-not-really-global-to-all-modules&#34;&gt;How come when you declare a global variable in any Node.js file it’s not really global to all modules?&lt;/h1&gt;

&lt;p&gt;A module’s code is wrapped by a function wrapper. To see it just execute node.js file with syntax error on first line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;gt; node 1/bugToSeeWrapperFn.js
&amp;gt; /home/oop/Documents/bugToSeeWrapperFn.js:1

(function (exports, require, module, __filename, __dirname) { foo
  // module code
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wrapping allows to keeps top-level variables (defined with var, const or let) scoped to the module, rather than to the global object.&lt;/p&gt;

&lt;p&gt;Read more on the &lt;a href=&#34;https://nodejs.org/api/modules.html#modules_the_module_wrapper&#34;&gt;module wrapper&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;when-exporting-the-api-of-a-node-module-why-can-we-sometimes-use-exports-and-other-times-we-have-to-use-module-exports&#34;&gt;When exporting the API of a Node module, why can we sometimes use &lt;code&gt;exports&lt;/code&gt; and other times we have to use &lt;code&gt;module.exports?&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;To understand the difference, we can look at this simplified view of a JavaScript file in Node.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var module = { exports: {} };
var exports = module.exports;

// your code

return module.exports;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, &lt;code&gt;exports&lt;/code&gt; is initially a reference to &lt;code&gt;module.exports&lt;/code&gt;. if you want to simply export an object with named fields, you can use the exports shortcut. For example, had we written &lt;code&gt;exports.a = 9&lt;/code&gt;, we’d actually export this object: &lt;code&gt;{ a: 9 }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, if you want to export a function or another object, you have to use the &lt;code&gt;module.exports&lt;/code&gt; but you cannot use &lt;code&gt;exports&lt;/code&gt;. For example: &lt;code&gt;module.exports = function bar() {}&lt;/code&gt;. Once you do that, &lt;code&gt;exports&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; no longer reference the same object.&lt;/p&gt;

&lt;h1 id=&#34;can-we-require-local-files-without-using-relative-paths&#34;&gt;Can we require local files without using relative paths?&lt;/h1&gt;

&lt;p&gt;There are several options, as described &lt;a href=&#34;https://gist.github.com/qetr1ck-op/ba2c8ad84ae8cd3ce6c928872eaa6933&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;can-different-versions-of-the-same-package-be-used-in-the-same-application&#34;&gt;Can different versions of the same package be used in the same application?&lt;/h1&gt;

&lt;p&gt;No, this is currently prevented by NPM. see this issue for &lt;a href=&#34;https://github.com/npm/npm/issues/2943#issuecomment-10388316&#34;&gt;more details&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-event-loop-is-it-part-of-v8&#34;&gt;What is the Event Loop? Is it part of V8?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./images/posts/nodejs-interview-question/nodejs-arhitecture.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In event-driven programming, an application expresses interest in certain events and respond to them when they occur. This is the way Node.js can handle asynchronous execution while running the code in a single thread.&lt;/p&gt;

&lt;p&gt;When an asynchronous operation starts (for example, when we call &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;http.get&lt;/code&gt; or &lt;code&gt;fs.readFile&lt;/code&gt;), Node.js sends these operations to a different thread allowing &lt;code&gt;V8&lt;/code&gt; to keep executing our code. Node also calls the callback when the counter has run down or the &lt;code&gt;IO / http&lt;/code&gt; operation has finished.&lt;/p&gt;

&lt;p&gt;In Node.js, the responsibility of gathering events from the operating system or monitoring other sources of events is handled by &lt;code&gt;libuv&lt;/code&gt;, and the user can register callbacks to be invoked when an event occurs. When async operation is done &lt;code&gt;libuv&lt;/code&gt; passes control to &lt;code&gt;V8&lt;/code&gt; to execute the callbacks.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-call-stack-is-it-part-of-v8&#34;&gt;What is the Call Stack? Is it part of V8?&lt;/h1&gt;

&lt;p&gt;The call stack is the basic mechanism for javascript code execution. When we call a function, we push the function parameters and the return address to the stack. This allows to runtime to know where to continue code execution once the function ends. In Node.js, the Call Stack is handled by &lt;code&gt;V8&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-difference-between-setimmediate-and-process-nexttick&#34;&gt;What is the difference between setImmediate and process.nextTick?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setImmediate&lt;/code&gt; queues a function behind whatever I/O event callbacks that are already in the event queue.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.nextTick&lt;/code&gt; queues a function at the head of the event queue so that it executes immediately after the currently running function completes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; vs &lt;code&gt;setImmediate&lt;/code&gt; vs &lt;code&gt;process.nextTick&lt;/code&gt;, visual explanation [&lt;a href=&#34;http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation#38742776&#34;&gt;http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation#38742776&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setImmediate&lt;/code&gt; executes after &lt;code&gt;setTimeout&lt;/code&gt;, &lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/issues/25788&#34;&gt;explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-do-you-make-an-asynchronous-function-return-a-value&#34;&gt;How do you make an asynchronous function return a value?&lt;/h1&gt;

&lt;p&gt;You could return a promise resolving to that value, for example return &lt;code&gt;Promise.resolve(value)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;can-callbacks-be-used-with-promises-or-is-it-one-way-or-the-other&#34;&gt;Can callbacks be used with promises or is it one way or the other?&lt;/h1&gt;

&lt;p&gt;Callbacks and promises can be used together. For example, the following method calls a callback and returns a promise:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function processToGetValue(cb) {
  // do some processing to value
  if (cb) {
    cb(value);
  }
  return Promise.resolve(value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;what-are-the-major-differences-between-spawn-exec-and-fork&#34;&gt;What are the major differences between spawn, exec, and fork?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; methods spawns a shell and then executes a command within that shell, buffering any generated output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn&lt;/code&gt; works similarly to &lt;code&gt;exec&lt;/code&gt;. The main difference is that spawn returns the process output as a stream while exec returns it as a buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork&lt;/code&gt; is a special case of spawn that also creates a new &lt;code&gt;V8&lt;/code&gt; engine instance. This is useful to create additional workers of the same Node.js code base. (for example, in the &lt;a href=&#34;https://nodejs.org/api/cluster.html&#34;&gt;cluster module&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great article &lt;a href=&#34;https://dzone.com/articles/understanding-execfile-spawn-exec-and-fork-in-node&#34;&gt;Understanding execFile, spawn, exec, and fork in Node.js&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;save-my-day&#34;&gt;Save my day&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8&#34;&gt;original questions by Samer Buna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://asafdav2.github.io/2017/how-well-do-you-know-node-js-answers-part-1/&#34;&gt;original post by asafdav2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Asynchronous Javascript with async/await</title>
      <link>https://qetr1ck-op.github.io/blog/post/asynchronous-javascript-with-async-await/</link>
      <pubDate>Tue, 09 May 2017 21:57:55 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/asynchronous-javascript-with-async-await/</guid>
      <description>&lt;p&gt;ES2017 async and await keywords to write asynchronous code that is more readable and easier to follow than equivalent code based on long promise chains or deeply nested callbacks.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The await operator takes a promise and then pauses the function execution until that promise is settled which allows for an async function to read like sequential synchronous code.&lt;/p&gt;

&lt;h1 id=&#34;write-an-asynchronous-function-with-async-await&#34;&gt;Write an Asynchronous Function with async/await&lt;/h1&gt;

&lt;p&gt;With traditional chain of promises:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;)

function showGitHubUser(userName) {
  fetch(`http://api.github.com/users/${userName}`)
    .then(data =&amp;gt; data.json())
    .then(user =&amp;gt; {
      const { name, location } = user

      console.log(name, location)
    })
}

showGitHubUser(&#39;qetr1ck-op&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rewrite to &lt;code&gt;async/await&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;)

async function showGitHubUser(userName) {
  const data = await fetch(`http://api.github.com/users/${userName}`)
  const user = await data.json()
  const { name, location } = user

  console.log(name, location)
}

showGitHubUser(&#39;qetr1ck-op&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;call-an-asynchronous-function-in-a-promise-chain&#34;&gt;Call an Asynchronous function in a Promise chain&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;)

async function showGitHubUser(userName) {
  const data = await fetch(`http://api.github.com/users/${userName}`)
  return await data.json()
}

showGitHubUser(&#39;qetr1ck-op&#39;).then(user =&amp;gt; {
  const { name, location } = user

  console.log(name, location)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;convert-any-function-into-asynchronous-function&#34;&gt;Convert any function into Asynchronous Function&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;)

class GitHubApiClient {
  // the same syntax with objects
  async fetchUser(handle) {
    const url = `https://api.github.com/users/${handle}`
    const response = await fetch(url)
    return await response.json()
  }
}

// classic iife
;(async () =&amp;gt; {
  const client = new GitHubApiClient()
  const user = await client.fetchUser(&#39;qetr1ck-op&#39;)
  console.log(user.name)
  console.log(user.location)
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;handle-errors-in-asynchronous-function&#34;&gt;Handle Errors in Asynchronous Function&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;)

async function fetchGitHubUser(userName) {
  const response = await fetch(`http://api.github.com/users/${userName}`)

  if (!response.ok)
    throw Error(response.statusText)

  return await response.json()
}

(async () =&amp;gt; {
  try {
    const { name, location } = await fetchGitHubUser(&#39;unknownuserstring&#39;)
    console.log(name, location)
  } catch(e) {
    console.error(e)
  }
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;await-multiple-promises-sequentially-or-concurrently&#34;&gt;Await multiple promises sequentially or concurrently&lt;/h1&gt;

&lt;p&gt;You can await multiple promises either sequentially or concurrently, depending on where you put the await operators.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;)
const measureTime = require(&#39;measure-time&#39;)

async function fetchGitHubUser(endpoint) {
  const response = await fetch(`http://api.github.com${endpoint}`)

  if (!response.ok) throw Error(response.statusText)

  return await response.json()
}

;(async () =&amp;gt; {
  // concurrent
  const t1 = measureTime()
  const user = await fetchGitHubUser(&#39;/users/qetr1ck-op&#39;)
  const repos = await fetchGitHubUser(&#39;/users/qetr1ck-op/repos&#39;)

  console.log(`concurrent: ${t1().millisecondsTotal}`)
  console.log(user.name, `repos: ${repos.length}`)
})()

;(async () =&amp;gt; {
  // parallel
  const t1 = measureTime()
  const userPromise = fetchGitHubUser(&#39;/users/qetr1ck-op&#39;)
  const reposPromise = fetchGitHubUser(&#39;/users/qetr1ck-op/repos&#39;)

  const user = await userPromise
  const repos = await reposPromise

  console.log(`parallel: ${t1().millisecondsTotal}`)
  console.log(user.name, `repos: ${repos.length}`)
})()


;(async () =&amp;gt; {
  // parallel vol.2
  const t1 = measureTime()
  const [ user, repos ] = await Promise.all([
      fetchGitHubUser(&#39;/users/qetr1ck-op&#39;),
      fetchGitHubUser(&#39;/users/qetr1ck-op/repos&#39;)
  ])

  console.log(user.name, `repos: ${repos.length}`)
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;use-the-await-operator-with-any-thenable&#34;&gt;Use the &lt;code&gt;await&lt;/code&gt; Operator with Any Thenable&lt;/h1&gt;

&lt;p&gt;The await operator is not restricted to ES2015 promises. It can be used to await any thenable — that is, any object with a .then() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Bluebird = require(&amp;quot;bluebird&amp;quot;);

async function main() {
    console.log(&amp;quot;Working ...&amp;quot;);
    await Bluebird.delay(2000);
    console.log(&amp;quot;Done.&amp;quot;);
}

main();
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;iterate-asynchronously-with-the-for-await-of-loop&#34;&gt;Iterate Asynchronously with the &lt;code&gt;for-await-of&lt;/code&gt; Loop&lt;/h1&gt;

&lt;p&gt;An &lt;a href=&#34;https://github.com/mariusschulz/egghead-async-await/tree/master/lesson-8&#34;&gt;example&lt;/a&gt; with &lt;code&gt;ts&lt;/code&gt; configuration&lt;/p&gt;

&lt;h1 id=&#34;save-my-day&#34;&gt;Save my day&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://egghead.io/courses/asynchronous-javascript-with-async-await&#34;&gt;original videos by Marius Schulz on egghead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Advanced NodeJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/advanced-nodejs/</link>
      <pubDate>Tue, 02 May 2017 20:16:35 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/advanced-nodejs/</guid>
      <description>&lt;p&gt;This course will teach you the core Node.js concepts and API modules from simple utility modules all the way to streams and clusters.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;!--toc--&gt;

&lt;h1 id=&#34;node-javascript&#34;&gt;Node != Javascript&lt;/h1&gt;

&lt;h2 id=&#34;node-s-architecture&#34;&gt;Node&amp;rsquo;s architecture&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node VMs: &lt;code&gt;V8&lt;/code&gt;, &lt;code&gt;Chakra&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;V8 Feature Groups: &lt;code&gt;shipping&lt;/code&gt;, &lt;code&gt;staged (--harmony)&lt;/code&gt;, &lt;code&gt;inprogress (--harmony_for_in)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All V8 options &lt;code&gt;node --v8-options | less&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Node&amp;rsquo;s architecture diagram: &lt;code&gt;V8&lt;/code&gt; and &lt;code&gt;libuv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-s-cli-and-repl&#34;&gt;Node&amp;rsquo;s CLI and REPL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Autocomplete feature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; as last evaluated value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; repl commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repl&lt;/code&gt; module&lt;/li&gt;
&lt;li&gt;Node&amp;rsquo;s available list commands &lt;code&gt;node --help | less&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;global-object-process-buffer&#34;&gt;&amp;ldquo;global&amp;rdquo; Object, &amp;ldquo;Process&amp;rdquo;, &amp;ldquo;Buffer&amp;rdquo;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;local vs &lt;code&gt;global&lt;/code&gt; scope&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process&lt;/code&gt; as a bridge between Node app and its running env

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.versions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.release.lts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.env&lt;/code&gt; as &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;using as &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/1.5/index.js&#34;&gt;configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process&lt;/code&gt; is an &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/1.5/process.js&#34;&gt;event emitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt; is essentially a used to work with binary streams of data.

&lt;ul&gt;
&lt;li&gt;read length &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/1.5/buffer.js&#34;&gt;Buffer.from&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;can use similar method as on array, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/1.5/buff.slice.js&#34;&gt;slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string_decoder&lt;/code&gt; module provides an API for decoding Buffer objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters, [example]()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-require-actually-works&#34;&gt;How &amp;ldquo;require&amp;rdquo; actually works&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Steps: resolving -&amp;gt; loading -&amp;gt; wrapping -&amp;gt; evaluating -&amp;gt; caching&lt;/li&gt;
&lt;li&gt;&lt;code&gt;module&lt;/code&gt; module, &lt;code&gt;module.path&lt;/code&gt;, &lt;code&gt;module.parent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require.resolve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;algorithm of &lt;code&gt;require&lt;/code&gt; search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;module.exports&lt;/code&gt; = &lt;code&gt;exports&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;module.loaded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/1.6/index.js&#34;&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;json-and-c-addons&#34;&gt;JSON and C++ addons&lt;/h2&gt;

&lt;h2 id=&#34;wrapping-and-caching-modules&#34;&gt;Wrapping and Caching modules&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;require(&#39;module&#39;).wrapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require.main === module&lt;/code&gt; with CLI and requiring module &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/1.8/printStars.js&#34;&gt;printStars.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;delete &lt;code&gt;require.cache&lt;/code&gt; or &lt;code&gt;module.exports&lt;/code&gt; as a function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;know-your-npm&#34;&gt;Know your npm&lt;/h2&gt;

&lt;h1 id=&#34;concurrency-model-and-event-loop&#34;&gt;Concurrency model and Event Loop&lt;/h1&gt;

&lt;h2 id=&#34;what-is-i-o-anyway&#34;&gt;What is I/O anyway?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the definition&lt;/li&gt;
&lt;li&gt;node architecture in I/O&lt;/li&gt;
&lt;li&gt;handling slow I/O operation: synchronous, &lt;code&gt;fork()&lt;/code&gt; for new process, threads (problem with sharing resources), event loop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-event-loop&#34;&gt;The Event Loop&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the definition&lt;/li&gt;
&lt;li&gt;the visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-call-stack&#34;&gt;The Call Stack&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the definition&lt;/li&gt;
&lt;li&gt;the visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;handling-slow-operation&#34;&gt;Handling slow operation&lt;/h2&gt;

&lt;h2 id=&#34;how-callbacks-actually-work&#34;&gt;How callbacks actually work&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;settimeout-setimmediate-process-nexttick&#34;&gt;&amp;ldquo;setTimeout&amp;rdquo;, &amp;ldquo;setImmediate&amp;rdquo;, &amp;ldquo;process.nextTick&amp;rdquo;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/2.7/nextTick.js&#34;&gt;example&lt;/a&gt; how to handle async error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; vs &lt;code&gt;setImmediate&lt;/code&gt; vs &lt;code&gt;process.nextTick&lt;/code&gt;, visual explanation [&lt;a href=&#34;http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation#38742776&#34;&gt;http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation#38742776&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setImmediate&lt;/code&gt; executes after &lt;code&gt;setTimeout&lt;/code&gt;, &lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/issues/25788&#34;&gt;explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;node-s-event-driven-architecture&#34;&gt;Node&amp;rsquo;s Event-driven architecture&lt;/h1&gt;

&lt;h2 id=&#34;callback-promises-async-await&#34;&gt;&amp;ldquo;Callback&amp;rdquo;, &amp;ldquo;Promises&amp;rdquo;, &amp;ldquo;async/await&amp;rdquo;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Async != Callback&lt;/li&gt;
&lt;li&gt;async &lt;code&gt;callback&lt;/code&gt; &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/3.1/async-callback.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;async &lt;code&gt;promise&lt;/code&gt; and &lt;code&gt;async/await&lt;/code&gt; &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/3.1/async-promise.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;event-emitter&#34;&gt;Event Emitter&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;sync events &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/3.2/sync-events.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;async events &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/3.2/async-events.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arguments-errors-order-of-listeners&#34;&gt;Arguments, Errors, Order of Listeners&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;handling error with &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;uncaughtException&lt;/code&gt;, register listener with &lt;code&gt;once&lt;/code&gt; method, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/3.3/errors.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;order of invoke listeners, &lt;code&gt;prependListener&lt;/code&gt;, &lt;code&gt;removeListener&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/3.3/order.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Task List Management &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/3.4&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;node-for-networking&#34;&gt;Node for Networking&lt;/h1&gt;

&lt;h2 id=&#34;tcp-networking-with&#34;&gt;TCP networking with&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net&lt;/code&gt; module, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/4.1/net.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working-with-multiple-sockets&#34;&gt;Working with multiple sockets&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/4.2/net.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;improving-the-chat-server&#34;&gt;Improving the chat server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;remove logging message to ourself, adding names, timestamp, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/4.3/chat.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-dns-module&#34;&gt;The DNS module&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookup&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt; methods &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/4.4/dns.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;udp-sockets&#34;&gt;UDP sockets&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dgram&lt;/code&gt; module and creating event emitter by &lt;code&gt;dgram.createSocket(&#39;udp4&#39;)&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/4.5/udp.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;node-for-web&#34;&gt;Node for Web&lt;/h1&gt;

&lt;h2 id=&#34;the-basic-streaming-http-server&#34;&gt;The basic streaming HTTP server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http.createServer&lt;/code&gt; as an event emitter, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.1/http.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working-with-https&#34;&gt;Working with HTTPS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;create key and certificate with &lt;code&gt;openssl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;working with &lt;code&gt;https&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.2/https.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;requesting-http-https-data&#34;&gt;Requesting HTTP/HTTPS data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;5 major classes of &lt;code&gt;http&lt;/code&gt; module&lt;/li&gt;
&lt;li&gt;client &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.3/request.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;server &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.3/server.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working-with-routes&#34;&gt;Working with Routes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;read requested url with &lt;code&gt;http.IncomingMessage&lt;/code&gt; &amp;lt;- &lt;code&gt;req.url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;response pages with &lt;code&gt;http.ServerResponse&lt;/code&gt; &amp;lt;- &lt;code&gt;res.writeHeader()&lt;/code&gt; and &lt;code&gt;res.end()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;redirect response&lt;/li&gt;
&lt;li&gt;response with JSON&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404&lt;/code&gt; response&lt;/li&gt;
&lt;li&gt;get all response in &lt;code&gt;http.STATUS_CODES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.4/server.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;parsing-url-and-query-string&#34;&gt;Parsing URL and Query String&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;module &lt;code&gt;url&lt;/code&gt; with &lt;code&gt;url.parse(&#39;hrefString&#39;, ?parseQueryString)&lt;/code&gt; and &lt;code&gt;url.format()&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.5/url.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querystring&lt;/code&gt; module, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/5.5/querystring.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;node-s-common-built-in-modules&#34;&gt;Node&amp;rsquo;s Common built-in modules&lt;/h1&gt;

&lt;h2 id=&#34;working-with-operation-system&#34;&gt;Working with operation system&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;module &lt;code&gt;os&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/6.1/index.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working-with-file-system&#34;&gt;Working with File System&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Task 1: script to fix files in directory. Each file has its data duplicated. Truncate each file in half. &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/6.2/task1&#34;&gt;solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Task 2: scripts to generate/clean old files in a directory. Anything older than 7 days should be deleted &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/6.2/task2&#34;&gt;solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Task 3: watch a directory and report events which were occurred: added, removed, changed &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/6.2/task3&#34;&gt;solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;console-and-utilites&#34;&gt;Console and Utilites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.Console&lt;/code&gt;, &lt;code&gt;util.debuglog&lt;/code&gt;, &lt;code&gt;util.deprecate&lt;/code&gt;, &lt;code&gt;util.inherits&lt;/code&gt; and ES6 &lt;code&gt;extends&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/6.3/index.js&#34;&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node debug script.js&lt;/code&gt;, commands: &lt;code&gt;help&lt;/code&gt;, &lt;code&gt;restart&lt;/code&gt;, &lt;code&gt;sb(line)&lt;/code&gt;, &lt;code&gt;repl&lt;/code&gt;, &lt;code&gt;watch(var)&lt;/code&gt;, &lt;code&gt;list(lines)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node --inspect-brk script.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;working-with-streams&#34;&gt;Working with streams&lt;/h1&gt;

&lt;h2 id=&#34;streams-all-the-thing&#34;&gt;Streams all the thing!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The definition&lt;/li&gt;
&lt;li&gt;Distinguish to serve enormous file with buffer &lt;code&gt;fs.readFile&lt;/code&gt; and stream &lt;code&gt;fs.createReadStream&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/7.1&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;steam-101&#34;&gt;Steam 101&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Types of stream&lt;/li&gt;
&lt;li&gt;All stream are instance of EventEmitter&lt;/li&gt;
&lt;li&gt;Consuming streams &lt;code&gt;readableStream.pipe(writableStream)&lt;/code&gt; / events&lt;/li&gt;
&lt;li&gt;Stream Events Table&lt;/li&gt;
&lt;li&gt;Readable stream mode: &amp;ldquo;paused/pull&amp;rdquo;, &amp;ldquo;flowing/push&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;implementing-readable-and-writable-streams&#34;&gt;Implementing Readable and Writable streams&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;writable &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/7.3/writable.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;readable &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/7.3/readable.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;duplex-and-transform-streams&#34;&gt;Duplex and Transform streams&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;duplex &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/7.4/duplex.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;transform &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/7.4/transform.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;transform with &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/7.4/zip.js&#34;&gt;gzip example&lt;/a&gt; and &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/7.4/unzip.js&#34;&gt;unzip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cluster-adn-child-process&#34;&gt;Cluster adn Child Process&lt;/h1&gt;

&lt;h2 id=&#34;scalling-node-js-application&#34;&gt;Scalling Node.js application&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why one process in one CPU is not enough&lt;/li&gt;
&lt;li&gt;Using multiple process is only way to scale&lt;/li&gt;
&lt;li&gt;Scalability strategies:&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Cloning&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Decomposing (associated with term microservices)&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Splitting (sharding)&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;child-processes-events-and-standard-io&#34;&gt;Child processes events and standard IO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;4 different way to create child process: &lt;code&gt;spawn()&lt;/code&gt;, &lt;code&gt;fork()&lt;/code&gt;, &lt;code&gt;exec()&lt;/code&gt;, &lt;code&gt;execFile()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn()&lt;/code&gt; child process &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.2/spawn.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;spawn()&lt;/code&gt; as an stream &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.2/spawn-pipe.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-shell-syntax-with-exec-and-execfile&#34;&gt;The Shell syntax with &lt;code&gt;exec()&lt;/code&gt; and &lt;code&gt;execFile()&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt; vs &lt;code&gt;spawn()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt; with options &lt;code&gt;shell, cwd, env&lt;/code&gt;, &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.3/exec.js&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detached&lt;/code&gt; option and &lt;code&gt;childProcess.unref()&lt;/code&gt; &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.3/detach.js&#34;&gt;example&lt;/a&gt; with &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.3/timer.js&#34;&gt;timer.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-fork-function&#34;&gt;The &lt;code&gt;fork()&lt;/code&gt; function&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt; vs &lt;code&gt;spawn()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;communication with &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.4/parent.js&#34;&gt;parent&lt;/a&gt; and &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.4/child.js&#34;&gt;child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;long running process with http request: &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.4/server.js&#34;&gt;server&lt;/a&gt; and &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/blob/master/8.4/compute.js&#34;&gt;computation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-cluster-module&#34;&gt;The Cluster module&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using as a Load Balancer&lt;/li&gt;
&lt;li&gt;Diagram with Master Process and Cloning Process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;load-balancing-an-http-server&#34;&gt;Load-balancing an HTTP server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;benchmark with request per seconds&lt;/li&gt;
&lt;li&gt;clustering HTTP server &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/8.6&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;broadcasting-messages-to-each-worker&#34;&gt;Broadcasting messages to each Worker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mocking fetch user from DB only from Master Worker &lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/8.7&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;availability-and-zero-downtime-restart&#34;&gt;Availability and Zero-downtime restart&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs/tree/master/8.7&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;shared-state-and-sticky-load-balancer&#34;&gt;Shared State and Sticky Load Balancer&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why shared states with different workers is a problem?&lt;/li&gt;
&lt;li&gt;Sticky Load Balancer as a solution&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;save-my-day&#34;&gt;Save my day&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/nodejs-advanced&#34;&gt;original course by Samer Buna on pluralsight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/advanced-nodejs&#34;&gt;github repo of examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Mastering Flux and Redux</title>
      <link>https://qetr1ck-op.github.io/blog/post/mastering-flux-and-redux/</link>
      <pubDate>Tue, 02 May 2017 19:38:57 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/mastering-flux-and-redux/</guid>
      <description>

&lt;p&gt;At the core of any solid web application is an effective and well-managed data model. In this course, Mastering Flux and Redux, you&amp;rsquo;ll learn the skills and technologies necessary to manage your application&amp;rsquo;s data model in extremely efficient and standards-compliant ways.&lt;/p&gt;

&lt;h1 id=&#34;topics&#34;&gt;Topics&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;First, you&amp;rsquo;ll learn all about the popular data-modeling libraries Flux and Redux; their differences and similarities, how they relate to one another, and which is appropriate for what kind of projects.&lt;/li&gt;
&lt;li&gt;Next, you&amp;rsquo;ll apply what you&amp;rsquo;ve learned in four modules packed with hands-on demos where you will build a 3-part Flux and Redux application featuring a message board, a TodoMVC page, and a control panel.&lt;/li&gt;
&lt;li&gt;Then, you&amp;rsquo;ll explore the skills needed to create any Flux or Redux application, modeling changes with actions, and developing idempotent functions for reducers.&lt;/li&gt;
&lt;li&gt;Finally, you&amp;rsquo;ll create Redux stores with reducers and middleware, combining reducers, using and implementing a dispatcher, and much more.&lt;/li&gt;
&lt;li&gt;When you&amp;rsquo;re finished, you&amp;rsquo;ll have a deep understanding of both Flux and Redux, allowing you to implement them for any project you choose, integrate seamlessly into any workplace project employing either of these technologies, and get started towards developing your own implementations and middleware.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://app.pluralsight.com/library/courses/flux-redux-mastering/table-of-contents&#34;&gt;Pluralsight - Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/danielstern/flux-redux&#34;&gt;Github - repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kata: Salesman&#39;s Travel</title>
      <link>https://qetr1ck-op.github.io/blog/post/kata-salesmans-travel/</link>
      <pubDate>Sat, 29 Apr 2017 23:56:58 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/kata-salesmans-travel/</guid>
      <description>&lt;p&gt;A traveling salesman has to visit clients. He got each client&amp;rsquo;s address e.g. &amp;ldquo;432 Main Long Road St. Louisville OH 43071&amp;rdquo; as a list.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The basic zipcode format usually consists of two capital letters followed by a white space and five digits. The list of clients to visit was given as a string of all addresses, each separated from the others by a comma, e.g. :&lt;/p&gt;

&lt;p&gt;&amp;ldquo;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To ease his travel he wants to group the list by zipcode.&lt;/p&gt;

&lt;h1 id=&#34;task&#34;&gt;Task&lt;/h1&gt;

&lt;p&gt;The function travel will take two parameters r (list of all clients&amp;rsquo; addresses) and zipcode and returns a string in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;zipcode:street and town,street and town,.../house number,house number,...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The street numbers must be in the same order as the streets where they belong.&lt;/p&gt;

&lt;p&gt;If a given zipcode doesn&amp;rsquo;t exist in the list of clients&amp;rsquo; addresses return &amp;ldquo;zipcode:/&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;r = &amp;quot;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&amp;quot;

travel(r, &amp;quot;OH 43071&amp;quot;) --&amp;gt; &amp;quot;OH 43071:Main Street St. Louisville,Main Long Road St. Louisville/123,432&amp;quot;

travel(r, &amp;quot;NY 56432&amp;quot;) --&amp;gt; &amp;quot;NY 56432:High Street Pollocksville/786&amp;quot;

travel(r, &amp;quot;NY 5643&amp;quot;) --&amp;gt; &amp;quot;NY 5643:/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;spec&#34;&gt;Spec&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Test.describe(&amp;quot;travel&amp;quot;,function() {
    Test.it(&amp;quot;Basic tests&amp;quot;,function() {    
        testing(travel(ad, &amp;quot;AA 45522&amp;quot;), &amp;quot;AA 45522:Paris St. Abbeville,Paris St. Abbeville/67,670&amp;quot;)
        testing(travel(ad, &amp;quot;EX 34342&amp;quot;), &amp;quot;EX 34342:Pussy Cat Rd. Chicago,Pussy Cat Rd. Chicago/10,100&amp;quot;)
        testing(travel(ad, &amp;quot;EX 34345&amp;quot;), &amp;quot;EX 34345:Pussy Cat Rd. Chicago/100&amp;quot;)
        testing(travel(ad, &amp;quot;AA 45521&amp;quot;), &amp;quot;AA 45521:Paris bd. Abbeville,Paris St. Abbeville/674,67&amp;quot;)
        testing(travel(ad, &amp;quot;AE 56215&amp;quot;), &amp;quot;AE 56215:Main Al. Bern/320&amp;quot;)
    })
})

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function travel(r, zipcode) {
    const re = /(\d{1,4}) (.*?) (\w{2} \d{4,5}),?/gi
    const res = {
      prefix: zipcode + &#39;:&#39;,
      addr: [],
      nb: [],
    }
    while(arr = re.exec(r)){
      const [_ , nb, addr, zip] = arr
      if(zip != zipcode)
        continue
      res.addr.push(addr)
      res.nb.push(nb)
    }
    return res.prefix + res.addr.join(&#39;,&#39;) + &#39;/&#39; + res.nb.join(&#39;,&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codewars.com/kata/salesmans-travel&#34;&gt;kata: salesmans-travel&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>npm scrips as your build tool</title>
      <link>https://qetr1ck-op.github.io/blog/post/npm-scrips-as-your-build-tool/</link>
      <pubDate>Sat, 29 Apr 2017 12:14:14 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/npm-scrips-as-your-build-tool/</guid>
      <description>&lt;p&gt;The course introduces the topic of using npm scripts as a build tool. It starts simple and then continue to build a small website as we introduce new topics.&lt;/p&gt;

&lt;p&gt;By the end of the course, you&amp;rsquo;ll know how to get started and what tools and techniques are needed for you to create your own set of build scripts.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;topics&#34;&gt;Topics:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create a basic &lt;code&gt;package.json&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Run the basic npm scripts&lt;/li&gt;
&lt;li&gt;Create a custom npm script&lt;/li&gt;
&lt;li&gt;Run npm scripts in &lt;code&gt;series&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run npm scripts in &lt;code&gt;parallel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use a shorthand syntax for running multiple npm scripts with &lt;code&gt;npm-run-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run a set of similar npm scripts with a &lt;code&gt;wildcard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; npm script lifecycle hooks with test coverage&lt;/li&gt;
&lt;li&gt;Pass arguments to npm scripts via &lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pipe data from one npm script to another with build-site scripts&lt;/li&gt;
&lt;li&gt;Run npm scripts when files change with &lt;code&gt;onchange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use package.json &lt;code&gt;variables&lt;/code&gt; in npm scripts&lt;/li&gt;
&lt;li&gt;Use custom config settings in your npm scripts&lt;/li&gt;
&lt;li&gt;Run npm scripts with git hooks using &lt;code&gt;husky&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the level of console output when running npm scripts&lt;/li&gt;
&lt;li&gt;Make npm scripts cross-environment friendly with &lt;code&gt;cross-env&lt;/code&gt;, &lt;code&gt;rimraf&lt;/code&gt;, &lt;code&gt;opn-cli&lt;/code&gt;, &lt;code&gt;cross-var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List available npm scripts and support tab completion with &lt;code&gt;ntl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add comments to your npm scripts&lt;/li&gt;
&lt;li&gt;Pull out npm scripts into another file with &lt;code&gt;p-s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;bash script&lt;/code&gt; to replace a complex npm script&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;node script&lt;/code&gt; to replace a complex npm script&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://egghead.io/courses/how-to-use-npm-scripts-as-your-build-tool&#34;&gt;egghead course - How to Use npm Scripts as Your Build Tool&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prettier as a formating tool for JS</title>
      <link>https://qetr1ck-op.github.io/blog/post/prettier-as-a-formating-tool-for-JS/</link>
      <pubDate>Wed, 26 Apr 2017 22:23:01 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/prettier-as-a-formating-tool-for-JS/</guid>
      <description>

&lt;p&gt;Prettier is an opinionated JavaScript formatter with advanced support for language features from &lt;code&gt;ES2017&lt;/code&gt;, &lt;code&gt;JSX&lt;/code&gt;, and &lt;code&gt;Flow&lt;/code&gt;. It removes all original styling and ensures that all outputted JavaScript conforms to a consistent style.&lt;/p&gt;

&lt;p&gt;This goes way beyond &lt;code&gt;ESLint&lt;/code&gt; and other projects built on it. Unlike &lt;code&gt;ESLint&lt;/code&gt;, there aren&amp;rsquo;t a million configuration options and rules. But more importantly: everything is fixable. This works because Prettier never &amp;ldquo;checks&amp;rdquo; anything; it takes JavaScript as input and delivers the formatted JavaScript as output.&lt;/p&gt;

&lt;p&gt;In technical terms: Prettier parses your JavaScript into an &lt;code&gt;AST&lt;/code&gt; (Abstract Syntax Tree) and pretty-prints the AST, completely ignoring any of the original formatting. Say hello to completely consistent syntax!&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;Github repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prettier/prettier/tree/master/editors&#34;&gt;Integration list app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/webstorm/2016/08/using-external-tools#Prettier&#34;&gt;Integration with WebStorm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Essential Programming Books</title>
      <link>https://qetr1ck-op.github.io/blog/post/essential-programming-books/</link>
      <pubDate>Sun, 23 Apr 2017 22:35:48 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/essential-programming-books/</guid>
      <description>&lt;p&gt;The list of 129 books deemed fundamental to the art of programming and includes books for various languages.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goodreads.com/list/show/542.Essential_Programming_Books?page=1&#34;&gt;good reads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Front End Handbook 2017</title>
      <link>https://qetr1ck-op.github.io/blog/post/front-end-handbook-2017/</link>
      <pubDate>Sun, 23 Apr 2017 19:11:25 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/front-end-handbook-2017/</guid>
      <description>&lt;p&gt;This is a guide that anyone could use to learn about the practice of front-end development. It broadly outlines and discusses the practice of front-end engineering: how to learn it and what tools are used when practicing it in 2017&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The handbook is divided into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part I. The Front-End Practice

&lt;ul&gt;
&lt;li&gt;Part one broadly describes the practice of front-end engineering.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Part II: Learning Front-End Development

&lt;ul&gt;
&lt;li&gt;Part two identifies self-directed and direct resources for learning to become a front-end developer.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Part III: Front-End Development Tools

&lt;ul&gt;
&lt;li&gt;Part three briefly explains and identifies tools of the trade.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frontendmasters.com/books/front-end-handbook/2017/&#34;&gt;read online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Favicon generator</title>
      <link>https://qetr1ck-op.github.io/blog/post/simple-favicon-generator/</link>
      <pubDate>Sun, 09 Apr 2017 20:23:14 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/simple-favicon-generator/</guid>
      <description>&lt;p&gt;With so many platforms and icons, it&amp;rsquo;s hard to know exactly what you should do. What are the dimensions of favicon.ico? How many Touch icons do I need? RealFaviconGenerator did the research and testing for you.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://realfavicongenerator.net/&#34;&gt;realfavicongenerator.net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A static site with a dynamic search function</title>
      <link>https://qetr1ck-op.github.io/blog/post/static-site-with-a-dynamic-search/</link>
      <pubDate>Sun, 09 Apr 2017 12:09:08 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/static-site-with-a-dynamic-search/</guid>
      <description>&lt;p&gt;A static site with a dynamic search function? Yes. Alternatively to embeddable scripts from Google or other search engines you can provide your visitors a custom search by indexing your content files directly.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugo-lunr&#34;&gt;hugo-lunr&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/hugo-lunr&#34;&gt;hugo-lunr&lt;/a&gt; - A simple way to add site search to your static Hugo site using &lt;a href=&#34;https://github.com/olivernn/lunr.js&#34;&gt;lunr.js&lt;/a&gt;. Hugo-lunr will create an index file of any html and markdown documents in your Hugo project&lt;/p&gt;

&lt;h1 id=&#34;implementation&#34;&gt;implementation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/blog-hugo-source/blob/master/themes/hugo-code-theme/layouts/partials/search.html&#34;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rayhightower.com/blog/2016/01/04/how-to-make-lunrjs-jekyll-work-together/&#34;&gt;How to Make lunr.js and Jekyll Work Together (with Gotchas)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS 30</title>
      <link>https://qetr1ck-op.github.io/blog/post/Js-30/</link>
      <pubDate>Tue, 04 Apr 2017 14:51:54 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Js-30/</guid>
      <description>&lt;p&gt;To fresh memory with &lt;a href=&#34;https://javascript30.com/&#34;&gt;30 day vanilla js coding challenge&lt;/a&gt;. Build 30 things in 30 days with 30 tutorials. No Frameworks, No Compilers, No Libraries, No Boilerplate!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;How do you get better?&lt;/p&gt;

&lt;p&gt;Build things. Lots of things. Build 1,000 things. Keep it up and don&amp;rsquo;t stop. Seriously.&lt;/p&gt;

&lt;p&gt;This has always been my advice. Just put in the work and you will get better.&lt;/p&gt;

&lt;p&gt;But Wes, what should I build? I have no ideas! Please don&amp;rsquo;t make me do another todo app.&lt;/p&gt;

&lt;p&gt;Ideas, Eh? I&amp;rsquo;ve got lots! This is JavaScript30 — let&amp;rsquo;s build 30 things together.&lt;/p&gt;

&lt;h1 id=&#34;done-challenges&#34;&gt;Done challenges&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/01-drum-kit/index.html&#34;&gt;01 - Drum kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/02-js-and-css-clock/index.html&#34;&gt;02 - CSS + JS clock&lt;/a&gt;, &lt;a href=&#34;http://thenewcode.com/943/An-SVG-Analog-Clock-In-6-Lines-of-JavaScript&#34;&gt;SVG + JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/03-css-variables/index.html&#34;&gt;03 - CSS variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/04-array-cardio-day1/index.html&#34;&gt;04 - Array Cardio Day 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/05-flex-panel-gallery/index.html&#34;&gt;05 - Flex panel gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/06-type-ahead/index.html&#34;&gt;06 - AJAX Type Ahead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/07-array-cardio-day2/index.html&#34;&gt;07 - Array Cardio Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/08-fun-with-html5-canvas/index.html&#34;&gt;08 - Fun with HTML5 Canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/09-dev-tools-domination/index.html&#34;&gt;09 - Dev Tools Domination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/10-hold-shift-and-check-checkboxes/index.html&#34;&gt;10 - Hold Shift and Check Checkboxes&lt;/a&gt;, &lt;a href=&#34;http://plnkr.co/edit/NthETyzybeilD13jen4y?p=preview&#34;&gt;With Ctrl example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/11-custom-video-player/index.html&#34;&gt;11 - Custom Video Player&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/12-key-sequence-detection/index.html&#34;&gt;12 - Key Sequence Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/13-slide-in-on-scroll/index.html&#34;&gt;13 - Slide in on Scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/14-js-references-vs-copying/index.html&#34;&gt;14 - JavaScript References VS Copying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/15-local-storage/index.html&#34;&gt;15 - LocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/16-mouse-move-shadow/index.html&#34;&gt;16 - Mouse Move Shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/17-sort-without-articles/index.html&#34;&gt;17 - Sort Without Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./html/js-30/19-webcam-fun/index.html&#34;&gt;19 - Webcam Fun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wesbos/JavaScript30&#34;&gt;Github original source&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improve web performance using Google PageSpeed</title>
      <link>https://qetr1ck-op.github.io/blog/post/improve-web-performance-using-google-pageSpeed/</link>
      <pubDate>Sun, 02 Apr 2017 14:51:54 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/improve-web-performance-using-google-pageSpeed/</guid>
      <description>&lt;p&gt;This course covers how to analyze your web pages to make sure they are following known performance best practices.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;Developers today have access to multiple tools that can quickly analyze a web page for performance best practices and give specific suggestions on what items should be addressed. This course first covers the different analysis tools that are available. It then uses one of these tools, the Performance Scorecard Chrome extension to analyze a sample website. Then, the course walks through each of the important recommendations given by the extension and shows how to fix them. By the end of this course, you will have a firm grasp of the most important web performance issues and how to address them.&lt;/p&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/google-pagespeed-insights-web-performance&#34;&gt;course on pluralsight&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a JavaScript development environment</title>
      <link>https://qetr1ck-op.github.io/blog/post/building-a-javaScript-development-environment/</link>
      <pubDate>Sun, 02 Apr 2017 14:31:50 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/building-a-javaScript-development-environment/</guid>
      <description>&lt;p&gt;Starting a new JavaScript project from scratch is overwhelming. This course provides a playbook outlining the key decisions you need to make. Build a robust development environment that handles bundling, linting, transpiling, testing, and much more.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;Building a JavaScript application from scratch today is overwhelming. You have to make decisions about package management, bundling, linting, transpiling, automated testing, and much more. There are literally over 40 important decisions to consider. This course is a playbook of potential options that provides a clear path through the key decisions. Along the way, we&amp;rsquo;ll build a robust automated development environment from the ground up using ES6. You’ll learn how to set up a reusable development environment that provides a powerful foundation for future projects, that’s tailored just for your team’s needs.&lt;/p&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/javascript-development-environment&#34;&gt;course on pluralsight&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PatternCraft</title>
      <link>https://qetr1ck-op.github.io/blog/post/pattern-craft/</link>
      <pubDate>Sun, 05 Mar 2017 01:35:33 +0200</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/pattern-craft/</guid>
      <description>&lt;p&gt;An awesome explanation of GOF design patterns. The only way to learn pattern is to know what problem it solves.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;state&#34;&gt;State&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=yZt7mUVDijU&#34;&gt;State Design Pattern&lt;/a&gt; can be used, for example, to manage the state of tank in StarCraft game.&lt;/p&gt;

&lt;p&gt;The pattern consists in isolating the state logic in different &lt;code&gt;class&lt;/code&gt;es than having multiple &lt;code&gt;if&lt;/code&gt;s to determinate the flow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class TankState {
    constructor(damage = 5, canMove = true) {
        Object.assign(this, { damage, canMove });
    }

    static get defaultState() { return new SiegeState(); }
}

// state #1
class SiegeState extends TankState {
    constructor() {
        super(20, false);
    }
}

// state #2
class SpeedState extends TankState {
    constructor() {
        super(5, true);
    }
}

class Tank {
    constructor() {
        this.state = TankState.defaultState;
    }

    // implementation bellow relies only on current state, without using multiple if/switch
    get canMove() { return this.state.canMove; } 

    get damage() { return this.state.damage; }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test specs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;State pattern&#39;, () =&amp;gt; {
    it(&#39;Default tank state is SiegeState&#39;, () =&amp;gt; {
        const tank = new Tank();
        
        expect(tank.state instanceof SiegeTank).to.be.true;
    });

    it(&#39;SiegeState&#39;, () =&amp;gt; {
        const tank = new SiegeState();

        expect(tank.damage).to.equal(20);
        expect(tank.canMove).to.be.false;
    });

    it(&#39;SpeedState&#39;, () =&amp;gt; {
        const tank = new SpeedState();

        expect(tank.damage).to.equal(5);
        expect(tank.canMove).to.be.true;
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;strategy&#34;&gt;Strategy&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=MOEsKHqLiBM&#34;&gt;Strategy Design Pattern&lt;/a&gt; can be used, for example, to determinate how a unit moves in StarCraft game.&lt;/p&gt;

&lt;p&gt;The pattern consists in having different strategy for one functionality. A unit, for example, can move by walking or flying or swimming.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// strategy #1
class Walk() {
    move(unit) {
        unit.position += 5;
    }
}
// strategy #2
class Fly() {
    move(unit) {
        unit.position += 20;
    }
}

class Viking {
    constructor() {
        this.moveBehavior = new Walk();
        this.position = 0;
    }

    move() { this.moveBehavior.move(this); } // delegate behavior to strategy
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test specs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;Strategy pattern&#39;, () =&amp;gt; {
    it(&#39;Default viking move behavior is Walk&#39;, () =&amp;gt; {
        const viking = new Viking();
        
        expect(viking.moveBehavior instanceof Walk).to.be.true;
    });

    it(&#39;Walk behavior&#39;, () =&amp;gt; {
        const viking = new Viking();

        viking.move();
        expect(viking.position).to.equal(5);
        viking.move();
        expect(viking.position).to.equal(10);
    });

    it(&#39;Fly behavior&#39;, () =&amp;gt; {
        const viking = new Viking();
        
        viking.moveBehavior = new Fly();
        viking.move();
        expect(viking.position).to.equal(20);
        viking.move();
        expect(viking.position).to.equal(40);
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;adapter&#34;&gt;Adapter&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=hvpXKZhNINc&#34;&gt;Adapter Design Pattern&lt;/a&gt; can be used, to insert an external character in the game.&lt;/p&gt;

&lt;p&gt;The pattern consists in having a wrapper class to adapt the external source.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// in app characters
class Marine {
  attack(target) {
    target.health -= 6;
  }
}

class Zealot {
  attack(target) {
    target.health -= 8;
  }
}

class Zergling {
  attack(target) {
    target.health -= 5;
  }
}

// external
class Mario {
  jumpAttack() {
    console.log(&#39;Mamamia!&#39;);
    return 3;
  }
}

// mario adapter
class MarioAdapter {
    constructor(mario) {
        this.mario = mario;
    }
    
    attack(target) {
        target.health -= this.mario.jumpAttack();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test specs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;Adapter pattern&#39;, () =&amp;gt; {
    it(&#39;Mario can not attack&#39;, () =&amp;gt; {
        const mario = new Mario();
        
        expect(mario.attack).to.be.undefined;
    });

    it(&#39;MarioAdapter can attack&#39;, () =&amp;gt; {
        const mario = new MarioAdapter();
        const target = { health: 50 };

        mario.attack(target);

        expect(target.health).to.equal(47);
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;visitor&#34;&gt;Visitor&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=KSEyIXnknoY&#34;&gt;Strategy Design Pattern&lt;/a&gt; can be used, for example, to determinate how an attack deals a different amount of damage to unit in StarCraft game.&lt;/p&gt;

&lt;p&gt;The pattern delegates the responsibilities to different &lt;code&gt;class&lt;/code&gt;. When a unit takes a damage it can say to the &lt;code&gt;visitor&lt;/code&gt; what do with itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Soldier {
    constructor(health = 100) {
        Object.assign(this, { health });
    }
}

class Marine extends Soldier {
    constructor() {
        super();
    }
    
    // an idiomatic name
    accept(visitor) {
        visitor.visitLight(this);
    }
}

class Marauder extends Soldier {
    constructor() {
        super(180);
    }
    
    accept(visitor) {
        visitor.visitArmored(this);
    }
}

// visitor
class TankBullet {
    visitLight(unit) {
        unit.health -= 11;
    }
    visitArmored(unit) {
        unit.health -= 32;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test specs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;Visitor pattern&#39;, () =&amp;gt; {
    it(&#39;Visit light&#39;, () =&amp;gt; {
        const marine = new Marine();
        const tankBullet = new TankBullet();
        
        tankBullet.visitLight(marine);

        expect(mario.health).to.be(89);
    });

    it(&#39;Visit armored&#39;, () =&amp;gt; {
        const marauder = new Marauder();
        const tankBullet = new TankBullet();
        
        tankBullet.visitArmored(marauder);

        expect(mario.health).to.be(148);
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;decorator&#34;&gt;Decorator&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=17XTOODeWQE&#34;&gt;Decorator Design Pattern&lt;/a&gt; can be used, for example, to manage upgrades.&lt;/p&gt;

&lt;p&gt;The pattern is consists in upgrade your base class with extra functionality.&lt;/p&gt;

&lt;p&gt;A decorator will receive an instance of base class and use it to call a new thing you want.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Marine {
    constructor(_damage, _armor) {
        Object.assign(this, { _damage, _armor });
    }

    get damage { return this._damage; }
    get armor { return this._armor; }
}

// decorator #1
class WeaponUpgrade {
    constructor(unit) {
        this.unit = unit;
    }

    get damage { return this.unit.damage + 1; }
    get armor { return this.unit.armor; }
}

// decorator #2
class ArmorUpgrade {
    constructor(unit) {
        this.unit = unit;
    }

    get damage { return this.unit.damage; }
    get armor { return this.unit.armor + 1; }
}

let marine = new Marine();
marine = new WeaponUpgrade(marine);
marine = new WeaponUpgrade(marine);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test specs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;Decorator pattern&#39;, () =&amp;gt; {
    it(&#39;Weapon upgrade&#39;, () =&amp;gt; {
        let marine = new Marine(10, 2);
        
        marine = new WeaponUpgrade(marine);
        marine = new WeaponUpgrade(marine);

        expect(marine.damage).to.be(12);
        expect(marine.armor).to.be(2);
    });

    it(&#39;Armor upgrade&#39;, () =&amp;gt; {
        let marine = new Marine(10, 2);
        
        marine = new ArmorUpgrade(marine);
        marine = new ArmorUpgrade(marine);

        expect(marine.armor).to.be(4);
        expect(marine.damage).to.be(10);
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;strategy-1&#34;&gt;Strategy&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=MOEsKHqLiBM&#34;&gt;Strategy Design Pattern&lt;/a&gt; can be used, for example, to queue actions.&lt;/p&gt;

&lt;p&gt;The pattern consists in isolating command logic in a class so it can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;queue: you can queue actions to move a probe to a different locations&lt;/li&gt;
&lt;li&gt;undone: you can tell a probe to build something and then call a stop command to undo the action&lt;/li&gt;
&lt;li&gt;validate: you can check if the action can be executed or not, you can not move if building action is in progress&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Probe {
    constructor(commands = [], minerals = 0, x = 0, y = 0) {
        Object.assign(this, {
            position: { x, y },
            commands,
            minerals
        });
    }

    move(x, y) {
        this.commands = [...this.commands, new MoveCommand(this, x, y)];
    }

    gather() {
        this.commands = [...this.commands, new GatherCommand(this)];
    }
}

// command #1
class MoveCommand {
    constructor(unit, x, y) {
        Object.assign(this, { unit, x, y});
    }

    // idiomatic 
    execute() {
        this.unit.position.x = this.x;
        this.unit.position.y = this.y;
    }
}

// command #2
class GatherCommand {
    constructor(unit) {
        this.unit = unit;
    }

    execute() {
        if (this.canExecute) {
            this.unit.minerals += 5;
        }
    }

    get canExecute() {
        return this.unit.minerals === 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test specs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;Command pattern&#39;, () =&amp;gt; {
    it(&#39;MoveCommand should move unit&#39;, () =&amp;gt; {
        const unit = new Probe();
        const moveBehavior = new MoveBehavior(unit, 10, 20);

        moveBehavior.execute();

        expect(unit.position.x).to.equal(10);
        expect(unit.position.y).to.equal(20);
    });

    it(&#39;GatherCommand should gather resources&#39;, () =&amp;gt; {
        const unit = new Probe();
        const moveBehavior = new GatherBehavior(unit);

        moveBehavior.execute();

        expect(unit.materials).to.equal(5);
    });

    it(&#39;GatherCommand should only gather resources if unit does not have resources&#39;, () =&amp;gt; {
        const unit = new Probe();
        const moveBehavior = new GatherBehavior(unit);

        expect(unit.materials).to.equal(5);
        moveBehavior.execute();
        expect(unit.materials).to.equal(5);
        moveBehavior.execute();
        expect(unit.materials).to.equal(5);
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;proxy&#34;&gt;Proxy&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=WcAV9rOGjxw&#34;&gt;Proxy Design Pattern&lt;/a&gt; can be used, for example, to create a &lt;code&gt;drone&lt;/code&gt; by using a proxy &lt;code&gt;cocoon&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The pattern is responsible (&amp;ldquo;stands in&amp;rdquo;) for all requests on original object, typical extend or change behavior, than delegates action again to original object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// original
class Drone {
    move(x, y) {
        this.x = x;
        this.y = y;
    }
}

// proxy
class Cocoon {
    constructor() {
        this.lifetime = 3000;
        // proxing
        this.hatchDrone();
    }

    hatchDrone() {
        setTimeout(this.onHatchDroneDone.bind(this), this.lifetime);
    }
    
    onHatchDroneDone() {
      this.drone = new Drone();
      this.drone.move(this.rallyPath.x, this.rallyPath.y);
    }

    move(x, y) {
        if (this.drone) {
            this.drone.move(x, y);
        } else {
          this.rallyPath = { x, y };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;Proxy pattern&#39;, () =&amp;gt; {
    it(&#39;Create drone when cocoon is hatched&#39;, done =&amp;gt; {
        const drone = new Cocoon();
        
        drone.move(10, 20);

        expect(drone.drone).to.be.undefined;
        expect(drone.rallyPath).to.be({ x: 10, y: 20 });

        setTimeout(() =&amp;gt; {
            expect(drone.drone).to.be.defined;
            expect(drone.drone.x).to.be.equal(10);
            expect(drone.drone.y).to.be.equal(20);
            done();
        }, drone.lifetime)
    });

    it(&#39;Visit armored&#39;, () =&amp;gt; {
        const marauder = new Marauder();
        const tankBullet = new TankBullet();
        
        tankBullet.visitArmored(marauder);

        expect(mario.health).to.be(148);
    });
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A classical JS example to proxing, for example, HTTP request by adding logging before every action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// proxy
const proxiedFetch = fetch;

fetch = (url) =&amp;gt; {
    // proxing
    console.log(&#39;logging...&#39;);
    // original
    proxiedFetch(url);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL8B19C3040F6381A2&#34;&gt;Original series of John Lindquist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcemaking.com/design_patterns&#34;&gt;Just a great resource of Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>