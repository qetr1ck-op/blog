<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Katas on OP blog</title>
    <link>https://qetr1ck-op.github.io/blog/categories/katas/index.xml</link>
    <description>Recent content in Katas on OP blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://qetr1ck-op.github.io/blog/categories/katas/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kata: Salesman&#39;s Travel</title>
      <link>https://qetr1ck-op.github.io/blog/post/2017/04/kata-salesmans-travel/</link>
      <pubDate>Sat, 29 Apr 2017 23:56:58 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2017/04/kata-salesmans-travel/</guid>
      <description>&lt;p&gt;A traveling salesman has to visit clients. He got each client&amp;rsquo;s address e.g. &amp;ldquo;432 Main Long Road St. Louisville OH 43071&amp;rdquo; as a list.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The basic zipcode format usually consists of two capital letters followed by a white space and five digits. The list of clients to visit was given as a string of all addresses, each separated from the others by a comma, e.g. :&lt;/p&gt;

&lt;p&gt;&amp;ldquo;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To ease his travel he wants to group the list by zipcode.&lt;/p&gt;

&lt;h1 id=&#34;task&#34;&gt;Task&lt;/h1&gt;

&lt;p&gt;The function travel will take two parameters r (list of all clients&amp;rsquo; addresses) and zipcode and returns a string in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;zipcode:street and town,street and town,.../house number,house number,...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The street numbers must be in the same order as the streets where they belong.&lt;/p&gt;

&lt;p&gt;If a given zipcode doesn&amp;rsquo;t exist in the list of clients&amp;rsquo; addresses return &amp;ldquo;zipcode:/&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;r = &amp;quot;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&amp;quot;

travel(r, &amp;quot;OH 43071&amp;quot;) --&amp;gt; &amp;quot;OH 43071:Main Street St. Louisville,Main Long Road St. Louisville/123,432&amp;quot;

travel(r, &amp;quot;NY 56432&amp;quot;) --&amp;gt; &amp;quot;NY 56432:High Street Pollocksville/786&amp;quot;

travel(r, &amp;quot;NY 5643&amp;quot;) --&amp;gt; &amp;quot;NY 5643:/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;spec&#34;&gt;Spec&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Test.describe(&amp;quot;travel&amp;quot;,function() {
    Test.it(&amp;quot;Basic tests&amp;quot;,function() {    
        testing(travel(ad, &amp;quot;AA 45522&amp;quot;), &amp;quot;AA 45522:Paris St. Abbeville,Paris St. Abbeville/67,670&amp;quot;)
        testing(travel(ad, &amp;quot;EX 34342&amp;quot;), &amp;quot;EX 34342:Pussy Cat Rd. Chicago,Pussy Cat Rd. Chicago/10,100&amp;quot;)
        testing(travel(ad, &amp;quot;EX 34345&amp;quot;), &amp;quot;EX 34345:Pussy Cat Rd. Chicago/100&amp;quot;)
        testing(travel(ad, &amp;quot;AA 45521&amp;quot;), &amp;quot;AA 45521:Paris bd. Abbeville,Paris St. Abbeville/674,67&amp;quot;)
        testing(travel(ad, &amp;quot;AE 56215&amp;quot;), &amp;quot;AE 56215:Main Al. Bern/320&amp;quot;)
    })
})

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function travel(r, zipcode) {
    const re = /(\d{1,4}) (.*?) (\w{2} \d{4,5}),?/gi
    const res = {
      prefix: zipcode + &#39;:&#39;,
      addr: [],
      nb: [],
    }
    while(arr = re.exec(r)){
      const [_ , nb, addr, zip] = arr
      if(zip != zipcode)
        continue
      res.addr.push(addr)
      res.nb.push(nb)
    }
    return res.prefix + res.addr.join(&#39;,&#39;) + &#39;/&#39; + res.nb.join(&#39;,&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codewars.com/kata/salesmans-travel&#34;&gt;kata: salesmans-travel&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kata: Format a string of names like &#39;Bart, Lisa &amp; Maggie&#39;</title>
      <link>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-String-Format-a-string-of-names-like-Bart-Lisa-Maggie/</link>
      <pubDate>Fri, 19 Feb 2016 00:05:14 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-String-Format-a-string-of-names-like-Bart-Lisa-Maggie/</guid>
      <description>&lt;p&gt;Given: an array containing hashes of names&lt;/p&gt;

&lt;p&gt;Return: a string formatted as a list of names separated by commas except for the last two names, which should be separated by an ampersand.
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;list([ {name: &#39;Bart&#39;}, {name: &#39;Lisa&#39;}, {name: &#39;Maggie&#39;} ])
// returns &#39;Bart, Lisa &amp;amp; Maggie&#39;

list([ {name: &#39;Bart&#39;}, {name: &#39;Lisa&#39;} ])
// returns &#39;Bart &amp;amp; Lisa&#39;

list([ {name: &#39;Bart&#39;} ])
// returns &#39;Bart&#39;

list([])
// returns &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Test.assertEquals(list([{name: &#39;Bart&#39;},{name: &#39;Lisa&#39;},{name: &#39;Maggie&#39;},{name: &#39;Homer&#39;},{name: &#39;Marge&#39;}]), &#39;Bart, Lisa, Maggie, Homer &amp;amp; Marge&#39;,
&amp;quot;Must work with many names&amp;quot;)
Test.assertEquals(list([{name: &#39;Bart&#39;},{name: &#39;Lisa&#39;},{name: &#39;Maggie&#39;}]), &#39;Bart, Lisa &amp;amp; Maggie&#39;,
&amp;quot;Must work with many names&amp;quot;)
Test.assertEquals(list([{name: &#39;Bart&#39;},{name: &#39;Lisa&#39;}]), &#39;Bart &amp;amp; Lisa&#39;, 
&amp;quot;Must work with two names&amp;quot;)
Test.assertEquals(list([{name: &#39;Bart&#39;}]), &#39;Bart&#39;, &amp;quot;Wrong output for a single name&amp;quot;)
Test.assertEquals(list([]), &#39;&#39;, &amp;quot;Must work with no names&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const list = names =&amp;gt; {
  return names.reduce( (prev, current, index, array) =&amp;gt; {
    if (index === 0){
      return current.name;
    }
    else if (index === array.length - 1){
      return `${prev} &amp;amp; ${current.name}`;
    } 
    else {
      return `${prev}, ${current.name}`;
    }
  }, &#39;&#39;);
 }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kata: Filter through name/email</title>
      <link>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Array-RegExp-Filter-through-name-email/</link>
      <pubDate>Mon, 15 Feb 2016 22:34:45 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Array-RegExp-Filter-through-name-email/</guid>
      <description>&lt;p&gt;He has troubles with users ending or starting in a &lt;code&gt;.&lt;/code&gt;, and his user-array is a flat array of user-email-pairs, like so:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ &amp;quot;foo&amp;quot;, &amp;quot;foo@bar.com&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;bar@foo.com&amp;quot;, &amp;quot;.foo&amp;quot;, &amp;quot;food@bar.com&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He is only interested in e-mailing the users and ask them to sign up again, so no need to keep the user-name, only e-mail addresses for the user-names that start or end with a &lt;code&gt;.&lt;/code&gt; should be returned. For the above array, the correct return-array would be &lt;code&gt;[ &amp;quot;food@bar.com&amp;quot; ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe( &amp;quot;Testing a list&amp;quot;, function(){
  it( &amp;quot;Basic list&amp;quot;, function(){
    var a = [ &amp;quot;foo&amp;quot;, &amp;quot;foo@foo.com&amp;quot;, &amp;quot;bar.&amp;quot;, &amp;quot;bar@bar.com&amp;quot; ],
    b = [ &amp;quot;bar@bar.com&amp;quot; ];    
    Test.assertSimilar( searchNames( a ), b,
      &amp;quot;not correct &amp;quot; + Test.inspect(a) + &amp;quot; given&amp;quot; );
  } );
} );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const searchNames = logins =&amp;gt; {
  return logins.filter(
        ( login, i, ary) =&amp;gt; i % 2 === 1 &amp;amp;&amp;amp; ary[i - 1].match(/^\.|\.$/);
    )
};
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kata: Function cache</title>
      <link>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Functions-Function-cache/</link>
      <pubDate>Sun, 14 Feb 2016 21:17:45 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Functions-Function-cache/</guid>
      <description>&lt;p&gt;If you are calculating complex things or execute time-consuming API calls, you sometimes want to cache the results. In this case we want you to create a function wrapper, which takes a function and caches its results depending on the arguments, that were applied to the function.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Usage example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const complexFunction = (arg1, arg2) =&amp;gt; { /* complex calculation in here */ };
const cachedFunction = cache(complexFunction);

cachedFunction(&#39;foo&#39;, &#39;bar&#39;); // complex function should be executed
cachedFunction(&#39;foo&#39;, &#39;bar&#39;); // complex function should not be invoked again, instead the cached result should be returned
cachedFunction(&#39;foo&#39;, &#39;baz&#39;); // should be executed, because the method wasn&#39;t invoked before with these arguments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const cache = fn =&amp;gt; {
  const calls = {};
  
  return function(...args) {
    if (!calls[args]) {
      calls[args] = fn(...args);
    }
    return calls[args];
  }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kata: All, None &amp; Any</title>
      <link>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Fundamentals-Arrays-All-None-Any/</link>
      <pubDate>Wed, 10 Feb 2016 20:58:59 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Fundamentals-Arrays-All-None-Any/</guid>
      <description>&lt;p&gt;As a part of this Kata, you need to create three functions that one needs to be able to call upon an array:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function returns true only if the predicate supplied returns true for all the items in the array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1, 2, 3].all(isGreaterThanZero) =&amp;gt; true
[-1, 0, 2].all(isGreaterThanZero) =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function returns true only if the predicate supplied returns false for all the items in the array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[-1, 2, 3].none(isLessThanZero) =&amp;gt; false
[-1, -2, -3].none(isGreaterThanZero) =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;any&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function returns true if at least one of the items in the array returns true for the predicate supplied&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[-1, 2, 3].any(isGreaterThanZero) =&amp;gt; true
[-1, -2, -3].any(isGreaterThanZero) =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You do not need to worry about the data supplied, it will be an array at all times.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function isGreaterThanZero (num) {
  return num &amp;gt; 0;
}

function isLessThanZero (num) {
  return num &amp;lt; 0;
}

Test.expect([1, 2, 3].all(isGreaterThanZero), &#39;All are greater than zero&#39;);
Test.expect(![-1, 0, 2].all(isLessThanZero), &#39;All is less than zero&#39;);

Test.expect(![1, 2, 3].none(isGreaterThanZero), &#39;None is greater than zero&#39;);
Test.expect([3, 0, 2].none(isLessThanZero), &#39;None is less than zero&#39;);

Test.expect([1, 2, 3].any(isGreaterThanZero), &#39;None is greater than zero&#39;);
Test.expect([-1, 0, 2].any(isLessThanZero), &#39;None is less than zero&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Array.prototype.all = function (p) {
 return this.filter(p).length === this.length;
};

Array.prototype.none = function (p) {
   return this.filter(p).length === 0;
};

Array.prototype.any = function (p) {
  return this.filter(p).length &amp;gt; 0;
};
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kata: Are they square?</title>
      <link>https://qetr1ck-op.github.io/blog/post/2016/01/Kata-Arrays-Are-they-square/</link>
      <pubDate>Sat, 09 Jan 2016 23:54:01 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2016/01/Kata-Arrays-Are-they-square/</guid>
      <description>&lt;p&gt;Write a function that checks whether all elements in an array are square numbers. The function should be able to take any number of array elements.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Your function should return true if all elements in the array are square numbers and false if not.&lt;/p&gt;

&lt;p&gt;An empty array should return undefined. You can assume that all array elements will be positive integers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// test
Test.describe(&amp;quot;isSquare&amp;quot;,function() {
    Test.it(&amp;quot;Basic tests&amp;quot;,function() {    
        Test.assertEquals(isSquare([1, 4, 9, 16, 25, 36]), true);
        Test.assertEquals(isSquare([1, 2, 3, 4, 5, 6]), false);
        Test.assertEquals(isSquare([]), undefined);
        Test.assertEquals(isSquare([1, 2, 4, 15]), false); 
    })
});

// implementation
var isSquare = function(arr){
  return arr.length ? arr.every(x =&amp;gt; Math.sqrt(x) % 1 === 0) : undefined;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kata: Reverse words</title>
      <link>https://qetr1ck-op.github.io/blog/post/2015/09/Kata-String-Reverse-words/</link>
      <pubDate>Sun, 13 Sep 2015 11:50:12 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2015/09/Kata-String-Reverse-words/</guid>
      <description>&lt;p&gt;Write a &lt;code&gt;reverseWords&lt;/code&gt; function that accepts a string a parameter, and reverses each word in the string. Every space should stay, so you cannot use words from Prelude.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const reverseWords = str =&amp;gt; {
  return str
    .split(&#39; &#39;)
    .map( word =&amp;gt; word.split(&#39;&#39;).reverse().join(&#39;&#39;) )
    .join(&#39; &#39;);
}

reverseWords(&amp;quot;This is an example!&amp;quot;); // &amp;quot;sihT si na !elpmaxe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Test.assertEquals(reverseWords(&amp;quot;This is an example!&amp;quot;), &amp;quot;sihT si na !elpmaxe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>