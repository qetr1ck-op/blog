<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on My New Hugo Site</title>
    <link>https://qetr1ck-op.github.io/blog/categories/react/index.xml</link>
    <description>Recent content in React on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://qetr1ck-op.github.io/blog/categories/react/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Understanding components approach and thinking in React</title>
      <link>https://qetr1ck-op.github.io/blog/post/Understanding-Components-approach-and-Thinking-in-React/</link>
      <pubDate>Fri, 05 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Understanding-Components-approach-and-Thinking-in-React/</guid>
      <description>&lt;p&gt;The parts of a web user interface building blocks for both simple websites and modern front-end applications.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;understanding-components&#34;&gt;Understanding Components&lt;/h1&gt;

&lt;p&gt;These parts are commonly referred to as UI components or UI widgets. The browser offers many native components and, when these are not enough, custom components like &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;http://www.telerik.com/kendo-ui&#34;&gt;Kendo UI&lt;/a&gt;, &lt;a href=&#34;http://semantic-ui.com/&#34;&gt;Semantic UI&lt;/a&gt;, &lt;a href=&#34;http://getuikit.com/&#34;&gt;UI Kit&lt;/a&gt; can be used.&lt;/p&gt;

&lt;p&gt;UI component is a region in a web page that contains an isolated UI feature that is distinct from everything around it. For example, an HTML &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element is considered a native HTML UI component.&lt;/p&gt;

&lt;p&gt;An HTML &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element can be placed into a web page and a developer gets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An isolated, reusable, and decoupled instance of a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; with no side effects;&lt;/li&gt;
&lt;li&gt;A default styled UI element that a user can interact with;&lt;/li&gt;
&lt;li&gt;Configuration that affects the state via properties that are passed declaratively to the component by way of HTML attributes, text, and child components (i.e. &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;) that can contain attributes and text as well;&lt;/li&gt;
&lt;li&gt;An API to imperatively program the component, affecting state, via the DOM and JavaScript (i.e. DOM events and methods).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The main primitive (speaking about React, Angular &amp;amp; Ember) is this idea of a &lt;strong&gt;component&lt;/strong&gt;. I think everyone has some notion of what a component is. The idea is that it should be an atomic UI piece that is &lt;strong&gt;composable&lt;/strong&gt; and &lt;strong&gt;reusable&lt;/strong&gt;, and should work with other pieces.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;We’re not designing pages, we’re designing systems of components&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;thinking-in-react&#34;&gt;Thinking in React&lt;/h1&gt;

&lt;p&gt;One of the many great parts of React is how it makes you think about apps as you build them. I&amp;rsquo;ll walk through the process of building a searchable product data table using React.&lt;/p&gt;

&lt;h2 id=&#34;start-with-a-mock&#34;&gt;Start with a mock&lt;/h2&gt;

&lt;p&gt;Imagine that we already have a JSON API which returns some data that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[
  {category: &amp;quot;Sporting Goods&amp;quot;, price: &amp;quot;$49.99&amp;quot;, stocked: true, name: &amp;quot;Football&amp;quot;},
  {category: &amp;quot;Sporting Goods&amp;quot;, price: &amp;quot;$9.99&amp;quot;, stocked: true, name: &amp;quot;Baseball&amp;quot;},
  {category: &amp;quot;Sporting Goods&amp;quot;, price: &amp;quot;$29.99&amp;quot;, stocked: false, name: &amp;quot;Basketball&amp;quot;},
  {category: &amp;quot;Electronics&amp;quot;, price: &amp;quot;$99.99&amp;quot;, stocked: true, name: &amp;quot;iPod Touch&amp;quot;},
  {category: &amp;quot;Electronics&amp;quot;, price: &amp;quot;$399.99&amp;quot;, stocked: false, name: &amp;quot;iPhone 5&amp;quot;},
  {category: &amp;quot;Electronics&amp;quot;, price: &amp;quot;$199.99&amp;quot;, stocked: true, name: &amp;quot;Nexus 7&amp;quot;}
];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-1-break-the-ui-into-a-component-hierarchy&#34;&gt;Step 1: break the UI into a component hierarchy&lt;/h2&gt;

&lt;p&gt;The first thing you&amp;rsquo;ll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names.&lt;/p&gt;

&lt;p&gt;But how do you know what should be its own component?&lt;/p&gt;

&lt;p&gt;Just use the same techniques for deciding if you should create a new function or object. One such technique is the single &lt;strong&gt;responsibility principle&lt;/strong&gt;, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.&lt;/p&gt;

&lt;p&gt;Components that appear within another component in the mock should appear as a child in the hierarchy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;- FilterableProductTable
    - SearchBar
    - ProductTable
        - ProductCategoryRow
        - ProductRow
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step-2-build-a-static-version-in-react&#34;&gt;Step 2: Build a static version in React&lt;/h2&gt;

&lt;script async src=&#34;//jsfiddle.net/qetr1ck/voyqdw3f/embed/js,html,css,result/dark/&#34;&gt;&lt;/script&gt;

&lt;p&gt;To build a static version of your app that renders your data model, you&amp;rsquo;ll want to build components that reuse other components and pass data using &lt;code&gt;props&lt;/code&gt;. &lt;code&gt;props&lt;/code&gt; are a way of passing data from parent to child.&lt;/p&gt;

&lt;p&gt;State is reserved only for &lt;strong&gt;interactivity&lt;/strong&gt;, that is, data that changes over time. Since this is a static version of the app, you don&amp;rsquo;t need it here.&lt;/p&gt;

&lt;h2 id=&#34;step-3-identify-the-minimal-representation-of-ui-state&#34;&gt;Step 3: Identify the minimal representation of UI state&lt;/h2&gt;

&lt;p&gt;To make your UI interactive, you need to be able to trigger changes to your underlying data model. React makes this easy with &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Think of all of the pieces of data in our example application. We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The original list of products&lt;/li&gt;
&lt;li&gt;The search text the user has entered&lt;/li&gt;
&lt;li&gt;The value of the checkbox&lt;/li&gt;
&lt;li&gt;The filtered list of products&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s go through each one and figure out which one is &lt;code&gt;state&lt;/code&gt;. Simply ask three questions about each piece of data:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is it passed in from a parent via &lt;code&gt;props&lt;/code&gt;? If so, it probably isn&amp;rsquo;t state.&lt;/li&gt;
&lt;li&gt;Does it change over time? If not, it probably isn&amp;rsquo;t &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Can you compute it based on any other state or props in your component? If so, it&amp;rsquo;s not &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So finally, our state is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The search text the user has entered&lt;/li&gt;
&lt;li&gt;The value of the checkbox&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;step-4-identify-where-your-state-should-live&#34;&gt;Step 4: Identify where your state should live&lt;/h2&gt;

&lt;p&gt;This is often the most challenging part for newcomers to understand, so follow these steps to figure it out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identify every component that renders something based on that &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Find a common owner component (a single component above all the components that need the &lt;code&gt;state&lt;/code&gt; in the hierarchy).&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t find a component where it makes sense to own the &lt;code&gt;state&lt;/code&gt;, create a new component simply for holding the &lt;code&gt;state&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s run through this strategy for our application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ProductTable needs to filter the product list based on state and SearchBar needs to display the search text and checked state.&lt;/li&gt;
&lt;li&gt;The common owner component is FilterableProductTable.&lt;/li&gt;
&lt;li&gt;It conceptually makes sense for the filter text and checked value to live in FilterableProductTable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ve decided that our state lives in &lt;code&gt;FilterableProductTable&lt;/code&gt;. First, add a &lt;code&gt;getInitialState()&lt;/code&gt; method to &lt;code&gt;FilterableProductTable&lt;/code&gt; that returns &lt;code&gt;{filterText: &#39;&#39;, inStockOnly: false}&lt;/code&gt; to reflect the initial &lt;code&gt;state&lt;/code&gt; of your application.&lt;/p&gt;

&lt;p&gt;Then, pass &lt;code&gt;filterText&lt;/code&gt; and &lt;code&gt;inStockOnly&lt;/code&gt; to &lt;code&gt;ProductTable&lt;/code&gt; and &lt;code&gt;SearchBar&lt;/code&gt; as a &lt;code&gt;prop&lt;/code&gt;. Finally, use these &lt;code&gt;props&lt;/code&gt; to filter the rows in &lt;code&gt;ProductTable&lt;/code&gt; and set the values of the form fields in &lt;code&gt;SearchBar&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;step-5-add-inverse-data-flow&#34;&gt;Step 5: Add inverse data flow&lt;/h2&gt;

&lt;p&gt;Now it&amp;rsquo;s time to support data flowing the other way: the form components deep in the hierarchy need to update the &lt;code&gt;state&lt;/code&gt; in &lt;code&gt;FilterableProductTable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you try to type or check the box in the previous version of the example, you&amp;rsquo;ll see that React &lt;strong&gt;ignores&lt;/strong&gt; your input. This is intentional, as we&amp;rsquo;ve set the value &lt;code&gt;prop&lt;/code&gt; of the input to always be equal to the &lt;code&gt;state&lt;/code&gt; passed in from &lt;code&gt;FilterableProductTable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since components should only update their own state, &lt;code&gt;FilterableProductTable&lt;/code&gt; will pass a callback to &lt;code&gt;SearchBar&lt;/code&gt; that will fire whenever the state should be updated. We can use the &lt;code&gt;onChange&lt;/code&gt; event on the inputs to be notified of it. And the callback passed by &lt;code&gt;FilterableProductTable&lt;/code&gt; will call &lt;code&gt;setState()&lt;/code&gt;, and the app will be updated.&lt;/p&gt;

&lt;script async src=&#34;//jsfiddle.net/qetr1ck/voyqdw3f/3/embed/js,html,result/dark/&#34;&gt;&lt;/script&gt;</description>
    </item>
    
  </channel>
</rss>