<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Build Tools on OP blog</title>
    <link>https://qetr1ck-op.github.io/blog/categories/build-tools/index.xml</link>
    <description>Recent content in Build Tools on OP blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://qetr1ck-op.github.io/blog/categories/build-tools/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Interview question: NodeJS, part 2</title>
      <link>https://qetr1ck-op.github.io/blog/post/interview-question-nodejs-part-2/</link>
      <pubDate>Sun, 28 May 2017 17:43:40 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/interview-question-nodejs-part-2/</guid>
      <description>&lt;p&gt;Part two of original post &lt;a href=&#34;https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8&#34;&gt;How well do you know Node.js?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-s-the-problem-with-the-process-uncaughtexception-event-how-is-it-different-than-the-exit-event&#34;&gt;What’s the problem with the process &lt;code&gt;uncaughtException&lt;/code&gt; event? How is it different than the exit event?&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;uncaughtException&lt;/code&gt; event is emitted when an uncaught Javascript exception bubbles all the way back to the event loop. Once this event emmits, it means that your application is in an undefined state and it is not safe to continue. Hence this event should only be used to perform synchronous cleanup of resources, logging and shutting down the process.&lt;/p&gt;

&lt;p&gt;The exit event is emitted when the Node.js process is about the exit as a result of either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;process.exit()&lt;/code&gt; method being called explicitly&lt;/li&gt;
&lt;li&gt;The event loop has no additional work to perform&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-does-the-mean-inside-of-node-s-repl&#34;&gt;What does the &lt;code&gt;_&lt;/code&gt;mean inside of Node’s REPL?&lt;/h1&gt;

&lt;p&gt;Node’s REPL always sets &lt;code&gt;_&lt;/code&gt; to the result of the last expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; 2
2
&amp;gt; _
2
&amp;gt; 2+2
4
&amp;gt; _
4
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;do-node-buffers-use-v8-memory-can-they-be-resized&#34;&gt;Do Node buffers use V8 memory? Can they be resized?&lt;/h1&gt;

&lt;p&gt;No to both questions - Node.js buffers correspond to fixed-sized, raw memory allocations outside the V8 heap.&lt;/p&gt;

&lt;h1 id=&#34;hat-s-the-difference-between-buffer-alloc-and-buffer-allocunsafe&#34;&gt;hat’s the difference between &lt;code&gt;Buffer.alloc&lt;/code&gt; and &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt;?&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Buffer.alloc&lt;/code&gt; allocates a memory chunk, initializes it (sets every cell to either zero or some predefined value) and returns a Node.js Buffer wrapping this memory chunk. &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt; skips the initialization stage. Instead it returns a Buffer pointing to uninitialized memory. This reduces the allocation time duration, but creates a possibility for (sensitive) data leakage, if this uninitialized memory is exposed to the user. Thus, you should only &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt; only if you plan to initialize the memory chunk yourself.&lt;/p&gt;

&lt;h1 id=&#34;how-is-the-slice-method-on-buffers-different-from-that-on-arrays&#34;&gt;How is the slice method on buffers different from that on arrays?&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;buf.slice()&lt;/code&gt; method on buffers is a mutating operation which modifies the memory in the original buffer. The &lt;code&gt;Array.prototype.slice()&lt;/code&gt; method returns a shallow copy of a portion of an array and does not modify it.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-string-decoder-module-useful-for-how-is-it-different-than-casting-buffers-to-strings&#34;&gt;What is the &lt;code&gt;string_decoder&lt;/code&gt; module useful for? How is it different than casting buffers to strings?&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;string_decoder&lt;/code&gt; is useful for decoding a Buffer instance into strings while preserving endoded multi-byte UTF-8 / UTF-16 characters. In oppose to simple buffer cast to string, the string_decodure can detect incomplete multibyte characters and handle them. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const StringDecoder = require(&#39;string_decoder&#39;).StringDecoder;
const decoder = new StringDecoder(&#39;utf8&#39;);

const euro = Buffer.from([0xE2, 0x82, 0xAC]);
const incompleteEuro = Buffer.from([0xE2, 0x82]);

console.log(decoder.write(euro)); // prints &#39;€&#39;
console.log(incompleteEuro.toString(&#39;utf8&#39;)); // prints &#39;��&#39;
console.log(decoder.write(incompleteEuro)); // prints &#39;&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;what-are-the-5-major-steps-that-the-require-function-does&#34;&gt;What are the 5 major steps that the require function does?&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Check Module._cache for the cached module&lt;/li&gt;
&lt;li&gt;If cache is empty, create a new Module instance and save it to the cache&lt;/li&gt;
&lt;li&gt;Call module.load() with the given filename. This will call module.compile() after reading the file contents&lt;/li&gt;
&lt;li&gt;If there was an error loading/parsing the file, delete the bad module from the cache&lt;/li&gt;
&lt;li&gt;return module.exports&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;what-is-the-require-resolve-function-and-what-is-it-useful-for&#34;&gt;What is the &lt;code&gt;require.resolve&lt;/code&gt; function and what is it useful for?&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;require.resolve&lt;/code&gt; methods resolves a module to its absolute path.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-main-property-in-package-json-useful-for&#34;&gt;What is the main property in &lt;code&gt;package.json&lt;/code&gt; useful for?&lt;/h1&gt;

&lt;p&gt;The main field is a module ID that is the primary entry point to your program. For example, if your package is named foo, and a user does &lt;code&gt;require(&amp;quot;foo&amp;quot;)&lt;/code&gt;, then your main module’s exports object will be returned.&lt;/p&gt;

&lt;h1 id=&#34;what-are-circular-modular-dependencies-in-node-and-how-can-they-be-avoided&#34;&gt;What are circular modular dependencies in Node and how can they be avoided?&lt;/h1&gt;

&lt;p&gt;We say that module &lt;code&gt;A&lt;/code&gt; dependends on module &lt;code&gt;B&lt;/code&gt; if &lt;code&gt;A&lt;/code&gt; has &lt;code&gt;require(&#39;B&#39;)&lt;/code&gt; in it. Assume a dependency graph where an edge &lt;code&gt;(A,B)&lt;/code&gt; means that &lt;code&gt;A&lt;/code&gt; dependens on &lt;code&gt;B&lt;/code&gt;. Then Circular modular dependencies are cycles in this dependency graph. Two ways to avoid circular modular are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;move the require statements from the top of the file to the point in code they’re actually used. this will delay their execution, allowing for the exports to have been created properly&lt;/li&gt;
&lt;li&gt;restructure the code. For example move the code that both modules depend on into a new module &lt;code&gt;C&lt;/code&gt; and let both &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; depend on &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-are-the-3-file-extensions-that-will-be-automatically-tried-by-the-require-function&#34;&gt;What are the 3 file extensions that will be automatically tried by the require function?&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt; and &lt;code&gt;.node&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;when-creating-an-http-server-and-writing-a-response-for-a-request-why-is-the-end-function-required&#34;&gt;When creating an http server and writing a response for a request, why is the &lt;code&gt;end()&lt;/code&gt; function required?&lt;/h1&gt;

&lt;p&gt;Since the res object is a stream, we can write into it in several stages. the &lt;code&gt;end()&lt;/code&gt; method indicates that we’ve finished writing into it and that the response is ready to be sent to the client.&lt;/p&gt;

&lt;h1 id=&#34;when-is-it-ok-to-use-the-file-system-sync-methods&#34;&gt;When is it ok to use the file system *Sync methods?&lt;/h1&gt;

&lt;p&gt;When it is OK to block the process while the synchronous operation takes place. For example, this may be valid when writing a CLI tool. It’s most likely not OK when writing a server that should handle multiple clients concurrently.&lt;/p&gt;

&lt;h1 id=&#34;how-can-you-print-only-one-level-of-a-deeply-nested-object&#34;&gt;How can you print only one level of a deeply nested object?&lt;/h1&gt;

&lt;p&gt;You can use the util.inspect method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const obj = {
  a: &amp;quot;a&amp;quot;,
  b: {
    c: &amp;quot;c&amp;quot;,
    d: {
      e: &amp;quot;e&amp;quot;,
      f: {
        g: &amp;quot;g&amp;quot;,
      }
    }
  }
};    

const util = require(&#39;util&#39;);
console.log(util.inspect(obj, {depth: 0})); // prints: &#39;{ a: \&#39;a\&#39;, b: [Object]}&#39;
console.log(util.inspect(obj, {depth: null})); // prints: &#39;{ a: \&#39;a\&#39;, b: { c: \&#39;c\&#39;, d: { e: \&#39;e\&#39;, f: { g: \&#39;g\&#39; } } } }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-objects-exports-require-and-module-are-all-globally-available-in-every-module-but-they-are-different-in-every-module-how&#34;&gt;The objects exports, require, and module are all globally available in every module but they are different in every module. How?&lt;/h1&gt;

&lt;p&gt;Before a module’s code is executed, Node.js wraps it in the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function (exports, require, module, __filename, __dirname) {
// Your module code actually lives in here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that while &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; appear to be global variables, they’re actually specific to the module.&lt;/p&gt;

&lt;h1 id=&#34;if-you-execute-a-node-script-file-that-has-the-single-line-console-log-arguments-what-exactly-will-node-print&#34;&gt;If you execute a node script file that has the single line: &lt;code&gt;console.log(arguments);&lt;/code&gt;, what exactly will node print?&lt;/h1&gt;

&lt;p&gt;As seen in the answer above, the module code is an invocation of a function taking exports, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt; and &lt;code&gt;__dirname&lt;/code&gt; as arguments, so these arguments will be printed.&lt;/p&gt;

&lt;h1 id=&#34;how-can-a-module-be-both-requirable-by-other-modules-and-executable-directly-using-the-node-command&#34;&gt;How can a module be both requirable by other modules and executable directly using the node command?&lt;/h1&gt;

&lt;p&gt;A module can detect if its being requirable or executed directly by inspecting the &lt;code&gt;require.main&lt;/code&gt; value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (require.main === module) {
    console.log(&#39;called directly&#39;);
} else {
    console.log(&#39;required as a module&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;what-s-an-example-of-a-built-in-stream-in-node-that-is-both-readable-and-writable&#34;&gt;What’s an example of a built-in stream in Node that is both readable and writable?&lt;/h1&gt;

&lt;p&gt;Duplex streams are streams that implement both the Readable and Writable interfaces. Examples of Duplex streams include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TCP sockets&lt;/li&gt;
&lt;li&gt;zlib streams&lt;/li&gt;
&lt;li&gt;crypto streams&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;the-require-function-always-caches-the-module-it-requires-what-can-you-do-if-you-need-to-execute-the-code-in-a-required-module-many-times&#34;&gt;The &lt;code&gt;require&lt;/code&gt; function always caches the module it requires. What can you do if you need to execute the code in a required module many times?&lt;/h1&gt;

&lt;p&gt;The cache in which modules are cached in is accessible using &lt;code&gt;require.cache&lt;/code&gt;. Thus, if you delete a module key from require.cache, the next time you require it will reload it (and will execute the code in it again).&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-console-time-function-useful-for&#34;&gt;What is the &lt;code&gt;console.time&lt;/code&gt; function useful for?&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.time&lt;/code&gt; is useful to measure the time difference between two points in the code; calling &lt;code&gt;console.time&lt;/code&gt;(&amp;lsquo;label&amp;rsquo;) will record the current time, and later calling &lt;code&gt;console.timeEnd(&#39;label&#39;&lt;/code&gt;) will display the time difference up to this point (in milliseconds), alongside the label.&lt;/p&gt;

&lt;h1 id=&#34;what-s-the-difference-between-the-paused-and-the-flowing-modes-of-readable-streams&#34;&gt;What’s the difference between the paused and the flowing modes of readable streams?&lt;/h1&gt;

&lt;p&gt;Readable streams operate in either paused or flowing modes. When in flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the EventEmitter interface. In paused mode, the &lt;code&gt;stream.read()&lt;/code&gt; method must be called explicitly to read chunks of data from the stream.&lt;/p&gt;

&lt;h1 id=&#34;what-does-the-inspect-argument-do-for-the-node-command&#34;&gt;What does the &lt;code&gt;--inspect&lt;/code&gt; argument do for the node command?&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;--inspect&lt;/code&gt; argument allows to attache Chrome DevTools to Node.js instances for debugging and profiling.&lt;/p&gt;

&lt;h1 id=&#34;when-working-with-streams-when-do-you-use-the-pipe-function-and-when-do-you-use-events-can-those-two-methods-be-combined&#34;&gt;When working with streams, when do you use the pipe function and when do you use events? Can those two methods be combined?&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;.pipe()&lt;/code&gt; is a function that takes a readable source stream src and hooks the output to a destination writable stream dst&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;src.pipe(dst)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;essentially it means that &lt;code&gt;.pipe()&lt;/code&gt; takes care of listening for data and end events from src. So, to answer the questions, using &lt;code&gt;.pipe()&lt;/code&gt; can make the code more straight forward when this is the functionally you’re interested in. Events can be used to tailor more specific functionally for your use case.&lt;/p&gt;

&lt;h1 id=&#34;save-my-day&#34;&gt;Save my day&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8&#34;&gt;original questions by Samer Buna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://asafdav2.github.io/2017/how-well-do-you-know-node-js-answers-part-2/&#34;&gt;original post by asafdav2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Interview question: NodeJS, part 1</title>
      <link>https://qetr1ck-op.github.io/blog/post/interview-question-nodejs-part-1/</link>
      <pubDate>Sun, 14 May 2017 17:43:40 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/interview-question-nodejs-part-1/</guid>
      <description>&lt;p&gt;Based on original post &lt;a href=&#34;https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8&#34;&gt;How well do you know Node.js?&lt;/a&gt;. In it, Samer Buna lists 48 questions which be expects a Node.js developer to be able to answer.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-relationship-between-node-js-and-v8-can-node-work-without-v8&#34;&gt;What is the relationship between Node.js and V8? Can Node work without V8?&lt;/h1&gt;

&lt;p&gt;V8 is a JavaScript engine developed by The Chromium Project, first for the Google Chrome web browser and later for other projects, including NodeJS. It allows to compile, optimize and run JavaScript code and is the base for code execution inside Node.js. However, V8 is not essential for Node.js; There are attempts to use other javascript engines, such as &lt;a href=&#34;https://github.com/nodejs/node-chakracore&#34;&gt;node-chakracore&lt;/a&gt; (Node.js on ChakraCore) or &lt;a href=&#34;https://github.com/mozilla/spidernode&#34;&gt;spidernode&lt;/a&gt; (Node.js on top of SpiderMonkey).&lt;/p&gt;

&lt;h1 id=&#34;how-come-when-you-declare-a-global-variable-in-any-node-js-file-it-s-not-really-global-to-all-modules&#34;&gt;How come when you declare a global variable in any Node.js file it’s not really global to all modules?&lt;/h1&gt;

&lt;p&gt;A module’s code is wrapped by a function wrapper. To see it just execute node.js file with syntax error on first line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;gt; node 1/bugToSeeWrapperFn.js
&amp;gt; /home/oop/Documents/bugToSeeWrapperFn.js:1

(function (exports, require, module, __filename, __dirname) { foo
  // module code
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wrapping allows to keeps top-level variables (defined with var, const or let) scoped to the module, rather than to the global object.&lt;/p&gt;

&lt;p&gt;Read more on the &lt;a href=&#34;https://nodejs.org/api/modules.html#modules_the_module_wrapper&#34;&gt;module wrapper&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;when-exporting-the-api-of-a-node-module-why-can-we-sometimes-use-exports-and-other-times-we-have-to-use-module-exports&#34;&gt;When exporting the API of a Node module, why can we sometimes use &lt;code&gt;exports&lt;/code&gt; and other times we have to use &lt;code&gt;module.exports?&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;To understand the difference, we can look at this simplified view of a JavaScript file in Node.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var module = { exports: {} };
var exports = module.exports;

// your code

return module.exports;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, &lt;code&gt;exports&lt;/code&gt; is initially a reference to &lt;code&gt;module.exports&lt;/code&gt;. if you want to simply export an object with named fields, you can use the exports shortcut. For example, had we written &lt;code&gt;exports.a = 9&lt;/code&gt;, we’d actually export this object: &lt;code&gt;{ a: 9 }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, if you want to export a function or another object, you have to use the &lt;code&gt;module.exports&lt;/code&gt; but you cannot use &lt;code&gt;exports&lt;/code&gt;. For example: &lt;code&gt;module.exports = function bar() {}&lt;/code&gt;. Once you do that, &lt;code&gt;exports&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; no longer reference the same object.&lt;/p&gt;

&lt;h1 id=&#34;can-we-require-local-files-without-using-relative-paths&#34;&gt;Can we require local files without using relative paths?&lt;/h1&gt;

&lt;p&gt;There are several options, as described &lt;a href=&#34;https://gist.github.com/qetr1ck-op/ba2c8ad84ae8cd3ce6c928872eaa6933&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;can-different-versions-of-the-same-package-be-used-in-the-same-application&#34;&gt;Can different versions of the same package be used in the same application?&lt;/h1&gt;

&lt;p&gt;No, this is currently prevented by NPM. see this issue for &lt;a href=&#34;https://github.com/npm/npm/issues/2943#issuecomment-10388316&#34;&gt;more details&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-event-loop-is-it-part-of-v8&#34;&gt;What is the Event Loop? Is it part of V8?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../../images/posts/nodejs-interview-question/nodejs-arhitecture.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In event-driven programming, an application expresses interest in certain events and respond to them when they occur. This is the way Node.js can handle asynchronous execution while running the code in a single thread.&lt;/p&gt;

&lt;p&gt;When an asynchronous operation starts (for example, when we call &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;http.get&lt;/code&gt; or &lt;code&gt;fs.readFile&lt;/code&gt;), Node.js sends these operations to a different thread allowing &lt;code&gt;V8&lt;/code&gt; to keep executing our code. Node also calls the callback when the counter has run down or the &lt;code&gt;IO / http&lt;/code&gt; operation has finished.&lt;/p&gt;

&lt;p&gt;In Node.js, the responsibility of gathering events from the operating system or monitoring other sources of events is handled by &lt;code&gt;libuv&lt;/code&gt;, and the user can register callbacks to be invoked when an event occurs. When async operation is done &lt;code&gt;libuv&lt;/code&gt; passes control to &lt;code&gt;V8&lt;/code&gt; to execute the callbacks.&lt;/p&gt;

&lt;h1 id=&#34;what-is-libuv-and-how-does-node-js-use-it-is-it-part-of-v8&#34;&gt;What is libuv and how does Node.js use it? Is it part of V8?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;libuv&lt;/a&gt; is a multi-platform support library with a focus on asynchronous I/O. Its core job is to provide an event loop and callback based notifications of I/O and other activities. In addition, libuv offers core utilities such as timers, non-blocking networking support, asynchronous file system access, child processes and more.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-call-stack-is-it-part-of-v8&#34;&gt;What is the Call Stack? Is it part of V8?&lt;/h1&gt;

&lt;p&gt;The call stack is the basic mechanism for javascript code execution. When we call a function, we push the function parameters and the return address to the stack. This allows to runtime to know where to continue code execution once the function ends. In Node.js, the Call Stack is handled by &lt;code&gt;V8&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-is-the-difference-between-setimmediate-and-process-nexttick&#34;&gt;What is the difference between setImmediate and process.nextTick?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setImmediate&lt;/code&gt; queues a function behind whatever I/O event callbacks that are already in the event queue.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.nextTick&lt;/code&gt; queues a function at the head of the event queue so that it executes immediately after the currently running function completes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; vs &lt;code&gt;setImmediate&lt;/code&gt; vs &lt;code&gt;process.nextTick&lt;/code&gt;, &lt;a href=&#34;http://stackoverflow.com/questions/17502948/nexttick-vs-setimmediate-visual-explanation#38742776&#34;&gt;visual explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setImmediate&lt;/code&gt; executes after &lt;code&gt;setTimeout&lt;/code&gt;, &lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/issues/25788&#34;&gt;explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-do-you-make-an-asynchronous-function-return-a-value&#34;&gt;How do you make an asynchronous function return a value?&lt;/h1&gt;

&lt;p&gt;You could return a promise resolving to that value, for example return &lt;code&gt;Promise.resolve(value)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;can-callbacks-be-used-with-promises-or-is-it-one-way-or-the-other&#34;&gt;Can callbacks be used with promises or is it one way or the other?&lt;/h1&gt;

&lt;p&gt;Callbacks and promises can be used together. For example, the following method calls a callback and returns a promise:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function processToGetValue(cb) {
  // do some processing to value
  if (cb) {
    cb(value);
  }
  return Promise.resolve(value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;what-are-the-major-differences-between-spawn-exec-and-fork&#34;&gt;What are the major differences between spawn, exec, and fork?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt; methods spawns a shell and then executes a command within that shell, buffering any generated output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn&lt;/code&gt; works similarly to &lt;code&gt;exec&lt;/code&gt;. The main difference is that spawn returns the process output as a stream while exec returns it as a buffer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork&lt;/code&gt; is a special case of spawn that also creates a new &lt;code&gt;V8&lt;/code&gt; engine instance. This is useful to create additional workers of the same Node.js code base. (for example, in the &lt;a href=&#34;https://nodejs.org/api/cluster.html&#34;&gt;cluster module&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great article &lt;a href=&#34;https://dzone.com/articles/understanding-execfile-spawn-exec-and-fork-in-node&#34;&gt;Understanding execFile, spawn, exec, and fork in Node.js&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;how-does-the-cluster-module-work-how-is-it-different-than-using-a-load-balancer&#34;&gt;How does the cluster module work? How is it different than using a load balancer?&lt;/h1&gt;

&lt;p&gt;The cluster module works by forking the server into several worker processes (all run inside the &lt;strong&gt;same host&lt;/strong&gt;). The master process listens and accepts new connections and distributes them across the worker processes in a &lt;code&gt;round-robin&lt;/code&gt; fashionhug (with some built-in smarts to avoid overloading a worker process).&lt;/p&gt;

&lt;p&gt;A load balancer, in contrast, is used to distribute incoming connections across &lt;strong&gt;multiple hosts&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-is-load-balancing&#34;&gt;What is load balancing?&lt;/h1&gt;

&lt;p&gt;Detailed answer &lt;a href=&#34;../../post/what-is-load-balancing/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-are-the-harmony-flags&#34;&gt;What are the &lt;code&gt;--harmony-*&lt;/code&gt; flags?&lt;/h1&gt;

&lt;p&gt;These are flags that one can pass to the Node.js runtime to enable Staged features. Staged features are almost-completed features that are not considered stable by the V8 team.&lt;/p&gt;

&lt;h1 id=&#34;how-can-you-read-and-inspect-the-memory-usage-of-a-node-js-process&#34;&gt;How can you read and inspect the memory usage of a Node.js process?&lt;/h1&gt;

&lt;p&gt;You can invoke the &lt;code&gt;process.memoryUsage()&lt;/code&gt; method which returns an object describing the memory usage of the Node.js process, measured in bytes.&lt;/p&gt;

&lt;h1 id=&#34;what-is-process-argv-what-type-of-data-does-it-hold&#34;&gt;What is &lt;code&gt;process.argv&lt;/code&gt;? What type of data does it hold?&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;process.argv&lt;/code&gt; property returns an array containing the command line arguments passed when the Node.js process was launched. The first element will be &lt;code&gt;process.execPath&lt;/code&gt;. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command line arguments.&lt;/p&gt;

&lt;h1 id=&#34;how-can-we-do-one-final-operation-before-a-node-process-exits-can-that-operation-be-done-asynchronously&#34;&gt;How can we do one final operation before a Node process exits? Can that operation be done asynchronously?&lt;/h1&gt;

&lt;p&gt;By registering a handler for &lt;code&gt;process.on(&#39;exit&#39;)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function exitHandler(options, err) {
    console.log(&#39;clean&#39;);
}

process.on(&#39;exit&#39;, exitHandler.bind(null));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listener functions to the exit event must only perform synchronous operations. To perform asynchronous operations, one can register a handler for &lt;code&gt;process.on(&#39;beforeExit&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-are-some-of-the-built-in-dot-commands-you-can-use-in-node-s-repl&#34;&gt;What are some of the built-in dot commands you can use in Node’s REPL?&lt;/h1&gt;

&lt;p&gt;The following dot commands can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.break&lt;/code&gt; - When in the process of inputting a multi-line expression, entering the .break command (or pressing the &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; key combination) will abort further input or processing of that expression.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.clear&lt;/code&gt; - Resets the REPL ‘context’ to an empty object and clears any multi-line expression currently being input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.exit&lt;/code&gt; - Close the I/O stream, causing the REPL to exit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.help&lt;/code&gt; - Show this list of special commands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.save&lt;/code&gt; - Save the current REPL session to a file: &lt;code&gt;&amp;gt; .save ./file/to/save.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.load&lt;/code&gt; - Load a file into the current REPL session. &lt;code&gt;&amp;gt; .load ./file/to/load.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.editor&lt;/code&gt; - Enter editor mode (&lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to finish, &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; to cancel)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;besides-v8-and-libuv-what-other-external-dependencies-does-node-have&#34;&gt;Besides V8 and libuv, what other external dependencies does Node have?&lt;/h1&gt;

&lt;p&gt;Beside V8 and libuv, node has several other dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http-parser: a lightweight C library which handles HTTP parsing&lt;/li&gt;
&lt;li&gt;c-areas: used for some asynchronous DNS requests&lt;/li&gt;
&lt;li&gt;OpenSSL: used extensively in both the tls and crypto modules&lt;/li&gt;
&lt;li&gt;zlib: used for fast compression and decompression&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more about &lt;a href=&#34;https://nodejs.org/en/docs/meta/topics/dependencies/&#34;&gt;node dependencies&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;save-my-day&#34;&gt;Save my day&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://edgecoders.com/how-well-do-you-know-node-js-36b1473c01c8&#34;&gt;original questions by Samer Buna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://asafdav2.github.io/2017/how-well-do-you-know-node-js-answers-part-1/&#34;&gt;original post by asafdav2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>npm scrips as your build tool</title>
      <link>https://qetr1ck-op.github.io/blog/post/npm-scrips-as-your-build-tool/</link>
      <pubDate>Sat, 29 Apr 2017 12:14:14 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/npm-scrips-as-your-build-tool/</guid>
      <description>&lt;p&gt;The course introduces the topic of using npm scripts as a build tool. It starts simple and then continue to build a small website as we introduce new topics.&lt;/p&gt;

&lt;p&gt;By the end of the course, you&amp;rsquo;ll know how to get started and what tools and techniques are needed for you to create your own set of build scripts.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;topics&#34;&gt;Topics:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create a basic &lt;code&gt;package.json&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Run the basic npm scripts&lt;/li&gt;
&lt;li&gt;Create a custom npm script&lt;/li&gt;
&lt;li&gt;Run npm scripts in &lt;code&gt;series&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run npm scripts in &lt;code&gt;parallel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use a shorthand syntax for running multiple npm scripts with &lt;code&gt;npm-run-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run a set of similar npm scripts with a &lt;code&gt;wildcard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; npm script lifecycle hooks with test coverage&lt;/li&gt;
&lt;li&gt;Pass arguments to npm scripts via &lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pipe data from one npm script to another with build-site scripts&lt;/li&gt;
&lt;li&gt;Run npm scripts when files change with &lt;code&gt;onchange&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use package.json &lt;code&gt;variables&lt;/code&gt; in npm scripts&lt;/li&gt;
&lt;li&gt;Use custom config settings in your npm scripts&lt;/li&gt;
&lt;li&gt;Run npm scripts with git hooks using &lt;code&gt;husky&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the level of console output when running npm scripts&lt;/li&gt;
&lt;li&gt;Make npm scripts cross-environment friendly with &lt;code&gt;cross-env&lt;/code&gt;, &lt;code&gt;rimraf&lt;/code&gt;, &lt;code&gt;opn-cli&lt;/code&gt;, &lt;code&gt;cross-var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List available npm scripts and support tab completion with &lt;code&gt;ntl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add comments to your npm scripts&lt;/li&gt;
&lt;li&gt;Pull out npm scripts into another file with &lt;code&gt;p-s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;bash script&lt;/code&gt; to replace a complex npm script&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;node script&lt;/code&gt; to replace a complex npm script&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://egghead.io/courses/how-to-use-npm-scripts-as-your-build-tool&#34;&gt;egghead course - How to Use npm Scripts as Your Build Tool&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>