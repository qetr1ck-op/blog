<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regexp on OP blog</title>
    <link>https://qetr1ck-op.github.io/blog/categories/regexp/index.xml</link>
    <description>Recent content in Regexp on OP blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://qetr1ck-op.github.io/blog/categories/regexp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kata: Salesman&#39;s Travel</title>
      <link>https://qetr1ck-op.github.io/blog/post/2017/04/kata-salesmans-travel/</link>
      <pubDate>Sat, 29 Apr 2017 23:56:58 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2017/04/kata-salesmans-travel/</guid>
      <description>&lt;p&gt;A traveling salesman has to visit clients. He got each client&amp;rsquo;s address e.g. &amp;ldquo;432 Main Long Road St. Louisville OH 43071&amp;rdquo; as a list.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The basic zipcode format usually consists of two capital letters followed by a white space and five digits. The list of clients to visit was given as a string of all addresses, each separated from the others by a comma, e.g. :&lt;/p&gt;

&lt;p&gt;&amp;ldquo;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;To ease his travel he wants to group the list by zipcode.&lt;/p&gt;

&lt;h1 id=&#34;task&#34;&gt;Task&lt;/h1&gt;

&lt;p&gt;The function travel will take two parameters r (list of all clients&amp;rsquo; addresses) and zipcode and returns a string in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;zipcode:street and town,street and town,.../house number,house number,...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The street numbers must be in the same order as the streets where they belong.&lt;/p&gt;

&lt;p&gt;If a given zipcode doesn&amp;rsquo;t exist in the list of clients&amp;rsquo; addresses return &amp;ldquo;zipcode:/&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;r = &amp;quot;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&amp;quot;

travel(r, &amp;quot;OH 43071&amp;quot;) --&amp;gt; &amp;quot;OH 43071:Main Street St. Louisville,Main Long Road St. Louisville/123,432&amp;quot;

travel(r, &amp;quot;NY 56432&amp;quot;) --&amp;gt; &amp;quot;NY 56432:High Street Pollocksville/786&amp;quot;

travel(r, &amp;quot;NY 5643&amp;quot;) --&amp;gt; &amp;quot;NY 5643:/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;spec&#34;&gt;Spec&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Test.describe(&amp;quot;travel&amp;quot;,function() {
    Test.it(&amp;quot;Basic tests&amp;quot;,function() {    
        testing(travel(ad, &amp;quot;AA 45522&amp;quot;), &amp;quot;AA 45522:Paris St. Abbeville,Paris St. Abbeville/67,670&amp;quot;)
        testing(travel(ad, &amp;quot;EX 34342&amp;quot;), &amp;quot;EX 34342:Pussy Cat Rd. Chicago,Pussy Cat Rd. Chicago/10,100&amp;quot;)
        testing(travel(ad, &amp;quot;EX 34345&amp;quot;), &amp;quot;EX 34345:Pussy Cat Rd. Chicago/100&amp;quot;)
        testing(travel(ad, &amp;quot;AA 45521&amp;quot;), &amp;quot;AA 45521:Paris bd. Abbeville,Paris St. Abbeville/674,67&amp;quot;)
        testing(travel(ad, &amp;quot;AE 56215&amp;quot;), &amp;quot;AE 56215:Main Al. Bern/320&amp;quot;)
    })
})

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function travel(r, zipcode) {
    const re = /(\d{1,4}) (.*?) (\w{2} \d{4,5}),?/gi
    const res = {
      prefix: zipcode + &#39;:&#39;,
      addr: [],
      nb: [],
    }
    while(arr = re.exec(r)){
      const [_ , nb, addr, zip] = arr
      if(zip != zipcode)
        continue
      res.addr.push(addr)
      res.nb.push(nb)
    }
    return res.prefix + res.addr.join(&#39;,&#39;) + &#39;/&#39; + res.nb.join(&#39;,&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codewars.com/kata/salesmans-travel&#34;&gt;kata: salesmans-travel&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kata: Filter through name/email</title>
      <link>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Array-RegExp-Filter-through-name-email/</link>
      <pubDate>Mon, 15 Feb 2016 22:34:45 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/2016/02/Kata-Array-RegExp-Filter-through-name-email/</guid>
      <description>&lt;p&gt;He has troubles with users ending or starting in a &lt;code&gt;.&lt;/code&gt;, and his user-array is a flat array of user-email-pairs, like so:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ &amp;quot;foo&amp;quot;, &amp;quot;foo@bar.com&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;bar@foo.com&amp;quot;, &amp;quot;.foo&amp;quot;, &amp;quot;food@bar.com&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He is only interested in e-mailing the users and ask them to sign up again, so no need to keep the user-name, only e-mail addresses for the user-names that start or end with a &lt;code&gt;.&lt;/code&gt; should be returned. For the above array, the correct return-array would be &lt;code&gt;[ &amp;quot;food@bar.com&amp;quot; ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe( &amp;quot;Testing a list&amp;quot;, function(){
  it( &amp;quot;Basic list&amp;quot;, function(){
    var a = [ &amp;quot;foo&amp;quot;, &amp;quot;foo@foo.com&amp;quot;, &amp;quot;bar.&amp;quot;, &amp;quot;bar@bar.com&amp;quot; ],
    b = [ &amp;quot;bar@bar.com&amp;quot; ];    
    Test.assertSimilar( searchNames( a ), b,
      &amp;quot;not correct &amp;quot; + Test.inspect(a) + &amp;quot; given&amp;quot; );
  } );
} );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const searchNames = logins =&amp;gt; {
  return logins.filter(
        ( login, i, ary) =&amp;gt; i % 2 === 1 &amp;amp;&amp;amp; ary[i - 1].match(/^\.|\.$/);
    )
};
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>