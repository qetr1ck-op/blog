<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on OP blog</title>
    <link>https://qetr1ck-op.github.io/blog/categories/css/index.xml</link>
    <description>Recent content in Css on OP blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://qetr1ck-op.github.io/blog/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Front End Handbook 2017</title>
      <link>https://qetr1ck-op.github.io/blog/post/front-end-handbook-2017/</link>
      <pubDate>Sun, 23 Apr 2017 19:11:25 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/front-end-handbook-2017/</guid>
      <description>&lt;p&gt;This is a guide that anyone could use to learn about the practice of front-end development. It broadly outlines and discusses the practice of front-end engineering: how to learn it and what tools are used when practicing it in 2017&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The handbook is divided into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part I. The Front-End Practice

&lt;ul&gt;
&lt;li&gt;Part one broadly describes the practice of front-end engineering.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Part II: Learning Front-End Development

&lt;ul&gt;
&lt;li&gt;Part two identifies self-directed and direct resources for learning to become a front-end developer.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Part III: Front-End Development Tools

&lt;ul&gt;
&lt;li&gt;Part three briefly explains and identifies tools of the trade.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;link&#34;&gt;Link&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frontendmasters.com/books/front-end-handbook/2017/&#34;&gt;read online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>A static site with a dynamic search function</title>
      <link>https://qetr1ck-op.github.io/blog/post/static-site-with-a-dynamic-search/</link>
      <pubDate>Sun, 09 Apr 2017 12:09:08 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/static-site-with-a-dynamic-search/</guid>
      <description>&lt;p&gt;A static site with a dynamic search function? Yes. Alternatively to embeddable scripts from Google or other search engines you can provide your visitors a custom search by indexing your content files directly.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugo-lunr&#34;&gt;hugo-lunr&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/hugo-lunr&#34;&gt;hugo-lunr&lt;/a&gt; - A simple way to add site search to your static Hugo site using &lt;a href=&#34;https://github.com/olivernn/lunr.js&#34;&gt;lunr.js&lt;/a&gt;. Hugo-lunr will create an index file of any html and markdown documents in your Hugo project&lt;/p&gt;

&lt;h1 id=&#34;implementation&#34;&gt;implementation&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/qetr1ck-op/blog-hugo-source/blob/master/themes/hugo-code-theme/layouts/partials/search.html&#34;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rayhightower.com/blog/2016/01/04/how-to-make-lunrjs-jekyll-work-together/&#34;&gt;How to Make lunr.js and Jekyll Work Together (with Gotchas)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS 30</title>
      <link>https://qetr1ck-op.github.io/blog/post/Js-30/</link>
      <pubDate>Tue, 04 Apr 2017 14:51:54 +0300</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Js-30/</guid>
      <description>&lt;p&gt;To fresh memory with &lt;a href=&#34;https://javascript30.com/&#34;&gt;30 day vanilla js coding challenge&lt;/a&gt;. Build 30 things in 30 days with 30 tutorials. No Frameworks, No Compilers, No Libraries, No Boilerplate!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;How do you get better?&lt;/p&gt;

&lt;p&gt;Build things. Lots of things. Build 1,000 things. Keep it up and don&amp;rsquo;t stop. Seriously.&lt;/p&gt;

&lt;p&gt;This has always been my advice. Just put in the work and you will get better.&lt;/p&gt;

&lt;p&gt;But Wes, what should I build? I have no ideas! Please don&amp;rsquo;t make me do another todo app.&lt;/p&gt;

&lt;p&gt;Ideas, Eh? I&amp;rsquo;ve got lots! This is JavaScript30 — let&amp;rsquo;s build 30 things together.&lt;/p&gt;

&lt;h1 id=&#34;done-challenges&#34;&gt;Done challenges&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/01-drum-kit/index.html&#34;&gt;01 - Drum kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/02-js-and-css-clock/index.html&#34;&gt;02 - CSS + JS clock&lt;/a&gt;, &lt;a href=&#34;http://thenewcode.com/943/An-SVG-Analog-Clock-In-6-Lines-of-JavaScript&#34;&gt;SVG + JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/03-css-variables/index.html&#34;&gt;03 - CSS variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/04-array-cardio-day1/index.html&#34;&gt;04 - Array Cardio Day 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/05-flex-panel-gallery/index.html&#34;&gt;05 - Flex panel gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/06-type-ahead/index.html&#34;&gt;06 - AJAX Type Ahead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/07-array-cardio-day2/index.html&#34;&gt;07 - Array Cardio Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/08-fun-with-html5-canvas/index.html&#34;&gt;08 - Fun with HTML5 Canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/09-dev-tools-domination/index.html&#34;&gt;09 - Dev Tools Domination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/10-hold-shift-and-check-checkboxes/index.html&#34;&gt;10 - Hold Shift and Check Checkboxes&lt;/a&gt;, &lt;a href=&#34;http://plnkr.co/edit/NthETyzybeilD13jen4y?p=preview&#34;&gt;With Ctrl example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/11-custom-video-player/index.html&#34;&gt;11 - Custom Video Player&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/12-key-sequence-detection/index.html&#34;&gt;12 - Key Sequence Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/13-slide-in-on-scroll/index.html&#34;&gt;13 - Slide in on Scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/14-js-references-vs-copying/index.html&#34;&gt;14 - JavaScript References VS Copying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/15-local-storage/index.html&#34;&gt;15 - LocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/16-mouse-move-shadow/index.html&#34;&gt;16 - Mouse Move Shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/17-sort-without-articles/index.html&#34;&gt;17 - Sort Without Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../html/js-30/19-webcam-fun/index.html&#34;&gt;19 - Webcam Fun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wesbos/JavaScript30&#34;&gt;Github original source&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Front End Interview Questions</title>
      <link>https://qetr1ck-op.github.io/blog/post/Front-End-Interview-Questions/</link>
      <pubDate>Sun, 14 Aug 2016 11:39:13 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Front-End-Interview-Questions/</guid>
      <description>&lt;p&gt;To rock the interview to achieve what you deserve and to improve your concepts about front end technologies, I have consolidated a list of questions and answers. It&amp;rsquo;s a one stop solution for front end interview process.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;web-core&#34;&gt;Web Core&lt;/h1&gt;

&lt;h2 id=&#34;javascript-basics&#34;&gt;JavaScript: basics&lt;/h2&gt;

&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the differences between &lt;code&gt;undeclared&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; JavaScript has two distinct values for nothing, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. Also there are &lt;code&gt;undeclared&lt;/code&gt; variables which don’t even exist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var declaredVariable = 1;

(function scoppedVariables() {
  undeclaredVariable = 1;
  var declaredVariable = 2;
})();

undeclaredVariable;
declaredVariable;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undeclared&lt;/code&gt; when it does not use the var keyword. It gets created on the global object, thus it operates in a different space as the declared variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; means, value of the variable is not defined. JavaScript has a global variable &lt;code&gt;undefined&lt;/code&gt; whose value is &amp;ldquo;undefined&amp;rdquo; and &lt;code&gt;typeof undefined&lt;/code&gt; is also &amp;ldquo;undefined&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; means empty or non-existent value which is used by programmers to indicate “no value”. &lt;code&gt;null&lt;/code&gt; is a primitive value and you can assign &lt;code&gt;null&lt;/code&gt; to any variable. You cannot add properties to it. Sometimes people wrongly assume that it is an object, because &lt;code&gt;typeof null&lt;/code&gt; returns &amp;ldquo;object&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the differences between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;? To what type &lt;code&gt;==&lt;/code&gt; operands will be converted to if they have
different types?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The simplest way of saying that, &lt;code&gt;==&lt;/code&gt; will not check types and &lt;code&gt;===&lt;/code&gt; will check whether both sides are of same type. So, &lt;code&gt;==&lt;/code&gt; under the hood converts to number type if they have not the same type and then do the comparison.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As &lt;code&gt;[]&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;[] == true&lt;/code&gt; should also be &lt;code&gt;true&lt;/code&gt;, right? Explain comparison algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Not.&lt;/p&gt;

&lt;p&gt;You are right about first part, &lt;code&gt;[]&lt;/code&gt;, empty array is an object and object is always truths.&lt;/p&gt;

&lt;p&gt;However, special case about &lt;code&gt;==&lt;/code&gt; (not-strict equal) is that it will do some implicit coercion.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Since left and right side of the equality are two different types, JavaScript can&amp;rsquo;t compare them directly.&lt;/li&gt;
&lt;li&gt;JavaScript implementation will try to convert &lt;code&gt;[]&lt;/code&gt; by using &lt;code&gt;toPrimitive&lt;/code&gt; (of JavaScript implementation). since &lt;code&gt;[].valueOf&lt;/code&gt; is not primitive will use &lt;code&gt;toString&lt;/code&gt; and will get &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now you are comparing &lt;code&gt;&amp;quot;&amp;quot; == 1&lt;/code&gt; and still left and right is not same type. Hence left side will be converted again to a number and empty string will be &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, they are of same type, you are comparing &lt;code&gt;0 === 1&lt;/code&gt; which will be &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Why &lt;code&gt;typeof bar === object&lt;/code&gt; isn&amp;rsquo;t right? How can this pitfall be avoided?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Use &lt;code&gt;Object.prototype.toString.call(&amp;lt;object&amp;gt;)&lt;/code&gt; or use Duck Typing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The surprising gotcha in JavaScript is that &lt;code&gt;null&lt;/code&gt; is also considered an object!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &lt;code&gt;NaN&lt;/code&gt;? What is its type? How can you reliably test if a value is equal to &lt;code&gt;NaN&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &amp;ldquo;not a number&amp;rdquo;, &amp;ldquo;number&amp;rdquo;, &lt;code&gt;NaN&lt;/code&gt; compared to anything – even itself! to &lt;code&gt;false&lt;/code&gt;. Use &lt;code&gt;Number.isNaN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The NaN property represents a value that is “not a number”. This special value results from an operation that could not be performed either because one of the operands was non-numeric (e.g., &amp;ldquo;abc&amp;rdquo; / 4), or because the result of the operation is non-numeric (e.g., an attempt to divide by zero).&lt;/p&gt;

&lt;p&gt;ES6 offers a new &lt;code&gt;Number.isNaN()&lt;/code&gt; function, which is a different and more reliable than the old global &lt;code&gt;isNaN()&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the significance, and what are the benefits, of including &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; at the beginning of a JavaScript source file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; is a way to enforce stricter parsing and error handling on your code at runtime. Code errors that would otherwise have been ignored or would have failed silently will now generate errors or throw exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Some of the key benefits of strict mode include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Makes debugging easier. Code errors that would otherwise have been ignored or would have failed silently will now generate errors or throw exceptions, alerting you sooner to problems in your code and directing you more quickly to their source.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prevents accidental globals. Without strict mode, assigning a value to an undeclared variable automatically creates a global variable with that name. This is one of the most common errors in JavaScript. In strict mode, attempting to do so throws an error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eliminates &lt;code&gt;this&lt;/code&gt; coercion. Without &lt;code&gt;strict mode&lt;/code&gt;, a reference to a this value of &lt;code&gt;undefined&lt;/code&gt; is automatically coerced to the global. This can cause many headfakes and pull-out-your-hair kind of bugs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disallows duplicate property names or parameter values. Strict mode throws an error when it detects a duplicate named property in an object (e.g.,&lt;code&gt;var object = {foo: &amp;quot;bar&amp;quot;, foo: &amp;quot;baz&amp;quot;};&lt;/code&gt;) or a duplicate named argument for a function (e.g., &lt;code&gt;function foo(val1, val2, val1){}&lt;/code&gt;), thereby catching what is almost certainly a bug in your code that you might otherwise have wasted lots of time tracking down.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Throws error on invalid usage of delete. The delete operator (used to remove properties from objects) cannot be used on non-configurable properties of the object. Non-strict code will fail silently when an attempt is made to delete a non-configurable property, whereas strict mode will throw an error in such a case.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;scope-and-hoisting-closure-and-functions&#34;&gt;Scope and hoisting, closure and functions&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result will be an error?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;say(&#39;World&#39;);

const phrase = &#39;Hello&#39;;

function say(name) {
  console.log(`${name}, ${phrase}!`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &amp;lsquo;undefined, World!&amp;rsquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result? What if to remove &lt;code&gt;var value = false&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var value = 0;

function f() {
  if (1) {
    value = true;
  } else {
    var value = false;
  }

  console.log(value);
}

f();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;true&lt;/code&gt;, after remove line of code, will be changed global variable and the result will be the same.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result? How to fix?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;fn1();
fn2();
fn3();
fn4();

function fn1() {
  setTimeout(() =&amp;gt; {
    console.log(&#39;fn1&#39;)
  })
}

function fn2() {
  console.log(&#39;fn2&#39;);
}

function fn3() {
  Promise.resolve().then(() =&amp;gt; {
    console.log(&#39;fn3&#39;);
  })
}

const fn4 = function () {
  console.log(&#39;fn4&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;fn4&lt;/code&gt; function expression isn&amp;rsquo;t hoisted. Change to function declaration. The result should be &lt;code&gt;fn2, fn4, fn3, fn1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is a closure? What is a practical use for a closure? Provide an example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Closure is a function with all accessible variables in lexical environment. Main usage is encapsulating data from outer usage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result? How to make them independent?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let initCount = 1;

function makeCounter() {
  return () =&amp;gt; initCount++
}

let counter = makeCounter();
let counter2 = makeCounter();

console.log( counter() ); // ?
console.log( counter() ); // ?

console.log( counter2() ); // ?
console.log( counter2() ); // ?
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Closures Inside in loop with &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If log the loop counter inside &lt;code&gt;setTimeout&lt;/code&gt;, what will be logged?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var i = 0; i &amp;lt; 10; i++) {
  setTimeout(function() {
    console.log(i);  
  }, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: The above will not output the numbers 0 through 9, but will simply print the number 10 ten times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The console log is inside the anonymous function of &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt; is executed when current call stack is over.&lt;/li&gt;
&lt;li&gt;So, the loop finishes and before setTimeout get the chance to execute. However, anonymous functions keep a reference to &lt;code&gt;i&lt;/code&gt; by creating a closure.&lt;/li&gt;
&lt;li&gt;Since, the loop is already finished, the value &lt;code&gt;i&lt;/code&gt; has been set to &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can fix it by avoiding closure. Just create a &lt;code&gt;IIFE&lt;/code&gt; (Immediately Invoked Function Expression), it will create its own scope and you can pass i to the function. In that case i will be a local variable (will not refer to i in the closure) and value of the i in every loop will be preserved.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
for(var i = 0; i &amp;lt; 10; i++) {
    setTimeout((function(i) {
      console.log(i);
    })(i), 10)
}

//or
for(var i = 0; i &amp;lt; 10; i++) {
  setTimeout(console.log.bind(console, i), 10);
}

// ES6
for(let i = 0; i &amp;lt; 10; i++) {
  setTimeout(() =&amp;gt; {
    console.log(i);  
  }, 10);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a simple function to tell whether &lt;code&gt;&#39;foo&#39;&lt;/code&gt; is passed as parameter or not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; First convert &lt;code&gt;arguments&lt;/code&gt; to an array with &lt;code&gt;rest&lt;/code&gt; operator, after that simply use &lt;code&gt;Array.prototype.includes&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
function isFooPassed(){
  return Array.prototype.indexOf.call(arguments, &#39;foo&#39;) &amp;gt; 0;
}

// ES6
function isFooPassed(...params) {
  return params.includes(&#39;foo&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you use &amp;ldquo;Math.max&amp;rdquo; to find the max value in an array?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Math.max(...arr);  

//ES5 way
//Math.max.apply(Math, arr);  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you set a prefix before everything you log? for example, if you &lt;code&gt;log(&#39;my message&#39;)&lt;/code&gt; it will log: &lt;code&gt;(app) my message&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Just get the arguments, convert it to an array and &lt;code&gt;unshift&lt;/code&gt; whatever prefix you want to set. Finally, use apply to pass all the arguments to console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
function log(){
  var args = Array.prototype.slice.call(arguments);
  args.unshift(&#39;(app)&#39;);
  console.log.apply(console, args);
}

// ES6 
function log(...params){
  console.log([&#39;(app)&#39;, ...params]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Cashing / Memoization. How could you implement cache to save calculation time for a recursive fibonacci function?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fibonacci = (() =&amp;gt; {
  const memo = {};

  function f(n) {
    let value;

    if (memo[n]) {
      value = memo[n];
    } else {
      if (n === 0 || n === 1)
        value = n;
      else
        value = f(n - 1) + f(n - 2);

      memo[n] = value;
    }

    return value;
  }

  return f;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Memoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Because JavaScript objects behave like associative arrays, they are ideal candidates to act as caches. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function.  However, if the data is not cached, then the function is executed, and the result is added to the cache.&lt;/p&gt;

&lt;p&gt;In the following example, the original Fibonacci function is rewritten to include memoization. In the example, a self-executing anonymous function returns an inner function, f(), which is used as the Fibonacci function. When f() is returned, its closure allows it to continue to access the “memo” object, which stores all of its previous results. Each time f() is executed, it first checks to see if a result exists for the current value of “n”. If it does, then the cached value is returned. Otherwise, the original Fibonacci code is executed. Note that “memo” is defined outside of f() so that it can retain its value over multiple function calls. Recall that the original recursive function was called over 40 billion times to compute the 50th Fibonacci number. By implementing memoization, this number drops to 99.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why wrapping the entire content of a JavaScript source file in IIFE?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function($) { /*...*/ } )(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; This technique creates a closure around the entire contents of the file which, perhaps most importantly, creates a private namespace and thereby helps avoid potential name clashes between different JavaScript modules and libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Another feature of this technique is to allow for an easily referenceable (presumably shorter) alias for a global variable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explain why the following doesn&amp;rsquo;t work as an IIFE: &lt;code&gt;function foo(){ }();&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Because &lt;code&gt;foo&lt;/code&gt; isn’t being called! This is a function definition, it defines &lt;code&gt;foo&lt;/code&gt;. But it’s not a function expression - that is, it’s not understood by the JS parser to actually call a function.&lt;/p&gt;

&lt;p&gt;For the parser, things look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo(){
} // ok, done with that function definition
  // (silly human left off the semicolon, how embarrassing!)

(); // Are they trying to call something? What’s the function’s name?
    // PARSE ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to prep the parser that we&amp;rsquo;re actually dealing with a function expression we have to wrap things up in &lt;code&gt;()&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(
  function foo(){
  }()
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also will work with &lt;code&gt;!&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;+function() {
  
}();

!function() {

}();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;objects&#34;&gt;Objects&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What the heck is &lt;code&gt;this&lt;/code&gt; in JavaScript?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; At the time of execution of every function, JavaScript engine sets a property to the function called &lt;code&gt;this&lt;/code&gt; which refer to the current execution context. &lt;code&gt;this&lt;/code&gt; is always refer to an object and depends on how function is called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the global context or inside a function this refers to the &lt;code&gt;window&lt;/code&gt;/&lt;code&gt;global&lt;/code&gt; object. In ES6 module or with &lt;code&gt;use strict&lt;/code&gt; directive it&amp;rsquo;s &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;While executing a method in the context of an object, the object becomes the value of &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you use a constructor (by using &lt;code&gt;new&lt;/code&gt; keyword) to create an object, the value of &lt;code&gt;this&lt;/code&gt; will refer to the newly created object.&lt;/li&gt;
&lt;li&gt;Set the value of &lt;code&gt;this&lt;/code&gt; to any arbitrary object by passing the object as the first parameter of &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;arrow function&lt;/code&gt; for use parent LexicalEnvironment.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Why we need &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt;. If you want to use an arbitrary object as value of this, how will you do that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; To use an arbitrary object as value of this.&lt;/p&gt;

&lt;p&gt;There are at least four different ways to doing this by using &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;arrow function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qetr1ck-op.github.io/2016/08/06/call-apply-VS-bind-the-simplest-explanation/&#34;&gt;call &amp;amp; apply VS bind, the simplest explanation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How would you compare two objects?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; JavaScript has two different approaches for testing equality. Primitives like strings and numbers are compared by their value, while objects like arrays, dates, and user defined objects are compared by their reference. This means it compares whether two objects are referring to the same location in memory.&lt;/p&gt;

&lt;p&gt;Equality check will check whether two objects have same value for same property. To check that, you can get the keys for both the objects.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&#34;https://www.npmjs.com/package/lodash.isequal&#34;&gt;lodash&lt;/a&gt; or any npm equivalent.&lt;/p&gt;

&lt;p&gt;Or implement by own:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isEqual(a, b) {
    var aProps = Object.getOwnPropertyNames(a),
        bProps = Object.getOwnPropertyNames(b);

    if (aProps.length !== bProps.length) {
        return false;
    }

    for (var i = 0; i &amp;lt; aProps.length; i++) {
        var propName = aProps[i];
        
        if (a[propName] !== b[propName]) {
            return false;
        }
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Extend Core Object through prototype. Example 1. How could you write a method on instance of a date which will give you next day?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You need to declare a method on the prototype of Date object. To get access to the current value of the instance of the date use &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Date.prototype.nextDay = function () {
  return new Date(this.setDate(this.getDate() + 1));
} 

const date = new Date(); 
date; //Fri May 16 2014 20:47:14 GMT-0500 (Central Daylight Time)
date.nextDay();//Sat May 17 2014 20:47:14 GMT-0500 (Central Daylight Time)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Extend Core Object through prototype. Example 2. How could you make this work &lt;code&gt;[1,2,3,4,5].duplicator()&lt;/code&gt; to return &lt;code&gt;[1,2,3,4,5,1,2,3,4,5]&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; We need to add a method in the prototype of Array object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
Array.prototype.duplicator = function(){
  return this.concat(this);
}

Array.prototype.duplicator = function() {
  return [...this, ...this];
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;In what order are logging properties in the object?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var codes = {
  // keys of country: name of country
  &#39;7&#39;: &#39;Russian Federation&#39;,
  &#39;38&#39;: &#39;Ukraine&#39;,
  &#39;1&#39;: &#39;USA&#39;,
  &#39;57&#39;: &#39;Norway&#39;
};

for (var code in codes) console.log(code); // ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;1, 7, 38, 57&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;
If name of property is non-numeric string, such keys always moving in the order in which they assigned. On the other hand, if the name of the property - a number or a numeric string, then all modern browsers such properties are sorted for internal optimization.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why using &lt;code&gt;for...in&lt;/code&gt; for Array iteration is wrong?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Array indexes are just enumerable properties with integer names and are otherwise identical to general &lt;code&gt;Object&lt;/code&gt; properties. There is no guarantee that &lt;code&gt;for...in&lt;/code&gt; will return the indexes in any particular order. The &lt;code&gt;for...in&lt;/code&gt; loop statement will return all enumerable properties, including those with non–integer names and those that are inherited.&lt;/p&gt;

&lt;p&gt;Another point is that &lt;code&gt;for (var i = 0; i &amp;lt; arr.length; i++)&lt;/code&gt; is up to 10-100x time faster.&lt;/p&gt;

&lt;h3 id=&#34;oop&#34;&gt;OOP&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;How prototype inheritance works? Are you aware of classical approach and with OOLO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; In most languages, there are classes and objects. Classes inherit from other classes. In JavaScript, the inheritance is prototype-based. That means that there are no classes. Instead, an object inherits from another object. The main point is that one object can be &lt;code&gt;prototype&lt;/code&gt; of another object. That means if property isn’t found in the object - than it takes from &lt;code&gt;prototype&lt;/code&gt; object. In JavaScript this implementation is at the language level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; &lt;a href=&#34;http://qetr1ck-op.github.io/2014/09/15/OOP-in-prototype-style/&#34;&gt;OOP in prototype style&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. Make a subclass from parent class &lt;code&gt;Animal&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// parent class or abstract class
function Animal(name) {
  this.name = name;
  this.speed = 0;
}

Animal.prototype.run = function() {
  console.log(`${this.name} run!`);
}

function Rabbit() {
  /*...*/
}

/*...*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function Animal(name) {
  this.name = name;
  this.speed = 0;
}

Animal.prototype.run = function() {
  console.log(`${this.name} run!`);
}

function Rabbit() {
  Animal.apply(this, arguments)
}

Rabbit.prototype = Object.create(Animal.prototype);

// optionally
Rabbit.prototype.constructor = Rabbit;

Rabbit.prototype.run = function() {
  // optionally
  Animal.prototype.run.apply(this);
  console.log(`${this.name} jumps!`);
};

var rabbit = new Rabbit(&#39;white rabbit&#39;);
rabbit.run();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Rewrite previous example to ES6 classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Animal {
  constructor(name) {
    this.name = name;
    this.speed = 0;
  }
  run() {
    console.log(`${this.name} run!`);
  }
}

class Rabbit extends Animal {
  constructor(name) {
    super(name)
  }
  run() {
    super.run();
    console.log(`${this.name} jumps`);
  };
}

var rabbit = new Rabbit(&#39;white rabbit&#39;);
rabbit.run();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = Person()&lt;/code&gt;, and &lt;code&gt;var person = new Person()&lt;/code&gt;? What &lt;code&gt;new&lt;/code&gt; operator do?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; In the example below we define a new &amp;ldquo;class&amp;rdquo; called Person with an empty constructor. Invoke function &lt;code&gt;Person()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;. On the other hand invoking &lt;code&gt;new Person&lt;/code&gt; will return an empty object &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a prototype-based language and contains no class statement, such as is found in C++ or Java. This is sometimes confusing for programmers accustomed to languages with a class statement. Instead, JavaScript uses functions as constructors for classes. Defining a class is as easy as defining a function. In the example below we define a new class called &lt;code&gt;Person&lt;/code&gt; with an empty constructor.&lt;/p&gt;

&lt;p&gt;And the spec says, the &lt;code&gt;new&lt;/code&gt; operator uses the internal &lt;code&gt;[[Construct]]&lt;/code&gt; method, and it basically does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initializes a new empty object (no properties)&lt;/li&gt;
&lt;li&gt;Sets the prototype of the new object to the value of the &lt;code&gt;prototype&lt;/code&gt; property of Person.

&lt;ul&gt;
&lt;li&gt;Note: The default value of &lt;code&gt;prototype&lt;/code&gt; for a function is an object (automatically created when the function is declared) with its prototype set to &lt;code&gt;Object.prototype&lt;/code&gt; and a &lt;code&gt;constructor&lt;/code&gt; property pointing back to the function Person.&lt;/li&gt;
&lt;li&gt;Note: The terminology can be confusing. The property named &lt;code&gt;prototype&lt;/code&gt; is not the same as the prototype of the object. Only functions have the property named &amp;ldquo;prototype&amp;rdquo;, but all objects have a prototype.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Calls the function &lt;code&gt;Person&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; set to the new object, and with the supplied &lt;code&gt;arguments&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If calling the function &lt;code&gt;Person&lt;/code&gt; returns an object, this object is the result of the expression. Otherwise the newly created object is the result of the expression.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;new F&lt;/code&gt; vs &lt;code&gt;Object.create&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;new F&lt;/code&gt; is &lt;code&gt;Object.create(F.prototype)&lt;/code&gt; with additionally running the constructor function. And giving the constructor the chance to return the actual object that should be the result of the expression instead of this. So basically &lt;code&gt;Object.create&lt;/code&gt; doesn&amp;rsquo;t execute the constructor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt; methods allows you to easily implement differential inheritance, where objects can directly inherit from other objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var userB = {
  sayHello: function() {
    console.log(&#39;Hello &#39;+ this.name);
  }
};

var bob = Object.create(userB, { // object descriptor
  &#39;id&#39; : {
    value: MY_GLOBAL.nextId(),
    enumerable:true // writable:false, configurable(deletable):false by default
  },
  &#39;name&#39;: {
    value: &#39;Bob&#39;,
    enumerable: true
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dom&#34;&gt;DOM&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Is there are a difference &lt;code&gt;window&lt;/code&gt; VS &lt;code&gt;document&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;  Yes. JavaScript has a global &lt;code&gt;window&lt;/code&gt; object and everything runs under it. &lt;code&gt;document&lt;/code&gt; is a property of &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window&lt;/code&gt; is global object that holds global variables, global functions, location, history everything is under it. Besides, &lt;code&gt;setTimeout&lt;/code&gt;, ajax call (&lt;code&gt;XMLHttpRequest&lt;/code&gt;), &lt;code&gt;console&lt;/code&gt; or &lt;code&gt;localStorage&lt;/code&gt; are part of window.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;document&lt;/code&gt; is also under &lt;code&gt;window&lt;/code&gt;. &lt;code&gt;document&lt;/code&gt; represents the &lt;code&gt;DOM&lt;/code&gt;,  the object oriented representation of the html markup. All the nodes are part of document. Hence you can use &lt;code&gt;getElementById&lt;/code&gt; or &lt;code&gt;addEventListener&lt;/code&gt; on document. These methods are not present in the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you make sure to run some javaScript when DOM is ready like &lt;code&gt;$(document).ready?&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are four different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put your script in the last tag of html body element. DOM would be ready by the time browser hits the script tag.&lt;/li&gt;
&lt;li&gt;Place your code inside a &lt;code&gt;DOMContentLoaded&lt;/code&gt; handler. This event will be fired when DOM is completely loaded.&lt;/li&gt;
&lt;li&gt;Watch changes in the &lt;code&gt;readyState&lt;/code&gt; of the &lt;code&gt;document&lt;/code&gt;. And the last state is &lt;code&gt;&amp;quot;complete&amp;quot;&lt;/code&gt; state, you can put your code there.&lt;/li&gt;
&lt;li&gt;Use jQuery &lt;code&gt;$(document).ready&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;window.onload&lt;/code&gt; VS &lt;code&gt;document.onload&lt;/code&gt; VS &lt;code&gt;document.addEventListener(&#39;DOMContentLoaded&#39;)&lt;/code&gt;. Do they fire at the same time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;
* &lt;code&gt;window.onload&lt;/code&gt; is fired when all page is loaded, including all resources (images, styles, iframes)
* &lt;code&gt;document.onload&lt;/code&gt; is fired when DOM (DOM tree built from markup code within the document) is ready which without external content.
* &lt;code&gt;DOMContentLoaded&lt;/code&gt; means that DOM has already been built, we can use handlers or search through the nodes, but resources such as images, styles don&amp;rsquo;t be loaded yet&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is &lt;code&gt;attribute&lt;/code&gt; similar to &lt;code&gt;property&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; We operate with DOM-properties via JS. Attributes are part of HTML markup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is a property?&lt;/p&gt;

&lt;p&gt;JS objects have DOM-properties. These properties are kind of like instance variables for the particular element. As such, a property can be different types (boolean, string, etc.). Properties can be accessed as object properties: &lt;code&gt;a.href&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What is an attribute?&lt;/p&gt;

&lt;p&gt;Attributes are in the HTML itself, rather than in the DOM. They are very similar to properties, but not quite as good. When a property is available it’s recommended that you work with properties rather than attributes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.hasAttribute(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.getAttribute(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.setAttribute(name, value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.removeAttribute(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.attributes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the different ways to get an element from DOM?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You can use the following methods in &lt;code&gt;document&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementById&lt;/code&gt; to get a element that has the provided Id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByClassName&lt;/code&gt; to get a nodelist (nodelist is not an array, rather it is array-like object) by providing a class name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagName&lt;/code&gt; to get a nodelist by the provided tag name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByName&lt;/code&gt; to get a nodelist by name property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelector&lt;/code&gt; you will pass css style selector and this will return first matched element in the DOM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelectorAll&lt;/code&gt; will return a non-live nodelist by using depth-first pre order traversal of all the matched elements. Non-live means, any changes after selecting the elements will not be reflected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two more options but don&amp;rsquo;t used frequently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementsByName&lt;/code&gt; returns the list of elements by the provided name of the html tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagNameNS&lt;/code&gt; returns elements with particular tag name within the provided namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Fastest way to Query DOM:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; If you have an ID of an element &lt;code&gt;getElmentById&lt;/code&gt; is the fastest way to select an element. However, you should not have so many ID in you document to avoid style repetition. &lt;code&gt;getElementsByClassName&lt;/code&gt; is the second quickest way to select an element.&lt;/p&gt;

&lt;p&gt;Here is the list. As we go downwards through the list, it takes more time to select elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID (#myID)&lt;/li&gt;
&lt;li&gt;Class (.myClass)&lt;/li&gt;
&lt;li&gt;Tag (div, p)&lt;/li&gt;
&lt;li&gt;Sibling (div+p, div~p)&lt;/li&gt;
&lt;li&gt;child (div&amp;gt;p)&lt;/li&gt;
&lt;li&gt;Descendant (div p)&lt;/li&gt;
&lt;li&gt;Universal (*)&lt;/li&gt;
&lt;li&gt;Attribute (input[type=&amp;ldquo;checkbox&amp;rdquo;])&lt;/li&gt;
&lt;li&gt;Pseudo (p:first-child)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Why &lt;code&gt;querySelectorAll(&#39;.my-class&#39;)&lt;/code&gt; is slower than &lt;code&gt;getElementsByClassName(&#39;my-class&#39;)&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;querySlectorAll&lt;/code&gt; is a generic purpose method. It is optimized for different kinds of selectors. Hence it has to check whether you put a &lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt; in front of the parameter you are passing. If you are just passing a class name with &lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt;, under the hood it uses &lt;code&gt;getElementsByClassName&lt;/code&gt; (could vary based on browser implements). Whereas if you directly uses &lt;code&gt;getElementsByClassName&lt;/code&gt; it directly uses this method and doesn&amp;rsquo;t have to go through all the initial processing of &lt;code&gt;querySelectorAll&lt;/code&gt;. Hence to search elements with a particular class name, &lt;code&gt;getElementsByClassName&lt;/code&gt; is faster than &lt;code&gt;querySelectorAll&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why we can&amp;rsquo;t use &lt;code&gt;forEach&lt;/code&gt; or similar array methods on a &lt;code&gt;NodeList&lt;/code&gt;? How could you solve this problem?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Both &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;nodeList&lt;/code&gt; have &lt;code&gt;length&lt;/code&gt; and you can loop through elements but they are not same object.&lt;/p&gt;

&lt;p&gt;Both are inherited from &lt;code&gt;Object&lt;/code&gt;. However &lt;code&gt;array&lt;/code&gt; has different &lt;code&gt;prototype&lt;/code&gt; object than &lt;code&gt;nodeList&lt;/code&gt;. &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc are on &lt;code&gt;array.prototype&lt;/code&gt; which doesn&amp;rsquo;t exist in the &lt;code&gt;NodeList.prototype&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;myArray --&amp;gt; Array.prototype --&amp;gt; Object.prototype --&amp;gt; null

myNodeList --&amp;gt; NodeList.prototype --&amp;gt; Object.prototype --&amp;gt; null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Convert &lt;code&gt;NodeList&lt;/code&gt; to an &lt;code&gt;array&lt;/code&gt;. After that you will have access to all &lt;code&gt;array.prototype&lt;/code&gt; methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
var myNodeList = document.querySelectorAll(&#39;.my-class&#39;);
var nodesArray = Array.prototype.slice.call(myNodeList);

//use array method on nodeList
nodesArray.forEach(function(el, idx){
  console.log(idx, el);
});

// ES6
const myNodeList = document.querySelectorAll(&#39;.my-class&#39;);

// Spread operator
[...myNodeList].forEach(cb);

// Array.from()
Array.from(myNodeList).forEach(cb);

// for...of statement
for (var el of myNodeList) cb(el);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How would you add/remove/toggle a class to an element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;el.classList.remove(&#39;my-class&#39;); //removing a class
el.classList.toggle(&#39;my-class&#39;);  // toggling a class
el.classList.contains(&#39;my-class&#39;); // checking whether class exists
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How to check if element isn&amp;rsquo;t empty, without children?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (!elem.childNodes.length) { ... }

if (!elem.hasChildNodes()) { ... }

if (!elem.firstChild) { ... }

if (!elem.lastChild) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How you would perform next operation: create element with content, add &lt;code&gt;data-foo&lt;/code&gt; attribute, append newly created element to whatever you want, then move it before some element, change text of it, remove it from DOM. How to clone an element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Use the next methods &lt;code&gt;document.createElement(tag)&lt;/code&gt;, &lt;code&gt;el.innerHTML&lt;/code&gt;, &lt;code&gt;parent.appendChild(el)&lt;/code&gt;, &lt;code&gt;parent.insertBefore(el, someEl)&lt;/code&gt;, &lt;code&gt;parent.removeChild(el)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For clone an element we can create function or use &lt;code&gt;el.cloneNode(true)&lt;/code&gt; where &lt;code&gt;true&lt;/code&gt; means deep cloning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to delete all children of element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function removeChildren(elem) {
  try {
    elem.innerHTML = &#39;&#39;; //dont work with table cells and etc.
  } catch (e) {
    while (elem.firstChild) {
      elem.removeChild(elem.firstChild);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;createTextNode vs innerHTML&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; It depends on content. &lt;code&gt;innerHTML&lt;/code&gt; inserts content as HTML, but &lt;code&gt;createTextNode&lt;/code&gt; inserts tags as text.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the best way to create a DOM element? Set &lt;code&gt;innherHTML&lt;/code&gt; or use &lt;code&gt;createElement&lt;/code&gt;? Do you know about &lt;code&gt;insertAdjacentHTML&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; According to jsPerf option 1 is approximately 3 times slower than option 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;appendChild&lt;/code&gt; does not cause a complete rebuild of the DOM or even all of the elements/nodes within the target.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;innerHTML&lt;/code&gt; does cause a complete rebuild of the content of the target element, which if you&amp;rsquo;re appending is unnecessary.&lt;/p&gt;

&lt;p&gt;Appending via &lt;code&gt;innerHTML += content&lt;/code&gt; makes the browser run through all of the nodes in the element building an HTML string to give to the JavaScript layer. Your code then appends text to it and sets innerHTML, causing the browser to drop all of the old nodes in the target, re-parse all of that HTML, and build new nodes. So in that sense, it may not be efficient. (However, parsing HTML is what browsers do and they&amp;rsquo;re really, really fast at it.)&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;innerHTML&lt;/code&gt; does indeed invalidate any references to elements within the target element you may be holding - because those elements don&amp;rsquo;t exist anymore, you removed them and then put in new ones (that look very similar) when you set &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In short, if you&amp;rsquo;re appending, I&amp;rsquo;d use &lt;code&gt;appendChild&lt;/code&gt; or &lt;code&gt;insertAdjacentHTML&lt;/code&gt;. If you&amp;rsquo;re replacing, there are very valid situations where using innerHTML is a better option than creating the tree yourself via the DOM API.&lt;/p&gt;

&lt;p&gt;Finally, it&amp;rsquo;s worth mentioning &lt;code&gt;insertAdjacentHTML&lt;/code&gt;, which is a function that you can use to insert nodes and elements into or next to an element using an HTML string. You can append to an element with it: &lt;code&gt;theElement.insertAdjacentHTML(&amp;quot;beforeend&amp;quot;, &amp;quot;the HTML goes here&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &lt;code&gt;createDocumentFragment&lt;/code&gt; and why you might use it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; If you are changing DOM that cause expensive reflow, you can avoid it by using &lt;code&gt;documentFragment&lt;/code&gt; as it is managed in the memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;documentFragment&lt;/code&gt; a very lightweight or minimal part of a DOM or a subtree of a DOM tree. It is very helpful when you are manipulating a part of DOM for multiple times. It becomes expensive to hit a certain portion of DOM for hundreds time. You might cause reflow for hundred times.&lt;/p&gt;

&lt;p&gt;A bad practice, you are hitting the DOM every single time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//
var list = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, ... ],
    el, text;
for (var i = 0; i &amp;lt; list.length; i++) {
    el = document.createElement(&#39;li&#39;);
    text = document.createTextNode(list[i]);
    el.appendChild(text);
    document.body.appendChild(el);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A good practice, you causing reflow one time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fragment = document.createDocumentFragment(),
    list = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, ...],
    el, text;
for (var i = 0; i &amp;lt; list.length; i++) {
    el = document.createElement(&#39;li&#39;);
    text = document.createTextNode(list[i]);
    el.appendChild(text);
    fragment.appendChild(el);
}
document.body.appendChild(fragment);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When would you use &amp;ldquo;document.write()&amp;rdquo; ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; In terms of vendors supplying third parties or analytics code (like Google Analytics) it&amp;rsquo;s actually the easiest way for them to distribute such snippets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  var url = &#39;http://ads.com/buyme?screen=&#39; + screen.width + &amp;quot;x&amp;quot; + screen.height;

  document.write(&#39;&amp;lt;script src=&amp;quot;&#39; + url + &#39;&amp;quot;&amp;gt;&amp;lt;/scr&#39; + &#39;ipt&amp;gt;&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It keeps the scripts small&lt;/li&gt;
&lt;li&gt;They don&amp;rsquo;t have to worry about overriding already established onload events or including the necessary abstraction to add onload events safely&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s extremely compatible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;document.write&lt;/code&gt; only works while the page is loading; If you call it after the page is done loading, it will overwrite the whole page.&lt;/p&gt;

&lt;p&gt;This effectively means you have to call it from an inline script block - And that will prevent the browser from processing parts of the page that follow. Scripts and Images will not be downloaded until the writing block is finished.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is reflow? What causes reflow? How could you reduce reflow?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; When you change size or position of an element in the page, all the elements after it has to change their position according to the changes you made. For example, if you change height on an element, all the elements under it has to move down in the page to accomodate a change in height. Hence, flow of the elements in the page is changed and this is called &lt;em&gt;reflow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Re-flows could be very expensive and it might have a performance hit specially in the smaller devices like phone. As it might causes changes in the portion (or whole) layout of the page.&lt;/p&gt;

&lt;p&gt;The following cases causes reflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change layout (geometry of the page)&lt;/li&gt;
&lt;li&gt;resize the window&lt;/li&gt;
&lt;li&gt;change height/width of any element&lt;/li&gt;
&lt;li&gt;changing font&lt;/li&gt;
&lt;li&gt;change font size&lt;/li&gt;
&lt;li&gt;move DOM element (animation)&lt;/li&gt;
&lt;li&gt;adding or removing stylesheet&lt;/li&gt;
&lt;li&gt;calculating offset height or offset width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: none;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to avoid: To avoid reflow, try to avoid doing things in the above list and some more in the below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;avoid setting multiple inline style&lt;/li&gt;
&lt;li&gt;apply animation to the elements that are positioned fixed or absolute&lt;/li&gt;
&lt;li&gt;avoid tables for layout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More: &lt;a href=&#34;http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#animations&#34;&gt;reflow and repaint: css performance makes your JS slow&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is repaint and when does this happen?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; repaint happens when you change the look of an element without changing the size and shape. This doesn&amp;rsquo;t cause reflow as geometry of the element didn&amp;rsquo;t changed.&lt;/p&gt;

&lt;p&gt;How it happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change background color&lt;/li&gt;
&lt;li&gt;change text color&lt;/li&gt;
&lt;li&gt;visibility hidden&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attribute does in a script tag?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; HTML parser will ignore &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; keyword for inline script (script that does not have a src attribute).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with &lt;code&gt;&amp;lt;script async src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; browser downloads the file during HTML parsing and will pause the HTML parser to execute it when it has finished downloading&lt;/li&gt;
&lt;li&gt;with &lt;code&gt;&amp;lt;script defer src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; browser downloads the file during HTML parsing and will only execute it after the parser has completed. defer scripts are also guarenteed to execute in the order that they appear in the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;1.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;2.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;//1
&amp;lt;script src=&amp;quot;big.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;small.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

//2
&amp;lt;script async src=&amp;quot;big.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script async src=&amp;quot;small.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

//3
&amp;lt;script defer src=&amp;quot;big.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script defer src=&amp;quot;small.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;events&#34;&gt;Events&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What is event bubble? How does event flows (event phases)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; to understand event bubble, you have to understand what happen when you click on anything on a page.&lt;/p&gt;

&lt;p&gt;The event flow model specified by DOM Level 2 Events has three phases to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capture: When you clicked, browser knows a click event occurred. It starts from the &lt;code&gt;window&lt;/code&gt; (lowest level/root of your website), then goes to &lt;code&gt;document&lt;/code&gt;, then &lt;code&gt;html&lt;/code&gt; root tag, then &lt;code&gt;body&lt;/code&gt;, then &lt;code&gt;table&lt;/code&gt;&amp;hellip; its trying to reach the the as lowest level of element as possible. This is called capture phase (phase -1).&lt;/li&gt;
&lt;li&gt;Target: When browser reach the lowest level of element. In this case, you have clicked on a table cell (table data) hence target would be &lt;code&gt;td&lt;/code&gt; tag. Then browser checks whether you have any click handler attached to this element. If there is any, browser executes that click hander. This is called target phase (phase -2).
&lt;code&gt;Bubbling&lt;/code&gt;: After firing click hander attached to &lt;code&gt;td&lt;/code&gt;, browser walks toward root. One level upward and check whether there is any click handler attached with table row &lt;code&gt;tr&lt;/code&gt; element. If there is any it will execute that. Then it goes to &lt;code&gt;tbody&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;. In this stage its moving upward and this is called event bubbling or bubbling phase (phase-3).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Event handlers with &lt;code&gt;on&amp;lt;eventName&amp;gt;&lt;/code&gt; doesn&amp;rsquo;t know anything about capture phase.&lt;/p&gt;

&lt;p&gt;To capture on &lt;code&gt;capture&lt;/code&gt; phase need to &lt;code&gt;addEventListener(&amp;lt;eventName&amp;gt;, &amp;lt;cb&amp;gt;, true)&lt;/code&gt;, otherwise it will work by bubble phase.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explain event delegation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Event delegation allows you to avoid adding event listeners to specific nodes, instead, the event listener is added to one parent. That event listener analyzes bubbled events to find a match on child elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that we have a parent UL element with several child elements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul id=&amp;quot;parent-list&amp;quot;&amp;gt;
  &amp;lt;li id=&amp;quot;post-1&amp;quot;&amp;gt;Item 1&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-2&amp;quot;&amp;gt;Item 2&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-3&amp;quot;&amp;gt;Item 3&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-4&amp;quot;&amp;gt;Item 4&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-...&amp;quot;&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-1001&amp;quot;&amp;gt;Item 1001&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s also say that something needs to happen when each child element is clicked.  You could add a separate event listener to each individual &lt;code&gt;LI&lt;/code&gt; element, but what if &lt;code&gt;LI&lt;/code&gt; elements are frequently added and removed from the list?  Adding and removing event listeners would be a nightmare, especially if addition and removal code is in different places within your app. The better solution is to add an event listener to the parent UL element.&lt;/p&gt;

&lt;p&gt;When the event bubbles up to the &lt;code&gt;UL&lt;/code&gt; element, you check the event object&amp;rsquo;s target property to gain a reference to the actual clicked node:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Get the element, add a click listener...
document.getElementById(&amp;quot;parent-list&amp;quot;).addEventListener(&amp;quot;click&amp;quot;, function(e) {
  // e.target is the clicked element!
  // If it was a list item
  if(e.target &amp;amp;&amp;amp; e.target.nodeName == &amp;quot;LI&amp;quot;) {
    // List item found!  Output the ID!
    console.log(&amp;quot;List item &amp;quot;, e.target.id.replace(&amp;quot;post-&amp;quot;, &amp;quot;&amp;quot;), &amp;quot; was clicked!&amp;quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Can you remove an event handler from an element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;target.removeEventListener(&#39;click&#39;, &amp;lt;handledName&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you prevent a click on an anchor from going to the link? How could you stop further propagation of an event?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;preventDefault()&lt;/code&gt; inside event handler. However, this doesn&amp;rsquo;t stop further propagation. To stop it &lt;code&gt;event.stopPropagation();&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to capture all click in a page?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You can leverage event bubble to get all the clicks. As all the clicks will be bubbled up to the body.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.querySelector(&#39;body&#39;).addEventListener(&#39;click&#39;, function(e){
  console.log(&#39;body clicked&#39;, e.target);
});

//or
window.onclick = function(e){
  console.log(&#39;someone clicked&#39;, e.target)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ajax&#34;&gt;AJAX&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Explain AJAX in as much detail as possible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; AJAX is a way to communicate to the server without reloading the page. Once we receive the data from the server, we can then manipulate those data and display unto certain parts of the page, this is why we don’t need to reload the page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; AJAX stands for Asynchronous JavaScript and XML. In a nutshell, it is the use of the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object to communicate with server-side scripts. It can send as well as receive information in a variety of formats, including JSON, XML, HTML, and even text files. AJAX’s most appealing characteristic, however, is its &amp;ldquo;asynchronous&amp;rdquo; nature, which means it can do all of this without having to refresh the page&lt;/p&gt;

&lt;p&gt;Typical example for GET request with &lt;code&gt;XMLHttpRequest&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/qetr1ck-op/f52380392d7f0afb4835f8257a483ff7.js&#34;&gt;&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;What is COMET? How to achieve this technique?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; he AJAX - is a &amp;ldquo;request sent - get the result,&amp;rdquo; and the COMET - is &amp;ldquo;a continuous channel through which the data come.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comet is a Web application model that enables web servers to send data to the client without having to explicitly request it.&lt;/p&gt;

&lt;p&gt;Examples COMET-app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chat - man sitting and watching what others write. At the same time new messages arrive &amp;ldquo;on their own&amp;rdquo;, he should not have to press a button to refresh the chat window.&lt;/li&gt;
&lt;li&gt;Auction - a person looks at the screen and sees renewed the current bid for the goods.&lt;/li&gt;
&lt;li&gt;Editing interface - when one editor is beginning to change the document, others see the information about it. Perhaps, and collaborative editing, editors when they see each other&amp;rsquo;s changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;COMET techniques overview:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polling: a simple method based on periodically polling the server.&lt;/li&gt;
&lt;li&gt;Long poll: A method by which a client opens a connection and doesn&amp;rsquo;t close it up until the event occurs. In the event occurs, the client receives a notification and then opens a connection again.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Infinite&amp;rdquo; iframe: The method is based on html document download features. It creates an invisible iframe, which reads &amp;ldquo;infinite&amp;rdquo; file. When an event occurs, a new row is added to the file. The string can be a javascript snippet.&lt;/li&gt;
&lt;li&gt;HTML5 WebSockets: specification defines an API establishing &amp;ldquo;socket&amp;rdquo; connections between a web browser and a server. In plain words: There is an persistent connection between the client and the server and both parties can start sending data at any time.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;How to work with HTTP headers in AJAX. Do we have a restriction?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are three methods &lt;code&gt;setRequestHeader(name, value)&lt;/code&gt;, &lt;code&gt;getResponseHeader(name)&lt;/code&gt;, &lt;code&gt;getAllResponseHeaders()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Send JSON Object with Ajax?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Use &lt;code&gt;xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;)&lt;/code&gt; and &lt;code&gt;JSON.stringify(&amp;lt;object&amp;gt;)&lt;/code&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var jsonRequest = &amp;quot;json_name=&amp;quot; + JSON.stringify({name:&amp;quot;John&amp;quot;, time:&amp;quot;2pm&amp;quot;});
var xhr = new XMLHttpRequest();

xhr.open(&amp;quot;POST&amp;quot;, &amp;quot;/submit&amp;quot;);
xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;);
xhr.send(json_upload);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Sending POST data using an XMLHttpRequest using different encoding patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; With &lt;code&gt;XMLHttpRequest&lt;/code&gt; we don&amp;rsquo;t need explicitly set header with &lt;code&gt;Content-type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In spec are 3 types for submitting body entity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var xhr = new XMLHttpRequest();

var body = &#39;name=&#39; + encodeURIComponent(name) +
  &#39;&amp;amp;surname=&#39; + encodeURIComponent(surname);

xhr.open(&amp;quot;POST&amp;quot;, &#39;/submit&#39;, true)
xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)

xhr.onreadystatechange = ...;

xhr.send(body);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;multipart/form-data&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form name=&amp;quot;person&amp;quot;&amp;gt;
  &amp;lt;input name=&amp;quot;name&amp;quot; value=&amp;quot;John&amp;quot;&amp;gt;
  &amp;lt;input name=&amp;quot;surname&amp;quot; value=&amp;quot;Doe&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;script&amp;gt;
  var formData = new FormData(document.forms.person);

  formData.append(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);

  var xhr = new XMLHttpRequest();
  xhr.open(&amp;quot;POST&amp;quot;, &amp;quot;/url&amp;quot;);
  xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;multipart/form-data&#39;)
  xhr.send(formData);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;What is CORS? What techniques you know to avoid it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;es6&#34;&gt;ES6&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When standard was finalized?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ES6 specification was finalized in June 2015, (hence ES2015).&lt;/p&gt;

&lt;p&gt;Future versions of the specification will follow the ES[YYYY] pattern, e.g ES2016 for ES7.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tooling&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get ES6 working today, you need a JavaScript-to-JavaScript transpiler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They allow you to compile code in the latest version into older versions of the language&lt;/li&gt;
&lt;li&gt;As browser support gets better, we’ll transpile ES2016 and ES2017 into ES6 and beyond&lt;/li&gt;
&lt;li&gt;We’ll need better source mapping functionality&lt;/li&gt;
&lt;li&gt;They’re the most reliable way to run ES6 source code in production today (although browsers get ES5)&lt;/li&gt;
&lt;li&gt;
Use &lt;code&gt;babel&lt;/code&gt; to transpile ES6 into ES5 for static build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;babelify&lt;/code&gt; to incorporate babel into your &lt;code&gt;Gulp&lt;/code&gt;, &lt;code&gt;Grunt&lt;/code&gt;, or &lt;code&gt;npm&lt;/code&gt; run build process&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Node.js&lt;/code&gt; v4.x.x or greater as they have decent ES6 support baked in, thanks to v8&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;babel-node&lt;/code&gt; with any version of node, as it transpiles modules into ES5&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Assignment Destructing, the Rapid Table&lt;/p&gt;

&lt;p&gt;Spread Operator and Rest Parameters&lt;/p&gt;

&lt;p&gt;Arrow Functions&lt;/p&gt;

&lt;p&gt;Template Literals&lt;/p&gt;

&lt;p&gt;Object Literals&lt;/p&gt;

&lt;p&gt;Classes&lt;/p&gt;

&lt;p&gt;Let and Const&lt;/p&gt;

&lt;p&gt;Symbols&lt;/p&gt;

&lt;p&gt;Iterators&lt;/p&gt;

&lt;p&gt;Generators&lt;/p&gt;

&lt;p&gt;Promises&lt;/p&gt;

&lt;p&gt;Maps / WeakMaps&lt;/p&gt;

&lt;p&gt;Sets / WeakSets&lt;/p&gt;

&lt;p&gt;Modules&lt;/p&gt;

&lt;p&gt;Proxy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TODO with &lt;a href=&#34;https://ponyfoo.com/articles/es6&#34;&gt;https://ponyfoo.com/articles/es6&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;javascript-advance&#34;&gt;JavaScript: advance&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;What do you think of AMD vs CommonJS and ES6 modules?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For many years JS had a single widely accepted module format, which is to say, there was none. Everything was a global variable petulantly hanging off the window object.&lt;/p&gt;

&lt;p&gt;Dark Ages. Long ago an adhoc group formed to solve the global conflict. The fruits of this vigilante justice are known today as CommonJS. Multiple competing formats were proposed and implemented in the wild by these dashing radicals and two bright lights emerged with significant adherents: AMD and CJS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Asynchronous Module Design&lt;/em&gt; (AMD) accounts for the async nature of JS but some felt the aesthetics were harder to read with a wrapper function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CommonJS&lt;/em&gt; (CJS) is synchronous, thus blocking, but generally understood to be an easier read.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// this is an AMD module
define(function () {
  return something
})

// and this is CommonJS
module.exports = something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript vendors and concerned citizens began formally standardizing modules into the language proper. After years of thrashing, a standard module format has finally emerged with ES6.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is asynchronous programming, and why is it important in JS? Non-blocking I/O in JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Synchronous programming means that code is executed sequentially from top-to-bottom, blocking on long-running tasks such as network requests and disk I/O.&lt;/p&gt;

&lt;p&gt;Asynchronous programming means that the engine runs in an event loop. When a blocking operation is needed, the request is started, and the code keeps running without blocking for the result. When the response is ready, an interrupt is fired, which causes an event handler to be run, where the control flow continues. In this way, a single program thread can handle many concurrent operations.&lt;/p&gt;

&lt;p&gt;Node is asynchronous by default, meaning that the server works in much the same way, waiting in a loop for a network request, and accepting more incoming requests while the first one is being handled.&lt;/p&gt;

&lt;p&gt;In JavaScript, almost all I/O is non-blocking. This includes:
* Networking requests
* DB operations
* Disk reads and writes
* User interfaces are asynchronous by nature, and spend most of their time waiting for user input to interrupt the event loop and trigger event handlers&lt;/p&gt;

&lt;p&gt;The single thread of execution asks the runtime to perform an operation, providing a callback function and then moves on to do something else. When the operation has been completed, a message is enqueued along with the provided callback function. At some point in the future, the message is dequeued and the callback fired.&lt;/p&gt;

&lt;p&gt;Let’s compare two bits of code that make HTTP requests to &lt;code&gt;www.google.com&lt;/code&gt; and output the response to console with &lt;code&gt;Node.js&lt;/code&gt; and the &lt;code&gt;Request&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;request(&#39;http://www.google.com&#39;, function(error, response, body) {
  console.log(body);
});

console.log(&#39;Done!&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;The request function is executed, passing an anonymous function as a callback to execute when a response is available sometime in the future.&lt;/li&gt;
&lt;li&gt;“Done!” is immediately output to the console&lt;/li&gt;
&lt;li&gt;Sometime in the future, the response comes back and our callback is executed, outputting its body to the console&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Do request two parallel request to &lt;code&gt;http://httpbin.org/ip&lt;/code&gt; and &lt;code&gt;http://httpbin.org/user-agent&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Promise.all([fetch(&#39;http://httpbin.org/ip&#39;), fetch(&#39;http://httpbin.org/user-agent&#39;)])
  .then(resps =&amp;gt; {
    return Promise.all([resps[0].json(), resps[1].json()])
  })
  .then((jsons) =&amp;gt; console.log(jsons))
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Resolve promises one after another (i.e. in sequence)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function runSerial() {
    return Promise.resolve()
        .then(task1)
        .then(task2)
        .then(() =&amp;gt; {
            console.log(&amp;quot; ---- done ----&amp;quot;);
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With dynamic length of tasks&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let urls = [&#39;guest.json&#39;, &#39;user.json&#39;];
let results = [];
let chain = Promise.resolve();

urls.forEach(function(url) {
  chain = chain
    .then(() =&amp;gt; httpGet(url))
    .then((result) =&amp;gt; {
      results.push(result);
    });
});

chain.then(() =&amp;gt; {
  console.log(results);
});

// with reduce
urls
  .reduce((promise, url) =&amp;gt; {
    return promise.then(() =&amp;gt; httpGet(url)).then((json) =&amp;gt; results.push(json));
  }, Promise.resolve())
  .then(() =&amp;gt; {
    console.log(results);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The Event Loop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The decoupling of the caller from the response allows for the JavaScript runtime to do other things while waiting for your asynchronous operation to complete and their callbacks to fire. But where in memory do these callbacks live – and in what order are they executed? What causes them to be called?&lt;/p&gt;

&lt;p&gt;JavaScript runtimes contain a message queue which stores a list of messages to be processed and their associated callback functions. These messages are queued in response to external events (such as a mouse being clicked or receiving the response to an HTTP request) given a callback function has been provided. If, for example a user were to click a button and no callback function was provided – no message would have been enqueued.&lt;/p&gt;

&lt;p&gt;In a loop, the queue is polled for the next message (each poll referred to as a “tick”) and when a message is encountered, the callback for that message is executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.appsdev.is.ed.ac.uk/blog/wp-content/uploads/2015/03/Event-loop.png&#34; alt=&#34;Event Loop&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Macrotasks and Microtasks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take this little bit of JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;script start&#39;)

const interval = setInterval(() =&amp;gt; {  
  console.log(&#39;setInterval&#39;)
}, 0)

setTimeout(() =&amp;gt; {  
  console.log(&#39;setTimeout 1&#39;)
  Promise.resolve().then(() =&amp;gt; {
    console.log(&#39;promise 3&#39;)
  }).then(() =&amp;gt; {
    console.log(&#39;promise 4&#39;)
  }).then(() =&amp;gt; {
    setTimeout(() =&amp;gt; {
      console.log(&#39;setTimeout 2&#39;)
      Promise.resolve().then(() =&amp;gt; {
        console.log(&#39;promise 5&#39;)
      }).then(() =&amp;gt; {
        console.log(&#39;promise 6&#39;)
      }).then(() =&amp;gt; {
        clearInterval(interval)
      })
    }, 0)
  })
}, 0)

Promise.resolve().then(() =&amp;gt; {  
  console.log(&#39;promise 1&#39;)
}).then(() =&amp;gt; {
  console.log(&#39;promise 2&#39;)
})
console.log(&#39;script end&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script start
script end
promise 1  
promise 2  
setInterval  
setTimeout 1  
promise 3  
promise 4  
setInterval  
setTimeout 2  
setInterval  
promise 5  
promise 6  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand this you need to know how the event loop handles macrotasks and microtasks.&lt;/p&gt;

&lt;p&gt;macrotasks: &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;, I/O, UI rendering
microtasks: &lt;code&gt;process.nextTick&lt;/code&gt;, &lt;code&gt;Promises&lt;/code&gt;, &lt;code&gt;Object.observe&lt;/code&gt;, &lt;code&gt;MutationObserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&#34;&gt;A great post&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &amp;ldquo;classical inheritance&amp;rdquo; and &amp;ldquo;prototypal inheritance&amp;rdquo;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Class Inheritance: instances inherit from classes (like a blueprint — a description of the class), and create sub-class relationships: hierarchical class taxonomies. Instances are typically instantiated via constructor functions with the &lt;code&gt;new&lt;/code&gt; keyword. Class inheritance may or may not use the &lt;code&gt;class&lt;/code&gt; keyword from ES6.&lt;/p&gt;

&lt;p&gt;Prototypal Inheritance: instances inherit directly from other objects. Instances are typically instantiated via factory functions or &lt;code&gt;Object.create()&lt;/code&gt;. Instances may be composed from many different objects, allowing for easy selective inheritance.&lt;/p&gt;

&lt;p&gt;Good to hear:
* Classes: create tight coupling or hierarchies/taxonomies.
* Prototypes: mentions of concatenative inheritance, prototype delegation, functional inheritance, object composition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the pros and cons of functional programming vs object-oriented programming?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP Pros: It’s easy to understand the basic concept of objects and easy to interpret the meaning of method calls. OOP tends to use an imperative style rather than a declarative style, which reads like a straight-forward set of instructions for the computer to follow.&lt;/p&gt;

&lt;p&gt;OOP Cons: OOP Typically depends on shared state. Objects and behaviors are typically tacked together on the same entity, which may be accessed at random by any number of functions with non-deterministic order, which may lead to undesirable behavior such as race conditions.&lt;/p&gt;

&lt;p&gt;FP Pros: Using the functional paradigm, programmers avoid any shared state or side-effects, which eliminates bugs caused by multiple functions competing for the same resources. With features such as the availability of point-free style (aka tacit programming), functions tend to be radically simplified and easily recomposed for more generally reusable code compared to OOP.&lt;/p&gt;

&lt;p&gt;FP Cons: Over exploitation of FP features such as point-free style and large compositions can potentially reduce readability because the resulting code is often more abstractly specified, more terse, and less concrete.
More people are familiar with OO and imperative programming than functional programming, so even common idioms in functional programming can be confusing to new team members.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What does &amp;ldquo;favor object composition over class inheritance&amp;rdquo; mean?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a quote from &amp;ldquo;Design Patterns: Elements of Reusable Object-Oriented Software&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Object composition is a way to combine simple objects or data types into more complex ones. It means that code reuse should be achieved by assembling smaller units of functionality into new objects instead of inheriting from classes and creating object taxonomies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { a, b, c } from &#39;components&#39;;
composedObject = Object.assign({}, a, b, c);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Good to hear:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid class hierarchies.&lt;/li&gt;
&lt;li&gt;Avoid brittle base class problem.&lt;/li&gt;
&lt;li&gt;Avoid tight coupling.&lt;/li&gt;
&lt;li&gt;Avoid rigid taxonomy (forced is-a relationships that are eventually wrong for new use cases).&lt;/li&gt;
&lt;li&gt;Avoid the gorilla banana problem (“what you wanted was a banana, what you got was a gorilla holding the banana, and the entire jungle”).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What are two-way data binding and one-way data flow, and how are they different?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two way data binding means that UI fields are bound to model data dynamically such that when a UI field changes, the model data changes with it and vice-versa.&lt;/p&gt;

&lt;p&gt;One way data flow means that the model is the single source of truth. Changes in the UI trigger messages that signal user intent to the model (or “store” in React). Only the model has the access to change the app’s state. The effect is that data always flows in a single direction, which makes it easier to understand.&lt;/p&gt;

&lt;p&gt;One way data flows are deterministic, whereas two-way binding can cause side-effects which are harder to follow and understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good to hear:&lt;/strong&gt;
React is the new canonical example of one-way data flow, so mentions of React are a good signal. Cycle.js is another popular implementation of uni-directional data flow.
Angular is a popular framework which uses two-way binding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the pros and cons of monolithic vs microservice architectures?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A monolithic architecture means that your app is written as one cohesive unit of code whose components are designed to work together, sharing the same memory space and resources.&lt;/p&gt;

&lt;p&gt;A microservice architecture means that your app is made up of lots of smaller, independent applications capable of running in their own memory space and scaling independently from each other across potentially many separate machines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good to hear:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Monolithic Pros: The major advantage of the monolithic architecture is that most apps typically have a large number of cross-cutting concerns, such as logging, rate limiting, and security features such audit trails and DOS protection.&lt;/p&gt;

&lt;p&gt;When everything is running through the same app, it’s easy to hook up components to those cross-cutting concerns.&lt;/p&gt;

&lt;p&gt;Monolithic cons: Monolithic app services tend to get tightly coupled and entangled as the application evolves, making it difficult to isolate services for purposes such as independent scaling or code maintainability.&lt;/p&gt;

&lt;p&gt;Monolithic architectures are also much harder to understand, because there may be dependencies, side-effects, and magic which are not obvious when you’re looking at a particular service or controller.&lt;/p&gt;

&lt;p&gt;Microservice pros: Microservice architectures are typically better organized, since each microservice has a very specific job, and is not concerned with the jobs of other components. Decoupled services are also easier to recompose and reconfigure to serve the purposes of different apps (for example, serving both the web clients and public API).&lt;/p&gt;

&lt;p&gt;They can also have performance advantages depending on how they’re organized because it’s possible to isolate hot services and scale them independent of the rest of the app.&lt;/p&gt;

&lt;p&gt;Microservice cons: As you’re building a new microservice architecture, you’re likely to discover lots of cross-cutting concerns that you did not anticipate at design time. A monolithic app could establish shared magic helpers or middleware to handle such cross-cutting concerns without much effort.&lt;/p&gt;

&lt;h2 id=&#34;markup&#34;&gt;Markup&lt;/h2&gt;

&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What is doctype? Why do u need it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;doctype&lt;/code&gt; is an instruction to the browser to inform about the version of html document and how browser should render it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It ensures how element should be displayed on the page by most of the browser. And it also makes browser&amp;rsquo;s life easier. otherwise, browser will guess and will go to quirks mode. Moreover, &lt;code&gt;doctype&lt;/code&gt; is required to validate markup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Difference between standard/strict mode and quirks mode?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; quirks mode in browser allows u to render page for as old browsers. This is for backward compatibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the use of &lt;code&gt;data-&lt;/code&gt; attribute?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; allow you to store extra information/data in the DOM and allows to write valid html with embedded private data. You can easily access data attribute by using JS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;myDiv&amp;quot; data-user=&amp;quot;jsDude&amp;quot; data-list-size=&amp;quot;5&amp;quot; data-maxage=&amp;quot;180&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &lt;code&gt;span&lt;/code&gt; and &lt;code&gt;div&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;div&lt;/code&gt; is a block element, &lt;code&gt;span&lt;/code&gt; is inline.&lt;/p&gt;

&lt;p&gt;This means that to use them semantically, divs should be used to wrap sections of a document, while spans should be used to wrap small portions of text, images, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When should you use section, div or article?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; To decide which of these three elements is appropriate, choose the first suitable option:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Would the enclosed content would make sense on it’s own in a feed reader? If so use &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Is the enclosed content related? If so use &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally if there’s no semantic relationship use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &amp;ldquo;Semantic HTML?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Semantic HTML is a coding style where the tags embody what the text is meant to convey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Semantic HTML, tags like &lt;code&gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&lt;/code&gt; for bold, and &lt;code&gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; for italic should not be used, reason being they just represent formatting, and provide no indication of meaning or structure. The semantically correct thing to do is use &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;. These tags will have the same bold and italic effects, while demonstrating meaning and structure (emphasis in this case).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are some new HTML5 markup elements?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://www.w3.org/TR/html-markup/bdi.html#bdi&#34;&gt;several&lt;/a&gt;: &lt;article&gt;, &lt;aside&gt;, &lt;bdi&gt;, &lt;command&gt;, &lt;details&gt;, &lt;figure&gt;, &lt;figcaption&gt;, &lt;summary&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;hgroup&gt;, &lt;mark&gt;, &lt;meter&gt;, &lt;nav&gt;, &lt;progress&gt;, &lt;ruby&gt;, &lt;rt&gt;, &lt;section&gt;, &lt;time&gt;, and &lt;wpr&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the new media-related elements in HTML5?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML5 has strong support for media. There are now special &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags. There are additional A/V support tags as well: &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; is a container for 3rd party applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &lt;code&gt;SVG&lt;/code&gt; and &lt;code&gt;Canvas&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SVG&lt;/code&gt; is a document format for scalable vector graphics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Canvas&lt;/code&gt; is a javascript API for drawing vector graphics to a bitmap of a specific size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.&lt;/p&gt;

&lt;p&gt;With SVG you can view, save and edit the file in many different tools.&lt;/p&gt;

&lt;p&gt;In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.&lt;/p&gt;

&lt;p&gt;Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.&lt;/p&gt;

&lt;p&gt;Canvas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pixel based&lt;/li&gt;
&lt;li&gt;Single HTML element.(Inspect element in Developer tool. You can see only canvas tag)&lt;/li&gt;
&lt;li&gt;Modified through script only&lt;/li&gt;
&lt;li&gt;Event model/user interaction is granular (x,y)&lt;/li&gt;
&lt;li&gt;Performance is better with smaller surface, a larger number of objects (&amp;gt;10k), or both&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SVG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shape based&lt;/li&gt;
&lt;li&gt;Multiple graphical elements, which become part of the SVG DOM&lt;/li&gt;
&lt;li&gt;Modified through script and CSS&lt;/li&gt;
&lt;li&gt;Event model/user interaction is abstracted (rect, path)&lt;/li&gt;
&lt;li&gt;Performance is better with smaller number of objects (&amp;lt;10k), a larger surface, or both&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Describe the difference between &lt;code&gt;cookies&lt;/code&gt;, &lt;code&gt;sessionStorage&lt;/code&gt;, and &lt;code&gt;localStorage&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;localStorage&lt;/code&gt;, &lt;code&gt;sessionStorage&lt;/code&gt; and &lt;code&gt;cookies&lt;/code&gt; are all client storage solutions.&lt;/p&gt;

&lt;p&gt;Cookies are small text files that websites place in a browser for tracking or login purposes. Meanwhile, &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; are new objects, both of which are storage specifications but vary in scope and duration. Of the two, &lt;code&gt;localStorage&lt;/code&gt; is permanent and website-specific whereas &lt;code&gt;sessionStorage&lt;/code&gt; only lasts as long as the duration of the longest open tab.&lt;/p&gt;

&lt;p&gt;You can save to &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; only primitives, for object you need you use &lt;code&gt;JSON.stringify1&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;

&lt;h2 id=&#34;general-website-optimization-questions&#34;&gt;General Website Optimization Questions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;How do you optimize a website’s assets?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are a &lt;a href=&#34;https://www.sitepoint.com/web-site-optimization-steps/&#34;&gt;number of answers&lt;/a&gt; to this question: File concatenation, file compression, CDN Hosting, offloading assets, re-organizing and refining code, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are ways to reduce page load time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Again there are &lt;a href=&#34;https://blog.crazyegg.com/2013/12/11/speed-up-your-website/&#34;&gt;many answers&lt;/a&gt; here: Reduce image sizes, remove unnecessary widgets, HTTP compression, put CSS at the top and script references at the bottom or in external files, reduce lookups, minimize redirects, caching, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What kind of things must you be wary of when design or developing for multilingual sites?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Another problem with &lt;a href=&#34;https://www.nomensa.com/blog/2010/7-tips-for-multi-lingual-website-accessibility&#34;&gt;many solutions&lt;/a&gt;: setting the default language, using Unicode encoding, using the &lt;code&gt;lang&lt;/code&gt; attribute, being aware of standard font sizes and text direction, and language word length (may affect layout).&lt;/p&gt;

&lt;h1 id=&#34;technologies&#34;&gt;Technologies&lt;/h1&gt;

&lt;h2 id=&#34;js-framework&#34;&gt;JS Framework&lt;/h2&gt;

&lt;h3 id=&#34;angularjs&#34;&gt;AngularJS&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;List at least three ways to communicate between modules of your application using core AngularJS functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are at least three idiomatic way to achieve this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using services&lt;/li&gt;
&lt;li&gt;Using events&lt;/li&gt;
&lt;li&gt;Directly between controllers, using &lt;code&gt;ControllerAs&lt;/code&gt;, or other forms of inheritance&lt;/li&gt;
&lt;li&gt;By assigning models on &lt;code&gt;$rootScope&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Directly between controllers, using &lt;code&gt;$parent&lt;/code&gt;, &lt;code&gt;$$childHead&lt;/code&gt;, &lt;code&gt;$$nextSibling&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Which means of communication between modules of your application are easily testable?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The big deal is in DI pattern.&lt;/p&gt;

&lt;p&gt;Using a &lt;code&gt;service&lt;/code&gt; is definitely easy to test. Services are injected, and in a test either a real &lt;code&gt;service&lt;/code&gt; can be used or it can be mocked.&lt;/p&gt;

&lt;p&gt;Events can be tested. In unit testing controllers, they usually are instantiated. For testing events on &lt;code&gt;$rootScope&lt;/code&gt;, it must be injected into the test.&lt;/p&gt;

&lt;p&gt;For testing direct &lt;code&gt;communication&lt;/code&gt; between &lt;code&gt;controller&lt;/code&gt;s, the expected results should probably be mocked. Otherwise, controllers would need to be manually instantiated to have the right context.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most popular e2e testing tool for AngularJS is Protractor. Describe how e2e testing of AngularJS applications work?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The e2e tests are executed against a running app, that is a fully initialized system. They most often spawn a browser instance and involve the actual input of commands through the user interface. The written code is evaluated by an automation program, such as a Selenium server (webdriver). That program sends commands to a browser instance, then evaluates the visible results and reports back to the user.&lt;/p&gt;

&lt;p&gt;The assertions are handled by another library, for Protractor (end-to-end) / Karma (unit tests) the default is Jasmine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the basic steps to unit test an AngularJS filter?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Inject the module that contains the filter.&lt;/li&gt;
&lt;li&gt;Provide any mocks that the filter relies on.&lt;/li&gt;
&lt;li&gt;Get an instance of the filter using $filter(&amp;lsquo;yourFilterName&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;Assert your expectations.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;describe(&#39;Filter: myFltr&#39;, function () {
  var myFltr;

  beforeEach(function () {
    // Load the filters&#39;s module
    module(&#39;myApp&#39;);

    // Provide any mocks needed
    module(function ($provide) {
      //$provide.value(&#39;Name&#39;, new MockName());
    });

    // Inject in angular constructs otherwise,
    // you would need to inject these into each test
    inject(function ($filter) {
      myFltr = $filter(&#39;myFltr&#39;);
    });
  });

  it(&#39;should exist&#39;, function () {
    expect(!!myFltr).toBe(true);
  });

  describe(&#39;when evaluating an expression&#39;, function () {
    it(&#39;should return the expected output&#39;, function () {
      var text = &#39;AngularJS&#39;;
      expect(myFltr(text)).toBe(&#39;my filter: &#39; + text);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When a scope is terminated, “destroy” events are fired. What are they used for, and why are there two?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first one is an AngularJS event, “$destroy” can be used by AngularJS scopes where they are accessible, such as in controllers or link functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;scope.$on(‘$destroy’, function () {
  // handle the destroy, i.e. clean up.
});

// in 1.5.x
$onDestroy() {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The jqLite / jQuery event is called whenever a node is removed, which may just happen without scope teardown:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;element.on(‘$destroy’, function () {
  // respectful jQuery plugins already have this handler.
  // angular.element(document.body).off(‘someCustomEvent’);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How do you reset a &lt;code&gt;$timeout&lt;/code&gt;, and disable a &lt;code&gt;$watch()&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The key to both is assigning the result of the function to a variable.&lt;/p&gt;

&lt;p&gt;To cleanup the timeout, just &lt;code&gt;.cancel()&lt;/code&gt; it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var customTimeout = $timeout(function () {
  // arbitrary code
}, 55);

$timeout.cancel(customTimeout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same applies to &lt;code&gt;$interval()&lt;/code&gt;. To disable a watch, just call it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var deregisterWatchFn = $rootScope.$watch(‘someGloballyAvailableProperty’, function (newVal) {
  if (newVal) {
    // we invoke that deregistration function, to disable the watch
    deregisterWatchFn();
    ...
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Name and describe the phases of a directive definition function execution, or describe how directives are instantiated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each directive undergoes something similar to a life cycle as AngularJS compiles and links the DOM. The directive lifecycle begins and ends within the AngularJS bootstrapping process, before the page is rendered.&lt;/p&gt;

&lt;p&gt;In a directive’s life cycle, there are four distinct functions that can execute if they are defined. Each enables the developer to control and customize the directive at different points of the life cycle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;compile&lt;/code&gt; function allows the directive to manipulate the DOM before it is compiled and linked thereby allowing it to add/remove/change directives, as well as, add/remove/change other DOM elements.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;controller&lt;/code&gt; function facilitates directive communication. Sibling and child directives can request the controller of their siblings and parents to communicate information.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;pre-link&lt;/code&gt; function allows for private &lt;code&gt;$scope&lt;/code&gt; manipulation before the &lt;code&gt;post-link&lt;/code&gt; process begins.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;post-link&lt;/code&gt; method is the primary workhorse method of the directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.directive(&amp;quot;directiveName&amp;quot;,function () {
  return {
    controller: function() {
      // controller code here...
    },
    compile: {
      // compile code here...
      return {
        pre: function() {
          // pre-link code here...
        },
        post: function() {
          // post-link code here...
        }
      };
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commonly, not all of the functions are needed. In most circumstances, developers will simply create a &lt;code&gt;controller&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; (which refers to &lt;code&gt;post-link&lt;/code&gt;) function following the pattern below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.directive(&amp;quot;directiveName&amp;quot;,function () {
  return {
    controller: function() {
      // controller code here...
    },

    link: function() {
      // post-link code here...
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More &lt;a href=&#34;https://www.toptal.com/angular-js/angular-js-demystifying-directives&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does interpolation, e.g. &lt;code&gt;{% raw %}{{ someModel }}{% endraw %}&lt;/code&gt;, actually works?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the compilation process the &lt;code&gt;compiler&lt;/code&gt; uses the &lt;code&gt;$interpolate&lt;/code&gt; service to see if text nodes and element attributes contain interpolation markup with embedded expressions.&lt;/p&gt;

&lt;p&gt;If that is the case, the compiler adds watches on the computed interpolation function, which will update the corresponding text nodes or attribute values as part of the normal digest cycle.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does the digest phase work?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a nutshell, on every digest cycle all scope models are compared against their previous values. That is dirty checking. If change is detected, the watches set on that model are fired. Then another digest cycle executes, and so on until all models are stable.&lt;/p&gt;

&lt;p&gt;As long as core directives are used, we don’t need to worry, but when external code changes models the digest cycle needs to be called manually. Usually to do that, &lt;code&gt;$apply()&lt;/code&gt;, &lt;code&gt;$digest()&lt;/code&gt;, &lt;code&gt;$timeout()&lt;/code&gt;, &lt;code&gt;$evalAsync()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;List a few ways to improve performance in an AngularJS app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first one can be enabled through the &lt;code&gt;$compileProvider&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.config(function ($compileProvider) {
  $compileProvider.debugInfoEnabled(false);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng-binding&lt;/code&gt; CSS class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$binding&lt;/code&gt; data property containing an array of the binding expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using one-time binding where possible. Those bindings are set, e.g. in &lt;code&gt;{ { ::someModel } }&lt;/code&gt; interpolations by prefixing the model with two colons. In such a case, no watch is set and the model is ignored during digest.&lt;/p&gt;

&lt;p&gt;Making $httpProvider use applyAsync:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myApp.config(function ($httpProvider) {
  $httpProvider.useApplyAsync(true);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! If the application now receives multiple &lt;code&gt;$http&lt;/code&gt; responses at around the same time, this is what happens (a bit simplified though):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The call’s promise is pushed into a queue&lt;/li&gt;
&lt;li&gt;An asynchronous &lt;code&gt;$apply&lt;/code&gt; is scheduled in case there’s no one scheduled yet, by telling the browser to execute &lt;code&gt;setTimeout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once timed out, the queue is flushed and the actual&lt;code&gt;$apply&lt;/code&gt; is triggered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;setTimeout()&lt;/code&gt; is called with a 0 delay which causes an actual delay of around 10 milliseconds depending on the browser. That means, if our three asynchronous calls return at around the same time (somewhere inside that particular timeout delay), they get resolve with a single &lt;code&gt;$digest&lt;/code&gt; cycle instead of three which speeds up our application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is $rootScope and how does it relate to $scope?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;$rootScope&lt;/code&gt; is the parent object of all &lt;code&gt;$scope&lt;/code&gt; Angular objects created in a web page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &amp;ldquo;ng-show&amp;rdquo;/&amp;ldquo;ng-hide&amp;rdquo; and &amp;ldquo;ng-if&amp;rdquo; directives?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;ng-show&lt;/code&gt;/&lt;code&gt;ng-hide&lt;/code&gt; will always insert the DOM element, but will display/hide it based on the condition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-if&lt;/code&gt; will not insert the DOM element until the condition is not fulfilled.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-if&lt;/code&gt; is better when we needed the DOM to be loaded conditionally, as it will help load page bit faster compared to &lt;code&gt;ng-show&lt;/code&gt;/&lt;code&gt;ng-hide&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where should we implement the DOM manipulation in AngularJS?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the directives. DOM Manipulations should not exist in controllers, services or anywhere else but in directives.&lt;/p&gt;

&lt;p&gt;Otherwise it&amp;rsquo;s:
* It is not reusable
* It is not testable
* It include css hard coded selectors dependencies&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is it a good or bad practice to use AngularJS together with jQuery?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jQuery takes a traditional imperative approach to manipulating the DOM. In an imperative approach, it is up to the programmer to express the individual steps leading up to the desired outcome. What do I mean by this? So if we want an action to occur when a user types say 150 characters into an input, in jQuery we would say, &amp;ldquo;every time the user hits a key, check how many characters are in the input, if it exceeds 150 characters, do the action.&amp;rdquo; Every step is addressed along the way.&lt;/p&gt;

&lt;p&gt;AngularJS however takes a declarative approach to DOM manipulation. Here instead of worrying about all of the step by step details regarding how to do the desired outcome, AngularJS abstracts that and allows you to just say what you want done, in this case, &amp;ldquo;AngularJS, when the state of the input is at 150 characters, do this.&amp;rdquo; We are just declaring what we want and AngularJS worries about the rest, taking care of everything for us.&lt;/p&gt;

&lt;p&gt;It might seem like I&amp;rsquo;m just splitting hairs here, but it&amp;rsquo;s really an important distinction. AngularJS wants you basing your actions around the data models you create. It&amp;rsquo;s how the entire framework works and how your applications will be structured.&lt;/p&gt;

&lt;p&gt;To simply begin writing side scripts in jQuery where you are plucking out elements and setting up side event listeners just goes against the AngularJS approach in my opinion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you were to migrate from Angular 1.4 to Angular 1.5, what is the main thing that would need refactoring?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Changing &lt;code&gt;.directive&lt;/code&gt; to &lt;code&gt;.component&lt;/code&gt; to adapt to the new Angular 1.5 components. More about &lt;a href=&#34;http://qetr1ck-op.github.io/2016/07/22/Exploring-AngularJS-1-5-component-method/&#34;&gt;.component approach&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lifecycle hooks in Angular 1.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$onInit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$postLink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$onChanges&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$onDestroy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More in &lt;a href=&#34;https://toddmotto.com/angular-1-5-lifecycle-hooks&#34;&gt;awesome post&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How would you specify that a scope variable should have one-time binding only?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By using &lt;code&gt;::model.property&lt;/code&gt; in front of it. This allows the check if the candidate is aware of the available variable bindings in AngularJS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between one-way binding and two-way binding?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One way binding implies that the scope variable in the html will be set to the first value its model is bound to (i.e. assigned to).&lt;/p&gt;

&lt;p&gt;Two way binding implies that the scope variable will change it’s value everytime its model is assigned to a different value&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the role of services in AngularJS and name any services made available by default?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Services are objects that provide separation of concerns to an AngularJS app.&lt;/li&gt;
&lt;li&gt;Services can be created using a factory method or a service method.&lt;/li&gt;
&lt;li&gt;Services are singleton components. All components of the application (into which the service is injected) will work with single instance of the service.&lt;/li&gt;
&lt;li&gt;Allows developing of business logic without depending on the View logic which will work with it.&lt;/li&gt;
&lt;li&gt;A typical service can be injected into another service or into an Controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Few of the inbuilt services in AngularJS are:
– the &lt;code&gt;$http&lt;/code&gt; service: The &lt;code&gt;$http&lt;/code&gt; service is a core Angular service that facilitates communication with the remote HTTP servers via the browser’s XMLHttpRequest object or via JSONP
– the &lt;code&gt;$log&lt;/code&gt; service: Simple service for logging. Default implementation safely writes the message into the browser’s console
– the &lt;code&gt;$anchorScroll&lt;/code&gt;: it scrolls to the element related to the specified hash or (if omitted) to the current value of &lt;code&gt;$location.hash()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are Providers and when to use them?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In Angular apps most of these objects are instantiated and wired together automatically by the &lt;code&gt;$injector&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$injector&lt;/code&gt; creates two types of objects, &lt;em&gt;services&lt;/em&gt; and &lt;em&gt;specialized objects&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Services are objects whose API is defined by the developer writing the service.&lt;/li&gt;
&lt;li&gt;Specialized objects conform to a specific Angular framework API. These objects are one of controllers, directives, filters or animations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The injector needs to know how to create these objects. You tell it by registering a &amp;ldquo;recipe&amp;rdquo; for creating your object with the injector. There are five recipe types.&lt;/p&gt;

&lt;p&gt;The most verbose, but also the most comprehensive one is a &lt;code&gt;Provider&lt;/code&gt; recipe. The remaining four recipe types — &lt;code&gt;Value&lt;/code&gt;, &lt;code&gt;Factory&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Constant&lt;/code&gt; — are just syntactic sugar on top of a provider recipe.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Provider&lt;/code&gt; recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe with the most abilities, but for most services it&amp;rsquo;s overkill.&lt;/p&gt;

&lt;p&gt;When to use?&lt;/p&gt;

&lt;p&gt;You should use the Provider recipe only when you want to expose an API for application-wide configuration that must be made before the application starts. This is usually interesting only for reusable services whose behavior might need to vary slightly between applications.&lt;/p&gt;

&lt;p&gt;The Provider recipe is syntactically defined as a custom type that implements a &lt;code&gt;$get&lt;/code&gt; method. This method is a factory function just like the one we use in the Factory recipe. In fact, if you define a Factory recipe, an empty Provider type with the $get method set to your factory function is automatically created under the hood.&lt;/p&gt;

&lt;p&gt;More in &lt;a href=&#34;https://docs.angularjs.org/guide/providers&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;fundamentals&#34;&gt;Fundamentals&lt;/h1&gt;

&lt;h2 id=&#34;data-structure-and-algorithm&#34;&gt;Data Structure and algorithm&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary search&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A binary search tree is a great place to store data in an ordered way to allow for an easy search for specific information.
It works by comparing the target value to the midpoint of the array; if they are not equal, the lower or upper half of the array is eliminated depending on the result and the search is repeated until the position of the target value is found.&lt;/p&gt;

&lt;p&gt;The basic algorithm, then, can be described as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If currentValue equals value, you’re done.&lt;/li&gt;
&lt;li&gt;If value is less than currentValue, go left. Go to step 1.&lt;/li&gt;
&lt;li&gt;If value is greater than currentValue, go right. Go to step 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Binary search is intuitively recursive; however, it can be done iteratively by keeping track of the bounds of the search with two pointers. Binary search is efficient for sorted arrays that are stored contiguously (close together) in memory, making &lt;code&gt;O(log n)&lt;/code&gt; comparisons, where &lt;code&gt;n&lt;/code&gt; is the number of elements in the array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function binarySearch(items, value){

    var startIndex  = 0,
        stopIndex   = items.length - 1,
        middle      = Math.floor((stopIndex + startIndex)/2);

    while(items[middle] != value &amp;amp;&amp;amp; startIndex &amp;lt; stopIndex){

        //adjust search area
        if (value &amp;lt; items[middle]){
            stopIndex = middle - 1;
        } else if (value &amp;gt; items[middle]){
            startIndex = middle + 1;
        }

        //recalculate middle
        middle = Math.floor((stopIndex + startIndex)/2);
    }

    //make sure it&#39;s the right value
    return (items[middle] != value) ? -1 : middle;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The fastest method to create unique items in array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With primitive values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Set([1, 2, 2, 1, 5]); // [1, 2, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Array.prototype.unique = function() {
    var o = {}, i, l = this.length, r = [];
    for(i=0; i&amp;lt;l;i+=1) o[this[i]] = this[i];
    for(i in o) r.push(o[i]);
    return r;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is somewhat classified  as “Hash Sorting Algorithm” where every item in the array is a hash value and a hash function inserts item into a bucket, replacing existing values in case of hash collision. As such, this can be applied to any programming language for faster sieving of very large arrays.&lt;/p&gt;

&lt;p&gt;This algorithm has a linear time complexity of &lt;code&gt;O(2n)&lt;/code&gt; in worst case scenario. This is way better than what we will observe for the classic method as described below.&lt;/p&gt;

&lt;p&gt;The classic (worst and most popular) method of finding unique items in an array runs two loops in a nested order to compare each element with rest of the elements. Consequently, the time complexity of the classic method to find the unique items in an array is around quadratic &lt;code&gt;O(n²)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = [], l = this.length;
  for(var i=0; i&amp;lt;l; i++) {
    for(var j=i+1; j&amp;lt;l; j++)
          if (this[i] === this[j]) j = ++i;
    a.push(this[i]);
  }
  return a;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The fastest method to find items in array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a classical hash table with complexity of &lt;code&gt;O(n)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var result = arr.reduce(function(map, obj) {
  map[obj.id] = obj;
  return map;
}, {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And search in the structure is &lt;code&gt;O(1)&lt;/code&gt;;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big-O Complexity Chart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://bigocheatsheet.com/&#34;&gt;An awesome cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.qwihvpqxq&#34;&gt;10 Interview Questions Every JavaScript Developer Should Know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Units of measurement: &#34;px&#34;, &#34;em&#34;, &#34;rem&#34; and other</title>
      <link>https://qetr1ck-op.github.io/blog/post/units-of-measurement-px-em-rem-and-other/</link>
      <pubDate>Wed, 11 Nov 2015 20:17:58 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/units-of-measurement-px-em-rem-and-other/</guid>
      <description>&lt;p&gt;I will try not only to write about variety of units, but also build a full picture - what and when better to choose.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;pixels-px&#34;&gt;Pixels: &amp;ldquo;px&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Pixel &lt;code&gt;px&lt;/code&gt; - is the most basic, absolute and final unit of measurement.&lt;/p&gt;

&lt;p&gt;The number of pixels on monitor is set in screen resolution configuration. A &lt;code&gt;px&lt;/code&gt; is such a one pixel on the screen. All values browser eventually translated into pixels.&lt;/p&gt;

&lt;p&gt;The main advantage &lt;code&gt;px&lt;/code&gt; is clarity.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;px&lt;/code&gt; are not relative and don&amp;rsquo;t allow to set relationships between other dimensions.&lt;/p&gt;

&lt;h1 id=&#34;relatively-to-font-size-em&#34;&gt;Relatively to font size: &amp;ldquo;em&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Measurement in &lt;code&gt;em&lt;/code&gt; are relative, they are defined by current context.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1em&lt;/code&gt; it&amp;rsquo;s current font size.&lt;/p&gt;

&lt;p&gt;Since the value of em is calculated to the current font size, the nested string will &lt;code&gt;1.5&lt;/code&gt; times larger than parent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div style=&amp;quot;font-size:1.5em&amp;quot;&amp;gt;
  My size is 1.5em
  &amp;lt;div style=&amp;quot;font-size:1.5em&amp;quot;&amp;gt;My size is parrentSize * 1.5&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;percentage&#34;&gt;Percentage, &amp;ldquo;%&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;%&lt;/code&gt; as the &lt;code&gt;em&lt;/code&gt; are relative to current context measurements but there are nuances.&lt;/p&gt;

&lt;p&gt;Is works different with these properties: &lt;code&gt;margin-left&lt;/code&gt;, &lt;code&gt;line-height&lt;/code&gt;, &lt;code&gt;width/height&lt;/code&gt; with &lt;code&gt;position: fixed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div style=&amp;quot;font-size:150%&amp;quot;&amp;gt;
  My size is 1.5em
  &amp;lt;div style=&amp;quot;font-size:150%&amp;quot;&amp;gt;My size is parrentSize + 150%&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mixture-of-px-and-em-rem&#34;&gt;Mixture of &amp;ldquo;px&amp;rdquo; and &amp;ldquo;em&amp;rdquo;: &amp;ldquo;rem&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Measure &lt;code&gt;rem&lt;/code&gt; defines font size relatively to &lt;code&gt;html&lt;/code&gt; element size.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;bVzVaQ&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/bVzVaQ/&#39;&gt;em vs rem&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;relatively-to-screen-size-vw-vh-vmin-vmax&#34;&gt;Relatively to screen size: vw, vh, vmin, vmax&lt;/h1&gt;

&lt;p&gt;The principles behind &lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt; are to represent percentage of browser viewport &lt;code&gt;width&lt;/code&gt; / &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1vw&lt;/code&gt; = &lt;code&gt;1/100&lt;/code&gt; of the current viewport width, i.e. &lt;code&gt;1%&lt;/code&gt; of width.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;10vh&lt;/code&gt; = &lt;code&gt;10/100&lt;/code&gt; of the current viewport height, i.e. &lt;code&gt;10%&lt;/code&gt; of height.&lt;/p&gt;

&lt;p&gt;After first glance, it seems that &lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt; are redundant, because we already have &lt;code&gt;%&lt;/code&gt; measurement system:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;div {
  width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Limitation of percentage measurement system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;viewport height is always hard to measure, as the height of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; depends on content, not on the dimension of the browser window&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;body measurement cannot be applied to the &lt;code&gt;font-size&lt;/code&gt;, because it relates to parent container, not to the dimension of viewport&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example, backgrounds and &lt;code&gt;vh&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;ZbdWvp&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/ZbdWvp/&#39;&gt;Backgrounds and the vh unit &lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Example, backgrounds and &lt;code&gt;vw&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;xwoVPX&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/xwoVPX/&#39;&gt;Backgrounds and the vw unit &lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Image, &lt;code&gt;vw&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;bVPpaX&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/bVPpaX/&#39;&gt;Images and vw width &lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Respectively are related to the maximum or minimum of those widths and heights, depending on which is smaller and larger. For example, if the browser was set to &lt;code&gt;1100px&lt;/code&gt; wide and the &lt;code&gt;700px&lt;/code&gt; tall, &lt;code&gt;1vmin&lt;/code&gt; would be &lt;code&gt;7px&lt;/code&gt; and &lt;code&gt;1vmax&lt;/code&gt; would be &lt;code&gt;11px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1vmin&lt;/code&gt; = &lt;code&gt;1vw&lt;/code&gt; or &lt;code&gt;1vh&lt;/code&gt;, whichever is smaller
&lt;code&gt;1vmax&lt;/code&gt; = &lt;code&gt;1vw&lt;/code&gt; or &lt;code&gt;1vh&lt;/code&gt;, whichever is larger&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TOP 10 mistakes when you develop on AngularJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/top-10-mistakes-when-you-develop-on-angularjs/</link>
      <pubDate>Wed, 23 Sep 2015 18:40:03 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/top-10-mistakes-when-you-develop-on-angularjs/</guid>
      <description>&lt;p&gt;The top 10 mistakes when beginners start to develop on AngularJS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;mvc-directory-structure&#34;&gt;MVC directory structure&lt;/h1&gt;

&lt;p&gt;When you work with MVC / MVW frameworks it&amp;rsquo;s convenience to structure code by &lt;code&gt;MVC components&lt;/code&gt; using the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;templates/
├───login.html
└───feed.html
app/
├───app.js
└───controllers/
    ├───LoginController.js
    └───FeedController.js
    directives/
    └───FeedEntryDirective.js
    services/
    ├───LoginService.js
    └───FeedService.js
    filters/
    └───CapitalizeFilter.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But when project will rise it&amp;rsquo;s hard to use such structure of folders. You always need to open a few folder at the same time. It isn&amp;rsquo;t depend what IDE or tool you use (Sublime, VS, Vim with NerdTree) - it&amp;rsquo;s uncomfortable.&lt;/p&gt;

&lt;p&gt;To avoid this this developers often use grouping by &lt;code&gt;functionality type&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;app/
├───app.js
└───Feed/
    ├───feed.html
    ├───FeedController.js
    ├───FeedEntryDirective.js
    └───FeedService.js
    Login/
    ├───_login.html
    ├───LoginController.js
    └───LoginService.js
    Shared/
    └───CapitalizeFilter.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The structure allows more faster search for files which are related to the same feature. It may puzzled at the beginning to share js with html or even with test files. But it saves a lot of time, because it&amp;rsquo;s more natural.&lt;/p&gt;

&lt;h1 id=&#34;not-scalable-modules&#34;&gt;Not scalable Modules&lt;/h1&gt;

&lt;p&gt;At the beginning of development all functionalities include in a &lt;strong&gt;single module&lt;/strong&gt;. But manage a such type of code is inconvenient:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let app = angular.module(&#39;app&#39;,[]);
app.service(&#39;MyService&#39;, function(){
    //service code
});

app.controller(&#39;MyCtrl&#39;, function($scope, MyService){
    //controller code
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next most common approach is grouping objects &lt;strong&gt;by type&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let services = angular.module(&#39;services&#39;,[]);
services.service(&#39;MyService&#39;, function(){
    //service code
});

let controllers = angular.module(&#39;controllers&#39;, [&#39;services&#39;]);
controllers.controller(&#39;MyCtrl&#39;, function($scope, MyService){
    //controller code
});

let app = angular.module(&#39;app&#39;, [&#39;controllers&#39;, &#39;services&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For better scalability and future re-usability - split code &lt;strong&gt;by feature&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let sharedServicesModule = angular.module(&#39;sharedServices&#39;,[]);
sharedServices.service(&#39;NetworkService&#39;, function($http){});

let loginModule = angular.module(&#39;login&#39;, [&#39;sharedServices&#39;]);
loginModule.service(&#39;loginService&#39;, function(NetworkService){});
loginModule.controller(&#39;loginCtrl&#39;, function($scope, loginService){});

let app = angular.module(&#39;app&#39;, [&#39;sharedServices&#39;, &#39;login&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;minification-with-dependency-injection&#34;&gt;Minification with Dependency Injection&lt;/h1&gt;

&lt;p&gt;Pattern DI in AngularJS uses out of box. DI helps to keep code clean and helps with testing process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let app = angular.module(&#39;app&#39;,[]);
app.controller(&#39;MainCtrl&#39;, function($scope, $timeout) { //MainCtrl has dependency on $scope and $timeout
    $timeout(function(){
        console.log($scope);
    }, );
});

//And code after minification:

let app=angular.module(&amp;quot;app&amp;quot;,[]);app.controller(&amp;quot;MainCtrl&amp;quot;,function(e,t){t(function(){console.log(e)})})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now AngularJS can&amp;rsquo;t resolve minificated variables. Easiest solution is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.controller(&#39;MainCtrl&#39;, [&#39;$scope&#39;, &#39;$timeout&#39;, function($scope, $timeout){
    $timeout(function() {
        console.log($scope);
    });
}]);

//another best practice approach with $inject

app.controller(&#39;MainCtrl&#39;, mainCtrl);

mainCtrl.$inject = [&#39;$scope&#39;, &#39;$timeout&#39;];

function mainCtrl($scope, $timeout) {
     $timeout(function() {
        console.log($scope);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Angular can resolve dependency.&lt;/p&gt;

&lt;p&gt;Another way to handle DI with minification is &lt;a href=&#34;https://github.com/olov/ng-annotate&#34;&gt;ng-annotate&lt;/a&gt; module. More information on official &lt;a href=&#34;https://docs.angularjs.org/tutorial/step_05#a-note-on-minification&#34;&gt;AngularJS docs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;global-dependencies&#34;&gt;Global Dependencies&lt;/h1&gt;

&lt;p&gt;Often when writing AngularJS apps there will be a dependency on an object that binds itself to the global scope. This means it&amp;rsquo;s available in any AngularJS code, but this breaks the dependency injection model.&lt;/p&gt;

&lt;p&gt;AngularJS makes it simple to encapsulate these globals into modules so they can be injected like standard AngularJS modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let underscore = angular.module(&#39;underscore&#39;, []);
underscore.factory(&#39;_&#39;, function() {
    return window._; //Underscore must already be loaded on the page
});

let app = angular.module(&#39;app&#39;, [&#39;underscore&#39;]);

app.controller(&#39;MainCtrl&#39;, [&#39;$scope&#39;, &#39;_&#39;, function($scope, _) {
    init = function() {
        _.keys($scope);
    }

    init();
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;fat-controllers&#34;&gt;Fat controllers&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s easy, especially when starting out, to put to much logic in the controller. Controller should &lt;strong&gt;never&lt;/strong&gt; do a DOM manipulation. That&amp;rsquo;s work for directives! Likewise business logic should live in services.&lt;/p&gt;

&lt;p&gt;App data should be also stored and fetched in services, except when we need bound to the &lt;code&gt;$scope&lt;/code&gt;. Services are singletons that persist throughout the lifetime of the application, while controllers are transient between application states. If data is stored in the controller then it will need to be fetched from somewhere when it is instantiate.&lt;/p&gt;

&lt;p&gt;AngularJS works best when following the Single Responsibility Principle (SRP). If the controller is a coordinator between the view and the model, then the amount of logic it has should be minimal. This will also make testing much simpler.&lt;/p&gt;

&lt;h1 id=&#34;service-vs-factory-vs-provider&#34;&gt;Service vs Factory vs Provider&lt;/h1&gt;

&lt;p&gt;What is service:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It provides methods to keep, share and organize data across the lifetime of the Angular app&lt;/li&gt;
&lt;li&gt;Lazy loads, Angular only creates instance of a service when an application component depends on it&lt;/li&gt;
&lt;li&gt;Singleton object, application component dependent on the service work with the single instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An Angular service can be created in five different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;factory&lt;/li&gt;
&lt;li&gt;provider&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;constant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most verbose, but also the most comprehensive one is a &lt;strong&gt;Provider&lt;/strong&gt; recipe. The remaining four recipe types — Value, Factory, Service and Constant — are just syntactic sugar on top of a provider recipe.&lt;/p&gt;

&lt;p&gt;Here is a great examples by Misko:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.value(&#39;a&#39;, 123);
module.constant(&#39;A&#39;, 321); //can&#39;t modify with a decorator

function Controller(a, A) {
    expect(a).toEqual(123);
    expect(A).toEqual(231);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case the injectors simply return the value. But what if you want to compute the value?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.factory(&#39;b&#39;, function(a) {
    return a*2;
});

function Controller(b) {
    expect(b).toEqual(246);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;strong&gt;factory&lt;/strong&gt; is a function which responsible to creating or/and modifying the value. Notice that the the factory function can ask for other &lt;strong&gt;dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to be more OO and have a class?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.factory(&#39;greeterFactory&#39;, function(a) {
    function Greeter(a) {
        this.greet = function() {
            return &#39;Hello &#39; + a;
        }
    }
    
    return new Greeter(a);
});

//or with service
module.service(&#39;greeterService&#39;, function(a) {
    this.greet = function() {
        return &#39;Hello &#39; + a;
    }
});

function Controller(greeterFactory, greeterService) {
    expect(greeter instanceof Greeter).toBe(true);
    expect(greeter.greet()).toEqual(&#39;Hello 123&#39;);
    
    const greeter2 = new greeter2;
    expect(greeter2 instanceof greeterFactory).toBe(true);
    expect(greeter2.greet()).toEqual(&#39;Hello 123&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if we want to configure service function before injection? Use &lt;strong&gt;provider&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.provider(&#39;greeter3&#39;, function() {
    var salutation = &#39;Hello&#39;;
    this.setSalutation = function(s) {
        salutation = s;
    }

    function Greeter(a) {
        this.greet = function() {
            return `${salutation} ${a}`;
        }
    }

    this.$get = function(a) {
        return new Greeter(a);
    };
});

// configuration in config phase
module(&#39;abc&#39;, []).config(function(greeter3Provider) {
    greeter3Provider.setSalutation(&#39;Halo&#39;);
});

function Controller(greeter2) {
    expect(greeter2.greet()).toEqual(&#39;Halo 123&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a side note, &lt;strong&gt;service&lt;/strong&gt;, &lt;strong&gt;factory&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt; are all derived from provider:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.service = function(name, Class) {
    provider.provide(name, function() {
        this.$get = function($injector) {
            return $injector.instantiate(Class);
        };
    });
}

module.factory = function(name, factory) {
    provider.provide(name, function() {
        this.$get = function($injector) {
            return $injector.invoke(factory);
        };
    });
}

module.value = function(name, value) {
    provider.factory(name, function() {
        return value;
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;always-dot-in-vm-scope-s&#34;&gt;Always dot in VM $scope&amp;rsquo;s&lt;/h1&gt;

&lt;p&gt;In AngularJS every &lt;code&gt;$scope&lt;/code&gt; prototypical inherits from its parent &lt;code&gt;$scope&lt;/code&gt; till the highest level &lt;code&gt;$rootScope&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-controller=&amp;quot;navCtrl&amp;quot;&amp;gt;
   &amp;lt;span&amp;gt;{{user}}&amp;lt;/span&amp;gt; &amp;lt;!-- won&#39;t be updating --&amp;gt;
   &amp;lt;div ng-controller=&amp;quot;loginCtrl&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;{{user}}&amp;lt;/span&amp;gt;
      &amp;lt;input ng-model=&amp;quot;user&amp;quot;&amp;gt;&amp;lt;/input&amp;gt; &amp;lt;!-- changes update only loginCtrl scope --&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When looking up for &lt;code&gt;primitive&lt;/code&gt; value, the prototype chain is not consulted. If &lt;code&gt;navCtrl&lt;/code&gt; updated simultaneously then a prototype chain lookup is required, this won&amp;rsquo;t happen when the value is an &lt;strong&gt;object&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-controller=&amp;quot;navCtrl&amp;quot;&amp;gt;
   &amp;lt;span&amp;gt;{{user.name}}&amp;lt;/span&amp;gt;
   &amp;lt;div ng-controller=&amp;quot;loginCtrl&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;{{user.name}}&amp;lt;/span&amp;gt;
      &amp;lt;input ng-model=&amp;quot;user.name&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;unit-testing-angularjs-apps&#34;&gt;Unit testing AngularJS apps&lt;/h1&gt;

&lt;p&gt;JavaScript is a dynamically typed language which comes with great power of expression, but it also comes with almost no help from the compiler.
For this reason we feel very strongly that any code written in JavaScript needs to come with a strong &lt;a href=&#34;https://docs.angularjs.org/guide/unit-testing&#34;&gt;set of tests&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;not-to-do-an-end-to-end-testing-with-protractor&#34;&gt;Not to do an end-to-end testing with Protractor&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/protractor&#34;&gt;Protractor&lt;/a&gt; uses the &lt;a href=&#34;http://jasmine.github.io/1.3/introduction.html&#34;&gt;Jasmine&lt;/a&gt; test framework for defining tests. Protractor has a very robust API for different page interactions.
There are other end to end test tools, but Protractor has the advantage of understanding how to work with AngularJS code, especially when it comes to &lt;code&gt;$digest&lt;/code&gt; cycles and more.&lt;/p&gt;

&lt;h1 id=&#34;full-spectrum-testing-with-karma&#34;&gt;Full-Spectrum Testing with Karma&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-karma.html&#34;&gt;Awesome post&lt;/a&gt; about testing AngularJS with &lt;code&gt;Karma&lt;/code&gt;, passage from the post:&lt;/p&gt;

&lt;p&gt;Karma is an amazing testing tool which is designed to take all the frustration out of setting up a working test runner when testing JavaScript code.
Karma works by spawning up each browser that is specified within its configuration file and then running JavaScript code against those browsers to see if they pass certain tests.
Communication between Karma and each of the browsers is handled with the karma service running in the terminal using socket.io.
Each time a test is run, Karma records its status and then tallies up which browsers have failed for each test and which ones passed and timed out.
This makes each test work 100% natively in each browser without the need to test individually.
Also, since the Karma service runs on a port and keeps track of browsers by itself, you can easily hook up other browsers and devices to it just by visiting its broadcasting port.
Oh and did I mention that Karma is fast? Yeah it&amp;rsquo;s really fast&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;using-jquery&#34;&gt;Using jQuery&lt;/h1&gt;

&lt;p&gt;AngularJS is a framework for building scalable apps. jQuery is a famous library for simplifying DOM manipulation, event handling, AJAX operation.&lt;/p&gt;

&lt;p&gt;AngularJS is about architecture of app, not augmenting HTML pages.&lt;/p&gt;

&lt;p&gt;Try to stop using jQuery and imperative paradigm, just let your code to extend HTML syntax in declarative style.&lt;/p&gt;

&lt;p&gt;DOM manipulation should only be done in directives, but this doesn&amp;rsquo;t mean they have to be jQuery wrappers. Always consider what features AngularJS already provides before reaching for jQuery.&lt;/p&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make&#34;&gt;Original post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Centering in CSS</title>
      <link>https://qetr1ck-op.github.io/blog/post/Centering-in-CSS/</link>
      <pubDate>Mon, 08 Sep 2014 22:54:09 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Centering-in-CSS/</guid>
      <description>&lt;p&gt;A fast guide to help centering everything with CSS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So now you can easy to say, that centering in CSS isn&amp;rsquo;t a big deal.&lt;/p&gt;

&lt;p&gt;Save My Day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on &lt;a href=&#34;http://css-tricks.com/centering-css-complete-guide/&#34;&gt;Css tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Medium-Style Page Transition</title>
      <link>https://qetr1ck-op.github.io/blog/post/Medium-Style-Page-Transition/</link>
      <pubDate>Mon, 01 Sep 2014 22:50:51 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Medium-Style-Page-Transition/</guid>
      <description>&lt;p&gt;An article on how to achieve &lt;a href=&#34;https://medium.com/&#34;&gt;Medium’s&lt;/a&gt; next page transition effect—an effect that can be seen by clicking anywhere on the “Read Next” footer at the bottom of the page. This effect is characterized by the lower article easing upward as the current article fades up and out.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The page makes Ajax request to static &lt;code&gt;json&lt;/code&gt; files. Page state is managed by using the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history&#34;&gt;PushState API&lt;/a&gt; and &lt;code&gt;location.hash&lt;/code&gt;. All photos are from &lt;a href=&#34;http://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I will outline how to achieve Medium’s page transition effect—an effect that can be seen by clicking anywhere on the “Read Next” footer at the bottom of the page. This effect is characterized by the lower article easing upward as the current article fades up and out. See the animation below for an illustration of this effect.&lt;/p&gt;

&lt;h1 id=&#34;html&#34;&gt;HTML&lt;/h1&gt;

&lt;p&gt;In this demo, the page first loads with barebones HTML, which we’ll use as a template that will be filled in later with Ajax’d-in data. Below is what our &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; looks like on initial page load. One main &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag. Pretty simple, eh?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;article class=&#39;page hidden&#39;&amp;gt;
    &amp;lt;div class=&#39;big-image&#39;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&#39;content&#39;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/article&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the content is Ajax’d-in, the &lt;body&gt; looks something like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;article class=&#39;page current&#39;&amp;gt;&amp;lt;!--other HTML --&amp;gt;&amp;lt;/article&amp;gt;
  &amp;lt;article class=&#39;page next &#39;&amp;gt;&amp;lt;!--other HTML --&amp;gt;&amp;lt;/article&amp;gt;
&amp;lt;body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The page currently being viewed has a class of &lt;code&gt;current&lt;/code&gt;, and the next article has a class of &lt;code&gt;next&lt;/code&gt;. The next article only has its large image being shown at the bottom of the page, which, when &lt;code&gt;clicked&lt;/code&gt; on, brings it into focus.&lt;/p&gt;

&lt;h1 id=&#34;css&#34;&gt;CSS&lt;/h1&gt;

&lt;p&gt;The styles in this demo which control the article transitions are both applied dynamically via jQuery’s &lt;code&gt;css()&lt;/code&gt; method, as well as by applying classes to the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; elements using jQuery’s &lt;code&gt;addClass()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;article.page.hidden { 
    display: none
}

article.page.content-hidden .content { 
    display: none
}

article.fade-up-out {
    opacity: 0;
    transform: scale(0.8) translate3d(0, -10%, 0);
    transition: all 450ms cubic-bezier(0.165, 0.840, 0.440, 1.000);
}

article.easing-upward {
    transition: all 450ms cubic-bezier(0.165, 0.840, 0.440, 1.000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;javascript&#34;&gt;JavaScript&lt;/h1&gt;

&lt;p&gt;Before getting into the Javascript code, I want to first outline the algorithm used to transition the &lt;code&gt;next&lt;/code&gt; article upward, and transition the &lt;code&gt;current&lt;/code&gt; article up and away.&lt;/p&gt;

&lt;p&gt;So, when user click on &lt;code&gt;next&lt;/code&gt; article:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Disable scroll on the page&lt;/li&gt;
&lt;li&gt;Fade &lt;code&gt;current&lt;/code&gt; article to &lt;code&gt;opacity&lt;/code&gt; of 0, a &lt;code&gt;scale&lt;/code&gt; of .8 and move it upward by 10%&lt;/li&gt;
&lt;li&gt;Show the &lt;code&gt;article&lt;/code&gt; content, give it smooth transition, then move it upward to the top of the window&lt;/li&gt;
&lt;li&gt;After 500ms:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Non-Closure Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function nonClosure() {
    //encapsulation
    var date = new Date(); //Varible lost after function returns

    return date.getMilliseconds();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closure function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function trueClosure() {
    //encapsulation
    var date = new Date(); //Varible stays around even after function returns

    //nested function (!)
    return function() {
        return date.getMilliseconds();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closure function example2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function trueClosure() {
    //encapsulation
    var date = new Date(); //Varible stays around even after function returns
    //nested function (!)
    function getTime() {
        return date.getMilliseconds();
    }

    return {
        getTime: getTime
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;animation-code&#34;&gt;Animation Code&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; ArticleAnimator.animatePage = function(callback){
  var self              = this;
  var translationValue  = this.$next.get(0).getBoundingClientRect().top;
  this.canScroll        = false;

  this.$current.addClass(&#39;fade-up-out&#39;);

  this.$next.removeClass(&#39;content-hidden next&#39;)
       .addClass(&#39;easing-upward&#39;)
       .css({ &amp;quot;transform&amp;quot;: &amp;quot;translate3d(0, -&amp;quot;+ translationValue +&amp;quot;px, 0)&amp;quot; });

  setTimeout(function(){
      self.scrollTop();
      self.$next.removeClass(&#39;easing-upward&#39;)
          self.$current.remove();

      self.$next.css({ &amp;quot;transform&amp;quot;: &amp;quot;&amp;quot; });
          self.$current = self.$next.addClass(&#39;current&#39;);

      self.canScroll = true;
      self.currentPostIndex = self.nextPostIndex( self.currentPostIndex );

      callback();
  }, self.animationDuration + 300 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Throughout the CSS and JavaScript code in order to achieve fluid animation I&amp;rsquo;m using &lt;code&gt;transform: translate3d(x, y, z)&lt;/code&gt; to move DOM elements. By doing this, we &lt;code&gt;hardware accelarate&lt;/code&gt; the DOM elements movement. This method is preferred over animating an element using &lt;code&gt;top / left&lt;/code&gt; or &lt;code&gt;transform: translateX(x) / translateY(y)&lt;/code&gt;, which are not &lt;code&gt;hardware&lt;/code&gt; accelarated by default.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Article Intro Effects Examples</title>
      <link>https://qetr1ck-op.github.io/blog/post/Article-Intro-Effects-Examples/</link>
      <pubDate>Tue, 19 Aug 2014 12:46:59 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Article-Intro-Effects-Examples/</guid>
      <description>&lt;p&gt;Most of the effects we tried are highly experimental; animating large images can become a bit sluggish, also because a couple of transitions happening at the same time. The effect gets triggered when &lt;code&gt;scrolling begins&lt;/code&gt;  or when the &lt;code&gt;button is clicked&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;SaveMyDay:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on &lt;a href=&#34;http://tympanus.net/codrops/2014/05/22/inspiration-for-article-intro-effects/&#34;&gt;tympanus.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Canvas-off icon navigation with an animated border effect</title>
      <link>https://qetr1ck-op.github.io/blog/post/Canvas-off-icon-navigation-with-an-animated-border-effect/</link>
      <pubDate>Mon, 11 Aug 2014 21:11:48 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Canvas-off-icon-navigation-with-an-animated-border-effect/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-markup&#34;&gt;The Markup&lt;/h1&gt;

&lt;p&gt;The HTML structure for our menu will consist of a &lt;code&gt;nav&lt;/code&gt; element that will contain a &lt;code&gt;trigger anchor&lt;/code&gt; and an unordered list with the menu items which will consist of icons:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;nav id=&amp;quot;bt-menu&amp;quot; class=&amp;quot;bt-menu&amp;quot;&amp;gt;
    [&amp;lt;span&amp;gt;Menu&amp;lt;/span&amp;gt;](#)

*   [Zoom](#)
*   [Refresh](#)
*   [Lock](#)
*   [Sound](#)
*   [Favorite](#)
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-css&#34;&gt;The CSS&lt;/h1&gt;

&lt;p&gt;Let’s use the border-box box-sizing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;*,
*:after,
*::before {
    box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And let’s set some styles for the body and the main container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body  {
    background: #04a466;
}

.container {
    padding: 80px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The padding will help providing some space around our content so that when the border appears, we guarantee that there is enough space around.&lt;/p&gt;

&lt;p&gt;The main menu element will have position &lt;code&gt;fixed&lt;/code&gt; so that, no matter where we are in the page, the border is always around the viewport. We set an initial &lt;code&gt;border&lt;/code&gt; style which we will transition to a bigger border. Setting the initial &lt;code&gt;height&lt;/code&gt; to 0 will make sure that the menu does not cover anything initially. The “backward” or closing height &lt;code&gt;transition&lt;/code&gt; will have a delay of 0.3s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 0;
    border-width: 0px;
    border-style: solid;
    border-color: #333;
    background-color: rgba(0,0,0,0);
    transition: border-width 0.3s, background-color 0.3s, height 0s 0.3s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we open the menu, we’ll set the &lt;code&gt;height&lt;/code&gt; to 100% (but we won’t transition that property) and the &lt;code&gt;border will&lt;/code&gt; animate to 90px on the left side and 30px on all the other sides. The &lt;code&gt;background color&lt;/code&gt; will be semi-transparent using an RGBA value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu.bt-menu-open {
    height: 100%;
    border-width: 30px 30px 30px 90px;
    background-color: rgba(0,0,0,0.3);
    transition: border-width 0.3s, background-color 0.3s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have to use a little trick. We will add another &lt;code&gt;element&lt;/code&gt; using JavaScript which will server as a dummy container covering the whole page except the border. This will allow us to distinguish where we are clicking in order to close the whole thing. We don’t want the menu to close when clicking on the border but only when clicking in the space between:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-overlay {
    position: absolute;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we open the menu, this element will have full &lt;code&gt;height&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-open .bt-overlay {
    height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s style that little &lt;code&gt;trigger element&lt;/code&gt;. We’ll give it a &lt;code&gt;fixed&lt;/code&gt; position and we’ll show it in the &lt;code&gt;top left corner&lt;/code&gt; of the page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-trigger {
    position: fixed;
    top: 15px;
    left: 20px;
    display: block;
    width: 50px;
    height: 50px;
    cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;trigger anchor&lt;/code&gt; itself will serve as a container and the span will be the middle line of our hamburger menu icon. So we position it in the middle by setting the &lt;code&gt;top&lt;/code&gt; to 50% and giving it a negative top &lt;code&gt;margin&lt;/code&gt; of half of its height:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-trigger span {
    position: absolute;
    top: 50%;
    left: 0;
    display: block;
    width: 100%;
    height: 4px;
    margin-top: -2px;
    background-color: #fff;
    font-size: 0px;
    user-select: none;
    transition: background-color 0.3s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When opening the menu, we will make a cross out of the icon. The other two lines will be created by pseudo-elements and when the menu is open, the middle line will disappear:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-open .bt-menu-trigger span {
    background-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s create the two other lines. The pseudo-elements will be &lt;code&gt;positioned&lt;/code&gt; absolutely and their &lt;code&gt;height&lt;/code&gt; is going to be the same like of their parent by setting it to 100%:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-trigger span:before,
.bt-menu-trigger span:after {
    position: absolute;
    left: 0;
    width: 100%;
    height: 100%;
    background: #fff;
    content: &#39;&#39;;
    transition: transform 0.3s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For positioning them correctly, we’ll use &lt;code&gt;translateY&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-trigger span:before {
    transform: translateY(-250%);
}

.bt-menu-trigger span:after {
    transform: translateY(250%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cross will be formed when opening the menu by setting the &lt;code&gt;translateY&lt;/code&gt; to 0 and rotating the pseudo-elements accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu-open .bt-menu-trigger span:before {
    transform: translateY(0) rotate(45deg);
}

.bt-menu-open .bt-menu-trigger span:after {
    transform: translateY(0) rotate(-45deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unordered list&lt;/code&gt; with our icons will also have a &lt;code&gt;fixed&lt;/code&gt; position and we’ll set it to the left side of the window:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul {
    position: fixed;
    top: 75px;
    left: 0;
    margin: 0;
    padding: 0;
    width: 90px;
    list-style: none;
    backface-visibility: hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s set the list items and the anchors to &lt;code&gt;display: block&lt;/code&gt; and give them full width:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul li,
.bt-menu ul li a {
    display: block;
    width: 100%;
    text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each list item will be hidden initially and the &lt;code&gt;opacity&lt;/code&gt; will be 0. The “backward” transition of the visibility will be delayed until all the other &lt;code&gt;transitions&lt;/code&gt; of the transform and the opacity are finished:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul li {
    padding: 16px 0;
    opacity: 0;
    visibility: hidden;
    transition: transform 0.3s, opacity 0.2s, visibility 0s 0.3s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will transform each of the list items differently so that they are all placed in the &lt;code&gt;middle&lt;/code&gt; and to the left until they are hidden (-100% on the Y axis):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul li:first-child { 
    transform: translate3d(-100%,200%,0);
}

.bt-menu ul li:nth-child(2) { 
    transform: translate3d(-100%,100%,0);
}

.bt-menu ul li:nth-child(3) { 
    transform: translate3d(-100%,0,0);
}

.bt-menu ul li:nth-child(4) { 
    transform: translate3d(-100%,-100%,0);
}

.bt-menu ul li:nth-child(5) { 
    transform: translate3d(-100%,-200%,0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When opening the menu, the list items will become &lt;code&gt;visible&lt;/code&gt; (instantly, because we are not setting a transition for it) and they will fade in. They will also move to their original positions by setting the &lt;code&gt;transform3d&lt;/code&gt; to 0 for all axes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu.bt-menu-open ul li {
    visibility: visible;
    opacity: 1;
    transition: transform 0.3s, opacity 0.3s;
    transform: translate3d(0,0,0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s style the anchors. We will use an icon font and include the font reference and the icon classes in another CSS which will be provided by a service like &lt;a href=&#34;http://app.fontastic.me/&#34;&gt;Fontastic&lt;/a&gt; or the &lt;a href=&#34;https://icomoon.io/app&#34;&gt;IcoMoon app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By setting the &lt;code&gt;font size&lt;/code&gt; of the anchor to 0 and make it transparent, we’ll hide the text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul li a {
    display: block;
    outline: none;
    color: transparent;
    text-decoration: none;
    font-size: 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ll reset the &lt;code&gt;font size&lt;/code&gt; for the pseudo-element which contains the icon. We’ll need to use a pixel-based value because the main element has a font-size of 0 so ems won’t work here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul li a:before {
    color: #04a466;
    font-size: 48px;
    transition: color 0.2s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On &lt;code&gt;hover&lt;/code&gt; we’ll make them white:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.bt-menu ul li a:hover:before,
.bt-menu ul li a:focus:before  {
    color: #fff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And last, but not least, we want the icons to be smaller on mobile screens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@media screen and (max-height: 31.125em) {
    .bt-menu ul li a:before {
        font-size: 32px;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-javascript&#34;&gt;The Javascript&lt;/h1&gt;

&lt;p&gt;Our script is pretty straightforward; when we click on the trigger anchor, we toggle the class &lt;code&gt;bt-menu-open&lt;/code&gt; and &lt;code&gt;bt-menu-close&lt;/code&gt; on the &lt;code&gt;nav&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;When we click on the &lt;code&gt;overlay&lt;/code&gt;, we will close the menu. We’ll also add some touch support:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function() {

    // http://stackoverflow.com/a/11381730/989439
    function mobilecheck() {
        var check = false;
        (function(a){if(/(android|ipad|playbook|silk|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
        return check;
    }

    function init() {

        var menu = document.getElementById( &#39;bt-menu&#39; ),
            trigger = menu.querySelector( &#39;a.bt-menu-trigger&#39; ),
            // event type (if mobile, use touch events)
            eventtype = mobilecheck() ? &#39;touchstart&#39; : &#39;click&#39;,
            resetMenu = function() {
                classie.remove( menu, &#39;bt-menu-open&#39; );
                classie.add( menu, &#39;bt-menu-close&#39; );
            },
            closeClickFn = function( ev ) {
                resetMenu();
                overlay.removeEventListener( eventtype, closeClickFn );
            };

        var overlay = document.createElement(&#39;div&#39;);
        overlay.className = &#39;bt-overlay&#39;;
        menu.appendChild( overlay );

        trigger.addEventListener( eventtype, function( ev ) {
            ev.stopPropagation();
            ev.preventDefault();

            if( classie.has( menu, &#39;bt-menu-open&#39; ) ) {
                resetMenu();
            }
            else {
                classie.remove( menu, &#39;bt-menu-close&#39; );
                classie.add( menu, &#39;bt-menu-open&#39; );
                overlay.addEventListener( eventtype, closeClickFn );
            }
        });

    }

    init();

})();
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;view-demo&#34;&gt;View Demo&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://tympanus.net/Development/OffCanvasMenuEffects/&#34;&gt;View demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SaveMyDay:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on &lt;a href=&#34;http://tympanus.net/codrops/2013/09/30/animated-border-menus/&#34;&gt;tympanus.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>CSS Transforms</title>
      <link>https://qetr1ck-op.github.io/blog/post/CSS-Transforms/</link>
      <pubDate>Sun, 03 Aug 2014 22:13:20 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/CSS-Transforms/</guid>
      <description>&lt;p&gt;So what are transforms and transitions? At their most basic level, transforms move or change the appearance of an element, while transitions make the element smoothly and gradually change from one state to another.
&lt;/p&gt;

&lt;h1 id=&#34;how-to-use-transforms&#34;&gt;How to use transforms&lt;/h1&gt;

&lt;p&gt;There are two categories of transform - &lt;code&gt;2D transforms&lt;/code&gt; and &lt;code&gt;3D transforms&lt;/code&gt;. 2D transforms are more widely supported, whereas 3D transforms are only in newer browsers.&lt;/p&gt;

&lt;h1 id=&#34;2d-examples&#34;&gt;2D examples&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;//don&#39;t forget about prefixes
#skew {
  -webkit-transform:skew(35deg);
   -moz-transform:skew(35deg);
    -ms-transform:skew(35deg);
     -o-transform:skew(35deg);
        transform:skew(35deg);
}
#scale {
  -webkit-transform:scale(1,0.5);
   -moz-transform:scale(1,0.5);
    -ms-transform:scale(1,0.5);
     -o-transform:scale(1,0.5);
        transform:scale(1,0.5);
}
#rotate {
  -webkit-transform:rotate(45deg);
   -moz-transform:rotate(45deg);
    -ms-transform:rotate(45deg);
     -o-transform:rotate(45deg);
        transform:rotate(45deg);
}
#translate {
  -webkit-transform:translate(10px, 20px);
   -moz-transform:translate(10px, 20px);
    -ms-transform:translate(10px, 20px);
     -o-transform:translate(10px, 20px);
        transform:translate(10px, 20px);
}

.thumbnail {
  -webkit-transition: all .5s ease-in;
  -moz-transition: all .5s ease-in;  
  -o-transition: all .5s ease-in;
  transition: all .5s ease-in;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p data-height=&#34;473&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;BGAaf&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/BGAaf/&#39;&gt;CSS Transforms: 2D examples&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;

# 3D examples and hadle `onTransitionEnd

3D CSS transforms are similar to 2D CSS transforms. The basic properties are `translate3d`, `scale3d`, `rotateX`, `rotateY` and `rotateZ`. `translate3d` and `scale3d` take three arguments for x,y and z, whereas the rotates just take an angle. Here are some examples:

```css
#rotateX{
-webkit-transform:rotateX(180deg);
   -moz-transform:rotateX(180deg);
    -ms-transform:rotateX(180deg);
     -o-transform:rotateX(180deg);
        transform:rotateX(180deg);
}
#rotateY{
-webkit-transform:rotateY(180deg);
   -moz-transform:rotateY(180deg);
    -ms-transform:rotateY(180deg);
     -o-transform:rotateY(180deg);
        transform:rotateY(180deg);
}
#rotateZ{
-webkit-transform:rotateZ(180deg);
   -moz-transform:rotateZ(180deg);
    -ms-transform:rotateZ(180deg);
     -o-transform:rotateZ(180deg);
        transform:rotateZ(180deg);
}
```

```js
$(&#39;.thumbnail&#39;).on(&#39;transitionend webkitTransitionEnd MSTransitionEnd&#39;, function(e) {
  //transitionend fires for each property transitioned
  if (e.originalEvent.propertyName != &#39;transform&#39;) return;

  alert(&#39;webkitTransitionEnd&#39;)
});
```

&lt;p data-height=&#34;474&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;CDrkj&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/CDrkj/&#39;&gt;CSS Transforms: 3D example and transtionEnd&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;3d-transform-image-slider&#34;&gt;3D Transform image slider&lt;/h1&gt;

&lt;p&gt;Note that because of the way a cube works, the image is moved out towards the screen, and is bigger than it should be. You should move it back by &lt;code&gt;half&lt;/code&gt; the width of an image to make sure it is normal size.&lt;/p&gt;

&lt;p data-height=&#34;545&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;GgCah&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/GgCah/&#39;&gt;CSS Transforms: 3D Transform image slider&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SaveMyDay:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on &lt;a href=&#34;http://css3.bradshawenterprises.com/transforms/&#34;&gt;css3.bradshawenterprises.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Bootstrap 3: Components</title>
      <link>https://qetr1ck-op.github.io/blog/post/Bootstrap3-Components/</link>
      <pubDate>Sat, 02 Aug 2014 16:59:51 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Bootstrap3-Components/</guid>
      <description>&lt;p&gt;Set of standard components from popular library.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;icons&#34;&gt;Icons&lt;/h1&gt;

&lt;p&gt;Use them in buttons, button groups for a toolbar, navigation, or prepended form inputs.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;zAupx&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/zAupx/&#39;&gt;Bootstrap Components: Icons Examples&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;dropdowns&#34;&gt;Dropdowns&lt;/h1&gt;

&lt;p&gt;Wrap the dropdown&amp;rsquo;s trigger and the dropdown menu within &lt;code&gt;.dropdown&lt;/code&gt;, or another element that declares &lt;code&gt;position: relative;&lt;/code&gt;. Then add the menu&amp;rsquo;s HTML:&lt;/p&gt;

&lt;p&gt;Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the &lt;code&gt;.open&lt;/code&gt; class on the parent list item. When opened, the plugin also adds &lt;code&gt;.dropdown-backdrop&lt;/code&gt; as a click area for closing dropdown menus when clicking outside the menu.&lt;/p&gt;

&lt;p&gt;Call the dropdowns via JavaScript: &lt;code&gt;$(&#39;.dropdown-toggle&#39;).dropdown()&lt;/code&gt; or use &lt;code&gt;data-toggle=&amp;quot;dropdown&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/javascript/#dropdowns-usage&#34;&gt;Full list Dropdown methods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;yoehq&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/yoehq/&#39;&gt;yoehq&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;buttons-group&#34;&gt;Buttons group&lt;/h1&gt;

&lt;p&gt;Group a series of buttons together on a single line with the button group. Control via JavaScript: &lt;code&gt;$(&#39;.btn&#39;).button()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/javascript/#buttons-usage&#34;&gt;Full list methods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;qCbxy&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/qCbxy/&#39;&gt;Bootstrap Components: Buttons Group&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;input-groups&#34;&gt;Input groups&lt;/h1&gt;

&lt;p&gt;Extend form controls by adding text or buttons before, after, or on both sides of any text-based input. Use &lt;code&gt;.input-group&lt;/code&gt; with an &lt;code&gt;.input-group-addon&lt;/code&gt; to prepend or append elements to a single &lt;code&gt;.form-control&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;Cypci&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/Cypci/&#39;&gt;Bootstrap: Components - Input groups&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;navs&#34;&gt;Navs&lt;/h1&gt;

&lt;p&gt;Navs available in Bootstrap have shared markup, starting with the base &lt;code&gt;.nav&lt;/code&gt; class, as well as shared states. Swap modifier classes to switch between each style.&lt;/p&gt;

&lt;p&gt;Navs via JavaScript: &lt;code&gt;$(&#39;#myTab a&#39;).tab()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/javascript/#tabs&#34;&gt;Full list methods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;762&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;ousCl&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/ousCl/&#39;&gt;Bootstrap: Copmonents - Navs&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;pagination&#34;&gt;Pagination&lt;/h1&gt;

&lt;p&gt;Provide pagination links for your site or app with the multi-page pagination component, or the simpler pager alternative.&lt;/p&gt;

&lt;p&gt;Simple pagination inspired by Rdio, great for apps and search results. The large block is hard to miss, easily scalable, and provides large click areas.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;366&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;zwqHv&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/zwqHv/&#39;&gt;Bootstrap: Components - Pagination&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;labels-and-badges&#34;&gt;Labels and Badges&lt;/h1&gt;

&lt;p&gt;Add any of the below mentioned modifier classes to change the appearance of a label.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;332&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;Aiywe&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/Aiywe/&#39;&gt;Bootstrap: Components - Labels and Badges&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;thumbnails&#34;&gt;Thumbnails&lt;/h1&gt;

&lt;p&gt;With a bit of extra markup, it&amp;rsquo;s possible to add any kind of HTML content like headings, paragraphs, or buttons into thumbnails.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;355&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;rtbqu&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/rtbqu/&#39;&gt;Bootstrap: Components - Thumbnail&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;alerts&#34;&gt;Alerts&lt;/h1&gt;

&lt;p&gt;Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/javascript/#alerts&#34;&gt;Full list methods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;roLJc&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/roLJc/&#39;&gt;Bootstrap: Components - Alerts&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;progress-bars&#34;&gt;Progress Bars&lt;/h1&gt;

&lt;p&gt;Provide up-to-date feedback on the progress of a work-flow or action with simple yet flexible progress bars.&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;acvLq&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/acvLq/&#39;&gt;Bootstrap: Components - Progress Bar&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bootstrap 3: CSS</title>
      <link>https://qetr1ck-op.github.io/blog/post/Bootstrap3-CSS/</link>
      <pubDate>Thu, 17 Jul 2014 20:10:04 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Bootstrap3-CSS/</guid>
      <description>&lt;p&gt;A detailed look for implementation of UI popular library.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;mobile-first&#34;&gt;Mobile First&lt;/h1&gt;

&lt;p&gt;To ensure proper rendering and touch zooming, add the viewport &lt;code&gt;meta&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can disable zooming capabilities on mobile devices by adding:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;typography-and-links&#34;&gt;Typography and links&lt;/h1&gt;

&lt;p&gt;Bootstrap sets basic global display, typography, and link styles. Specifically, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;background-color: #fff;&lt;/code&gt; on the body&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;@font-family-base&lt;/code&gt;, &lt;code&gt;@font-size-base&lt;/code&gt;, and &lt;code&gt;@line-height&lt;/code&gt; - base attributes as our typographic base&lt;/li&gt;
&lt;li&gt;Set the global link color via &lt;code&gt;@link-color&lt;/code&gt; and apply link underlines only on &lt;code&gt;:hover&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These styles can be found within &lt;code&gt;scaffolding.less&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;normalize-css&#34;&gt;Normalize.css&lt;/h1&gt;

&lt;p&gt;For improved cross-browser rendering, Bootstrap uses &lt;a href=&#34;http://necolas.github.io/normalize.css/&#34;&gt;Normalize.css&lt;/a&gt;, a project by Nicolas Gallagher and Jonathan Neal.&lt;/p&gt;

&lt;h1 id=&#34;media-queries&#34;&gt;Media queries&lt;/h1&gt;

&lt;p&gt;Bootstrap includes a responsive, mobile first fluid grid system that appropriately scales up to &lt;code&gt;12 columns as&lt;/code&gt; the device or viewport size increases.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the Bootstrap grid system works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rows must be placed within a &lt;code&gt;.container&lt;/code&gt; (fixed-width) or &lt;code&gt;.container-fluid&lt;/code&gt; (full-width) for proper alignment and padding.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;rows&lt;/code&gt; to create horizontal groups of columns.&lt;/li&gt;
&lt;li&gt;Content should be placed within columns, and only columns may be immediate children of rows.&lt;/li&gt;
&lt;li&gt;Predefined grid classes like &lt;code&gt;.row&lt;/code&gt; and &lt;code&gt;.col-xs-4&lt;/code&gt; are available for quickly making grid layouts. Less mixins can also be used for more semantic layouts.&lt;/li&gt;
&lt;li&gt;Columns create gutters (gaps between column content) via padding. That padding is offset in rows for the first and last column via negative margin on &lt;code&gt;.rows&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The negative margin is why the examples below are outdented. It&amp;rsquo;s so that content within grid columns is lined up with non-grid content.&lt;/li&gt;
&lt;li&gt;Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three &lt;code&gt;.col-xs-4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.&lt;/li&gt;
&lt;li&gt;Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override grid classes targeted at smaller devices. Therefore, e.g. applying any &lt;code&gt;.col-md-*&lt;/code&gt; class to an element will not only affect its styling on medium devices but also on large devices if a &lt;code&gt;.col-lg-*&lt;/code&gt; class is not present.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initial grid system implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Extra small devices (phones, less than 768px) */
/* No media query since this is the default in Bootstrap */
@media (min-width: @screen-xs-min) { ... }

/* Small devices (tablets, 768px and up) */
@media (min-width: @screen-sm-min) { ... }

/* Medium devices (desktops, 992px and up) */
@media (min-width: @screen-md-min) { ... }

/* Large devices (large desktops, 1200px and up) */
@media (min-width: @screen-lg-min) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a single set of &lt;code&gt;.col-md-*&lt;/code&gt; grid classes, you can create a basic grid system that starts out stacked on mobile devices and tablet devices (the extra small to small range) before becoming horizontal on desktop (medium) devices. Place grid columns in any &lt;code&gt;.row&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;stacked-to-horizontal&#34;&gt;Stacked-to-horizontal&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-1&amp;quot;&amp;gt;.col-md-1&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;.col-md-8&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;.col-md-6&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-6&amp;quot;&amp;gt;.col-md-6&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;fluid-container&#34;&gt;Fluid container&lt;/h1&gt;

&lt;p&gt;Turn any fixed-width grid layout into a full-width layout by changing your outermost &lt;code&gt;.container&lt;/code&gt; to &lt;code&gt;.container-fluid&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html class=&amp;quot;container-fluid&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;offseting-columns&#34;&gt;Offseting columns&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;.col-md-4&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4 col-md-offset-4&amp;quot;&amp;gt;.col-md-4 .col-md-offset-4&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-3 col-md-offset-3&amp;quot;&amp;gt;.col-md-3 .col-md-offset-3&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-3 col-md-offset-3&amp;quot;&amp;gt;.col-md-3 .col-md-offset-3&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-6 col-md-offset-3&amp;quot;&amp;gt;.col-md-6 .col-md-offset-3&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move columns to the right using &lt;code&gt;.col-md-offset-*&lt;/code&gt; classes. These classes increase the left margin of a column by * columns. For example, &lt;code&gt;.col-md-offset-4&lt;/code&gt; moves &lt;code&gt;.col-md-4&lt;/code&gt; over four columns:&lt;/p&gt;

&lt;h1 id=&#34;grid-system-examples&#34;&gt;Grid System Examples&lt;/h1&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;qLfBk&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/qLfBk/&#39;&gt;Bootstrap CSS: Grids&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;headings-and-secondary-text&#34;&gt;Headings and Secondary Text&lt;/h1&gt;

&lt;p&gt;All HTML headings, &lt;code&gt;h1&lt;/code&gt; through &lt;code&gt;h6&lt;/code&gt;, are available. .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline.&lt;/p&gt;

&lt;p&gt;Create lighter, secondary text in any heading with a generic &lt;code&gt;small&lt;/code&gt; tag or the .small class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;h1. Bootstrap heading &amp;lt;small&amp;gt;Secondary text&amp;lt;/small&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;h2. Bootstrap heading &amp;lt;small&amp;gt;Secondary text&amp;lt;/small&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;h3. Bootstrap heading &amp;lt;small&amp;gt;Secondary text&amp;lt;/small&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;h4&amp;gt;h4. Bootstrap heading &amp;lt;small&amp;gt;Secondary text&amp;lt;/small&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;h5&amp;gt;h5. Bootstrap heading &amp;lt;small&amp;gt;Secondary text&amp;lt;/small&amp;gt;&amp;lt;/h5&amp;gt;
&amp;lt;h6&amp;gt;h6. Bootstrap heading &amp;lt;small&amp;gt;Secondary text&amp;lt;/small&amp;gt;&amp;lt;/h6&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;body-copy&#34;&gt;Body copy&lt;/h1&gt;

&lt;p&gt;Bootstrap&amp;rsquo;s global default &lt;code&gt;font-size&lt;/code&gt; is 14px, with a &lt;code&gt;line-height&lt;/code&gt; of 1.428. This is applied to the &lt;code&gt;body&lt;/code&gt; and all paragraphs. In addition, &lt;code&gt;p&lt;/code&gt; (paragraphs) receive a bottom margin of half their computed &lt;code&gt;line-height&lt;/code&gt; (10px by default).&lt;/p&gt;

&lt;p&gt;Make a paragraph stand out by adding &lt;code&gt;.lead&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;inline-text-elements&#34;&gt;Inline text elements&lt;/h1&gt;

&lt;p&gt;&lt;p data-height=&#34;268&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;hoLwb&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/hoLwb/&#39;&gt;Inline text element&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;alignment-classes&#34;&gt;Alignment classes&lt;/h1&gt;

&lt;p&gt;Easily realign text to components with text alignment classes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;text-left&amp;quot;&amp;gt;Left aligned text.&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-center&amp;quot;&amp;gt;Center aligned text.&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-right&amp;quot;&amp;gt;Right aligned text.&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-justify&amp;quot;&amp;gt;Justified text.&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-nowrap&amp;quot;&amp;gt;No wrap text.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;transformation-clases&#34;&gt;Transformation clases&lt;/h1&gt;

&lt;p&gt;Transform text in components with text capitalization classes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;text-lowercase&amp;quot;&amp;gt;Lowercased text.&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-uppercase&amp;quot;&amp;gt;Uppercased text.&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-capitalize&amp;quot;&amp;gt;Capitalized text.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;abbreviations&#34;&gt;Abbreviations&lt;/h1&gt;

&lt;p&gt;Stylized implementation of HTML&amp;rsquo;s &lt;code&gt;abbr&lt;/code&gt; element for abbreviations and acronyms to show the expanded version on hover. Abbreviations with a &lt;code&gt;title&lt;/code&gt; attribute have a light dotted bottom border and a help cursor on hover, providing additional context on hover.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;abbr title=&amp;quot;attribute&amp;quot;&amp;gt;attr&amp;lt;/abbr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h1&gt;

&lt;p&gt;For quoting blocks of content from another source within your document.&lt;/p&gt;

&lt;p&gt;Add a &lt;code&gt;footer&lt;/code&gt; for identifying the source. Add &lt;code&gt;.blockquote-reverse&lt;/code&gt; for a blockquote with right-aligned content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&amp;lt;/p&amp;gt;
  &amp;lt;footer&amp;gt;Someone famous in &amp;lt;cite title=&amp;quot;Source Title&amp;quot;&amp;gt;Source Title&amp;lt;/cite&amp;gt;&amp;lt;/footer&amp;gt;
&amp;lt;/blockquote&amp;gt;

&amp;lt;blockquote class=&amp;quot;blockquote-reverse&amp;quot;&amp;gt;
  ...
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lists&#34;&gt;Lists&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;

&amp;lt;ul class=&amp;quot;list-unstyled&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul class=&amp;quot;list-inline&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;dl class=&amp;quot;dl-horizontal&amp;quot;&amp;gt;
  &amp;lt;dt&amp;gt;...&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;...&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;codes&#34;&gt;Codes&lt;/h1&gt;

&lt;p&gt;Wrap inline snippets of code with &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;For example, `&amp;amp;lt;section&amp;amp;gt;` should be wrapped as inline.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;user-input&#34;&gt;User Input&lt;/h1&gt;

&lt;p&gt;Use the &lt;code&gt;kbd&lt;/code&gt; to indicate input that is typically entered via keyboard.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;To switch directories, type &amp;lt;kbd&amp;gt;cd&amp;lt;/kbd&amp;gt; followed by the name of the directory.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;basic-block&#34;&gt;Basic block&lt;/h1&gt;

&lt;p&gt;Use &lt;code&gt;&amp;amp;lt;pre&amp;amp;gt;&lt;/code&gt; for multiple lines of code. Be sure to escape any angle brackets in the code for proper rendering.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;amp;lt;p&amp;amp;gt;Sample text here...&amp;amp;lt;/p&amp;amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may optionally add the &lt;code&gt;.pre-scrollable&lt;/code&gt; class, which will set a max-height of 350px and provide a y-axis scrollbar.&lt;/p&gt;

&lt;h1 id=&#34;varible&#34;&gt;Varible&lt;/h1&gt;

&lt;p&gt;For indicating variables use the &lt;code&gt;&amp;amp;lt;var&amp;amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;var&amp;gt;y&amp;lt;/var&amp;gt; = &amp;lt;var&amp;gt;m&amp;lt;/var&amp;gt;&amp;lt;var&amp;gt;x&amp;lt;/var&amp;gt; + &amp;lt;var&amp;gt;b&amp;lt;/var&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;sample-output&#34;&gt;Sample output&lt;/h1&gt;

&lt;p&gt;For indicating blocks sample output from a program use the &lt;code&gt;&amp;amp;lt;samp&amp;amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;samp&amp;gt;This text is meant to be treated as sample output from a computer program.&amp;lt;/samp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;typography-examples&#34;&gt;Typography Examples&lt;/h1&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/ILeCa/&#34;&gt;Bootstrap CSS: Typography&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;basic-example&#34;&gt;Basic example&lt;/h1&gt;

&lt;p&gt;For basic styling—light padding and only horizontal dividers—add the base class .table to any &lt;code&gt;table&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table class=&amp;quot;table&amp;quot;&amp;gt;
  ...
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;bordered-table&#34;&gt;Bordered table&lt;/h1&gt;

&lt;p&gt;Add &lt;code&gt;.table-bordered&lt;/code&gt; for borders on all sides of the table and cells.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table class=&amp;quot;table table-bordered&amp;quot;&amp;gt;
  ...
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;hover-rows&#34;&gt;Hover rows&lt;/h1&gt;

&lt;p&gt;Add &lt;code&gt;.table-hover&lt;/code&gt; to enable a hover state on table rows within a &lt;code&gt;tbody&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table class=&amp;quot;table table-hover&amp;quot;&amp;gt;
  ...
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;condensed-table&#34;&gt;Condensed table&lt;/h1&gt;

&lt;p&gt;Add &lt;code&gt;.table-condensed&lt;/code&gt; to make tables more compact by cutting cell padding in half.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table class=&amp;quot;table table-condensed&amp;quot;&amp;gt;
  ...
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;contextual-classes&#34;&gt;Contextual classes&lt;/h1&gt;

&lt;p&gt;Use contextual classes to color table rows or individual cells:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- On rows --&amp;gt;
&amp;lt;tr class=&amp;quot;active&amp;quot;&amp;gt;...&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;success&amp;quot;&amp;gt;...&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;warning&amp;quot;&amp;gt;...&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;danger&amp;quot;&amp;gt;...&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;info&amp;quot;&amp;gt;...&amp;lt;/tr&amp;gt;

&amp;lt;!-- On cells (`td` or `th`) --&amp;gt;
&amp;lt;tr&amp;gt;
  &amp;lt;td class=&amp;quot;active&amp;quot;&amp;gt;...&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;success&amp;quot;&amp;gt;...&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;warning&amp;quot;&amp;gt;...&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;danger&amp;quot;&amp;gt;...&amp;lt;/td&amp;gt;
  &amp;lt;td class=&amp;quot;info&amp;quot;&amp;gt;...&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;responsive-tables&#34;&gt;Responsive tables&lt;/h1&gt;

&lt;p&gt;Create responsive tables by wrapping any &lt;code&gt;.table&lt;/code&gt; in &lt;code&gt;.table-responsive&lt;/code&gt; to make them scroll horizontally on small devices (under 768px). When viewing on anything larger than 768px wide, you will not see any difference in these tables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;table-responsive&amp;quot;&amp;gt;
  &amp;lt;table class=&amp;quot;table&amp;quot;&amp;gt;
    ...
  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;table-examples&#34;&gt;Table Examples&lt;/h1&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/wqrFH/&#34;&gt;Bootstrap CSS: Tables&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script async src=&#34;//codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;basic-example-1&#34;&gt;Basic example&lt;/h1&gt;

&lt;p&gt;Individual form controls automatically receive some global styling. All textual &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; elements with .form-control are set to &lt;code&gt;width: 100%;&lt;/code&gt; by default. Wrap labels and controls in &lt;code&gt;.form-group&lt;/code&gt; for optimum spacing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form role=&amp;quot;form&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;exampleInputEmail1&amp;quot;&amp;gt;Email address&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;email&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;exampleInputEmail1&amp;quot; placeholder=&amp;quot;Enter email&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;exampleInputPassword1&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;password&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;exampleInputPassword1&amp;quot; placeholder=&amp;quot;Password&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;exampleInputFile&amp;quot;&amp;gt;File input&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;exampleInputFile&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;checkbox&amp;quot;&amp;gt;
    &amp;lt;label&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt; Check me out
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-default&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;inline-form&#34;&gt;Inline form&lt;/h1&gt;

&lt;p&gt;Add &lt;code&gt;.form-inline&lt;/code&gt; to your &lt;code&gt;form&lt;/code&gt; for left-aligned and inline-block controls. This only applies to forms within viewports that are at least &lt;code&gt;768px&lt;/code&gt; wide.&lt;/p&gt;

&lt;p&gt;For these inline forms, you can hide the labels using the &lt;code&gt;.sr-only&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form class=&amp;quot;form-inline&amp;quot; role=&amp;quot;form&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;sr-only&amp;quot; for=&amp;quot;exampleInputEmail2&amp;quot;&amp;gt;Email address&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;email&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;exampleInputEmail2&amp;quot; placeholder=&amp;quot;Enter email&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;input-group-addon&amp;quot;&amp;gt;@&amp;lt;/div&amp;gt;
      &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Enter email&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;sr-only&amp;quot; for=&amp;quot;exampleInputPassword2&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;password&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;exampleInputPassword2&amp;quot; placeholder=&amp;quot;Password&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;checkbox&amp;quot;&amp;gt;
    &amp;lt;label&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt; Remember me
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-default&amp;quot;&amp;gt;Sign in&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;horizontal-form&#34;&gt;Horizontal form&lt;/h1&gt;

&lt;p&gt;Use Bootstrap&amp;rsquo;s predefined grid classes to align labels and groups of form controls in a horizontal layout by adding &lt;code&gt;.form-horizontal&lt;/code&gt; to the form. Doing so changes &lt;code&gt;.form-groups&lt;/code&gt; to behave as grid rows, so no need for &lt;code&gt;.row&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form class=&amp;quot;form-horizontal&amp;quot; role=&amp;quot;form&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;inputEmail3&amp;quot; class=&amp;quot;col-sm-2 control-label&amp;quot;&amp;gt;Email&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;col-sm-10&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;email&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;inputEmail3&amp;quot; placeholder=&amp;quot;Email&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;inputPassword3&amp;quot; class=&amp;quot;col-sm-2 control-label&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;col-sm-10&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;password&amp;quot; class=&amp;quot;form-control&amp;quot; id=&amp;quot;inputPassword3&amp;quot; placeholder=&amp;quot;Password&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;col-sm-offset-2 col-sm-10&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;checkbox&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
          &amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt; Remember me
        &amp;lt;/label&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;col-sm-offset-2 col-sm-10&amp;quot;&amp;gt;
      &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-default&amp;quot;&amp;gt;Sign in&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;input-focus&#34;&gt;Input focus&lt;/h1&gt;

&lt;p&gt;Bootstrap remove the default outline styles on some form controls and apply a &lt;code&gt;box-shadow&lt;/code&gt; in its place for &lt;code&gt;:focus&lt;/code&gt;:&lt;/p&gt;

&lt;h1 id=&#34;validation-states&#34;&gt;Validation states&lt;/h1&gt;

&lt;p&gt;Bootstrap includes validation styles for error, warning, and success states on form controls. To use, add &lt;code&gt;.has-warning&lt;/code&gt;, &lt;code&gt;.has-error&lt;/code&gt;, or &lt;code&gt;.has-success&lt;/code&gt; to the parent element. Any .control-label, .form-control, and .help-block within that element will receive the validation styles.&lt;/p&gt;

&lt;p&gt;You can also add optional feedback icons with the addition of &lt;code&gt;.has-feedback&lt;/code&gt; and the right icon.&lt;/p&gt;

&lt;h1 id=&#34;control-sizing-and-help-text&#34;&gt;Control sizing and help text&lt;/h1&gt;

&lt;p&gt;Set heights using classes like &lt;code&gt;.input-lg&lt;/code&gt;, and set widths using grid column classes like &lt;code&gt;.col-lg-*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Wrap inputs in grid columns, or any custom parent element, to easily enforce desired widths.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/kAeGg/&#34;&gt;Bootstrap CSS: Forms&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;options&#34;&gt;Options&lt;/h1&gt;

&lt;p&gt;Use any of the available button classes to quickly create a styled button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Standard button --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default&amp;quot;&amp;gt;Default&amp;lt;/button&amp;gt;

&amp;lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Primary&amp;lt;/button&amp;gt;

&amp;lt;!-- Indicates a successful or positive action --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-success&amp;quot;&amp;gt;Success&amp;lt;/button&amp;gt;

&amp;lt;!-- Contextual button for informational alert messages --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-info&amp;quot;&amp;gt;Info&amp;lt;/button&amp;gt;

&amp;lt;!-- Indicates caution should be taken with this action --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-warning&amp;quot;&amp;gt;Warning&amp;lt;/button&amp;gt;

&amp;lt;!-- Indicates a dangerous or potentially negative action --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-danger&amp;quot;&amp;gt;Danger&amp;lt;/button&amp;gt;

&amp;lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-link&amp;quot;&amp;gt;Link&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;sizes&#34;&gt;Sizes&lt;/h1&gt;

&lt;p&gt;Fancy larger or smaller buttons? Add &lt;code&gt;.btn-lg&lt;/code&gt;, &lt;code&gt;.btn-sm&lt;/code&gt;, or &lt;code&gt;.btn-xs&lt;/code&gt; for additional sizes
Create block level buttons—those that span the full width of a parent— by adding &lt;code&gt;.btn-block.&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary btn-lg&amp;quot;&amp;gt;Large button&amp;lt;/button&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default btn-lg&amp;quot;&amp;gt;Large button&amp;lt;/button&amp;gt;

&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Default button&amp;lt;/button&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default&amp;quot;&amp;gt;Default button&amp;lt;/button&amp;gt;

&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary btn-sm&amp;quot;&amp;gt;Small button&amp;lt;/button&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default btn-sm&amp;quot;&amp;gt;Small button&amp;lt;/button&amp;gt;

&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary btn-xs&amp;quot;&amp;gt;Extra small button&amp;lt;/button&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default btn-xs&amp;quot;&amp;gt;Extra small button&amp;lt;/button&amp;gt;

&amp;lt;!-- Block level button --&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary btn-lg btn-block&amp;quot;&amp;gt;Block level button&amp;lt;/button&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default btn-lg btn-block&amp;quot;&amp;gt;Block level button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;active-state&#34;&gt;Active state&lt;/h1&gt;

&lt;p&gt;Buttons will appear pressed (with a darker background, darker border, and inset shadow) when active. For &lt;code&gt;button&lt;/code&gt; elements, this is done via &lt;code&gt;:active&lt;/code&gt;. For &lt;code&gt;a&lt;/code&gt; elements, it&amp;rsquo;s done with &lt;code&gt;.active&lt;/code&gt;. However, you may use &lt;code&gt;.active&lt;/code&gt; on &lt;code&gt;button&lt;/code&gt; should you need to replicate the active state programmatically.&lt;/p&gt;

&lt;h1 id=&#34;disabled-state&#34;&gt;Disabled state&lt;/h1&gt;

&lt;p&gt;Make buttons look unclickable by fading them back 50%.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;disabled&lt;/code&gt; attribute to &lt;code&gt;button&lt;/code&gt; or &lt;code&gt;.disabled&lt;/code&gt; class to &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-lg btn-primary&amp;quot; disabled=&amp;quot;disabled&amp;quot;&amp;gt;Primary button&amp;lt;/button&amp;gt;
&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default btn-lg&amp;quot; disabled=&amp;quot;disabled&amp;quot;&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;!-- Anchors elements --&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;btn btn-primary btn-lg disabled&amp;quot; role=&amp;quot;button&amp;quot;&amp;gt;Primary link&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;btn btn-default btn-lg disabled&amp;quot; role=&amp;quot;button&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/Chnep/&#34;&gt;Bootstrap CSS: Buttons&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;responsive-images&#34;&gt;Responsive images&lt;/h1&gt;

&lt;p&gt;Images in Bootstrap 3 can be made responsive-friendly via the addition of the &lt;code&gt;.img-responsive&lt;/code&gt; class. This applies &lt;code&gt;max-width: 100%;&lt;/code&gt; and &lt;code&gt;height: auto;&lt;/code&gt; to the image so that it scales nicely to the parent element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;...&amp;quot; class=&amp;quot;img-responsive&amp;quot; alt=&amp;quot;Responsive image&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;images-shapes&#34;&gt;Images shapes&lt;/h1&gt;

&lt;p&gt;Add classes to an &lt;code&gt;img&lt;/code&gt; element to easily style images in any project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;...&amp;quot; alt=&amp;quot;...&amp;quot; class=&amp;quot;img-rounded&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;...&amp;quot; alt=&amp;quot;...&amp;quot; class=&amp;quot;img-circle&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;...&amp;quot; alt=&amp;quot;...&amp;quot; class=&amp;quot;img-thumbnail&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/ILkHg/&#34;&gt;Images shapes&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;contextual-colors&#34;&gt;Contextual colors&lt;/h1&gt;

&lt;p&gt;Convey meaning through color with a handful of emphasis utility classes: &lt;code&gt;text-muted&lt;/code&gt;, &lt;code&gt;text-primary&lt;/code&gt;, &lt;code&gt;text-success&lt;/code&gt;, &lt;code&gt;text-info&lt;/code&gt;, &lt;code&gt;text-warning&lt;/code&gt;, &lt;code&gt;text-danger&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;text-muted&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-primary&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-success&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-info&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-warning&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;text-danger&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;contextual-backgrounds&#34;&gt;Contextual backgrounds&lt;/h1&gt;

&lt;p&gt;Similar to the contextual text color classes, easily set the &lt;code&gt;background&lt;/code&gt; of an element to any contextual class. Anchor components will darken on hover, just like the text classes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;bg-primary&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;bg-success&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;bg-info&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;bg-warning&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;bg-danger&amp;quot;&amp;gt;...&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;close-icon&#34;&gt;Close icon&lt;/h1&gt;

&lt;p&gt;Use the generic close icon for dismissing content like modal and alert.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;sr-only&amp;quot;&amp;gt;Close&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;carets&#34;&gt;Carets&lt;/h1&gt;

&lt;p&gt;Use carets to indicate drop-down functionality and direction.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;quick-floats&#34;&gt;Quick floats&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;pull-left&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;pull-right&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;center-content-blocks&#34;&gt;Center content blocks&lt;/h1&gt;

&lt;p&gt;Set an element to &lt;code&gt;display: block&lt;/code&gt; and center via &lt;code&gt;margin&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;center-block&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;clearfix&#34;&gt;Clearfix&lt;/h1&gt;

&lt;p&gt;Easily clear floats by adding &lt;code&gt;.clearfix&lt;/code&gt; to the parent element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Usage as a class --&amp;gt;
&amp;lt;div class=&amp;quot;clearfix&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;showing-and-hiding-content&#34;&gt;Showing and hiding content&lt;/h1&gt;

&lt;p&gt;Force an element to be shown or hidden (including for screen readers) with the use of &lt;code&gt;.show&lt;/code&gt; and &lt;code&gt;.hidden&lt;/code&gt; classes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;show&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;hidden&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;helper-classes-examples&#34;&gt;Helper Classes Examples&lt;/h1&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/zLJKp/&#34;&gt;Helper Classes&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The materials which save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/css&#34;&gt;Bootstrap Official Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Class manipulation in Javascript, jQuery and AngularJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/Class-manipulation-in-Javascript-jQuery-and-AngularJS/</link>
      <pubDate>Wed, 02 Jul 2014 23:24:37 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Class-manipulation-in-Javascript-jQuery-and-AngularJS/</guid>
      <description>&lt;p&gt;In this article, I would like to create short reference for how &lt;code&gt;add/remove/toogle&lt;/code&gt; class in pure Javascript and with framework.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;javascript&#34;&gt;Javascript&lt;/h1&gt;

&lt;h2 id=&#34;classname&#34;&gt;className&lt;/h2&gt;

&lt;p&gt;Property &lt;code&gt;className&lt;/code&gt; has value of HTML-atribute &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body class=&amp;quot;class1 class2&amp;quot;&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(document.body.className);
//class1 class2

document.body.className += &#39; class3&#39;;

console.log(document.body.className);
//class1 class2 class3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;classlist&#34;&gt;classList&lt;/h2&gt;

&lt;p&gt;Property &lt;code&gt;classList&lt;/code&gt; gives convenient interface for work with certain classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.classList.contains(cls)&lt;/code&gt; - return &lt;code&gt;true/false&lt;/code&gt; if element has class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.classList.add/remove(cls)&lt;/code&gt; - adding/removing class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.classList.toogle(cls)&lt;/code&gt; - if element has class &lt;code&gt;cls&lt;/code&gt;, remove it, else add class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jquery&#34;&gt;jQuery&lt;/h1&gt;

&lt;p&gt;These methods inspect and manpulate classes assigned to elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(elem).hasClass(cls)&lt;/code&gt; - return &lt;code&gt;true/false&lt;/code&gt; if element has class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(elem).addClass/removeClass(cls)&lt;/code&gt; - adding/removing class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(elem).toogleClass(cls)&lt;/code&gt; - if element has class(es) &lt;code&gt;cls&lt;/code&gt;, remove it, else add class(es) &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angularjs&#34;&gt;AngularJS&lt;/h1&gt;

&lt;h2 id=&#34;ng-class&#34;&gt;ng-class&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ng-class&lt;/code&gt; accepts an &amp;ldquo;expression&amp;rdquo; that must evaluate to one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;string&lt;/code&gt; of space-delimited class names&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;array&lt;/code&gt; of class names&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;map/object&lt;/code&gt; of class names to boolean values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/yjiAp/&#34;&gt;AngularJS, ng-class example&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.
&lt;script async src=&#34;//codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ng-style&#34;&gt;ng-style&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ng-style&lt;/code&gt; accepts an &amp;ldquo;expression&amp;rdquo; that must evaluate to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an &lt;code&gt;map/object&lt;/code&gt; of CSS style names to CSS values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/KyBjs/&#34;&gt;AngularJS, ng-style example&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fluid three column layout with positioning, floats, tables and flexbox</title>
      <link>https://qetr1ck-op.github.io/blog/post/Fluid-three-column-layout-with-positioning-floats-tables-and-flexbox/</link>
      <pubDate>Fri, 18 Apr 2014 11:09:46 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Fluid-three-column-layout-with-positioning-floats-tables-and-flexbox/</guid>
      <description>&lt;p&gt;In Web world, fluid layout with 3 column is the most flexible and customizable layout. Mixing percentages and pixels for specify width of column allows create different layouts, for different task.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In article sumbols mean:
*   Here sumbol &lt;code&gt;%&lt;/code&gt; define, that column width is given in persantage of layout width;
*   &lt;code&gt;px&lt;/code&gt;- column width in static pixels;
*   &lt;code&gt;∞&lt;/code&gt; - column occupies all remain width space.&lt;/p&gt;

&lt;h1 id=&#34;using-positioning&#34;&gt;Using positioning&lt;/h1&gt;

&lt;p&gt;To control position layout relative to the parent element layers, necessary establish for parent property - &lt;code&gt;position: relative&lt;/code&gt;. And for child element set &lt;code&gt;position: absolute&lt;/code&gt;, conrols fluid element with &lt;code&gt;right/left&lt;/code&gt;, width in some cases used &lt;code&gt;margin-right/left&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/jtyhi/&#34;&gt;Three column fluid layout with positionig&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.
&lt;script async src=&#34;//codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;floats&#34;&gt;Floats&lt;/h1&gt;

&lt;p&gt;For this approach I used &lt;code&gt;float&lt;/code&gt; in combinatition with properties &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;. In some case used nested or additional &lt;code&gt;div.wrap&lt;/code&gt;, because we can&amp;rsquo;t use in the same time for onу HTML element margin in px and %.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/asfKq/&#34;&gt;Fluid three column layout using floats&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;table-columns&#34;&gt;Table columns&lt;/h1&gt;

&lt;p&gt;Actually, it&amp;rsquo;s convinient to use table when you want to create column with same height. Width of column calculated automatcaly based on their content so I just need to specify the require width. Remain columns would streach to avaible width of table.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/olGHE/&#34;&gt;Fluid three column layout using table&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;flex-box&#34;&gt;Flex box&lt;/h1&gt;

&lt;p&gt;Most layout or if you want grid system use one of next methods: &lt;code&gt;positioning&lt;/code&gt;, &lt;code&gt;tables&lt;/code&gt;, and most popular - &lt;code&gt;inline-blocks&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt;. All this methods have pretty significaте problems and limetations.&lt;/p&gt;

&lt;p&gt;For for achive bunch of three column layout Flex boxes are super ease. In generaly I used for parents : &lt;code&gt;display: flex&lt;/code&gt; and for children &lt;code&gt;flex: 1&lt;/code&gt; it&amp;rsquo;s shorthand for &lt;code&gt;flex-grow, flex-shrink and flex-basis&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In furture post I should discover this literally one of the most promosing feature of web disign.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/uAfrh/&#34;&gt;Fluid three column layout with flexbox&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This resources Save My Day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://htmlbook.ru/samlayout/tipovye-makety/rezinovyi-trekhkolonochnyi-maket&#34;&gt;htmlbook.ru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://css-tricks.com/snippets/css/a-guide-to-flexbox/&#34;&gt;css-tricks.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://philipwalton.github.io/solved-by-flexbox/demos/grids/&#34;&gt;Solved by Flexbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>