<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angularjs on OP blog</title>
    <link>https://qetr1ck-op.github.io/blog/categories/angularjs/index.xml</link>
    <description>Recent content in Angularjs on OP blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://qetr1ck-op.github.io/blog/categories/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NG6 starter for new Angular projects</title>
      <link>https://qetr1ck-op.github.io/blog/post/NG6-starter-for-new-Angular-projects/</link>
      <pubDate>Sun, 18 Sep 2016 19:03:17 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/NG6-starter-for-new-Angular-projects/</guid>
      <description>&lt;p&gt;The de-facto starter repo for building scalable apps with AngularJS ^1.5, ES6, Gulp and Webpack&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gebidesign/NG6-starter-sass#ng6&#34;&gt;Github repo&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Start new project on Angular ^1.5</title>
      <link>https://qetr1ck-op.github.io/blog/post/Start-new-project-on-Angular-1-5/</link>
      <pubDate>Sun, 18 Sep 2016 18:42:49 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Start-new-project-on-Angular-1-5/</guid>
      <description>&lt;p&gt;Great series of recommendation how/why to start new &amp;ldquo;NG2 ready&amp;rdquo; Angular 1.5 app with architecture of component-oriented approach.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;how-to-do-it-right&#34;&gt;How to do it right&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://velesin.io/2016/04/14/starting-a-new-app-in-angular-1-5/&#34;&gt;Starting a new app in Angular 1.5, does it make sense?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velesin.io/2016/04/26/angular-1-5-app-as-a-tree-of-components/&#34;&gt;Angular 1.5 app as tree of components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velesin.io/2016/05/18/communication-between-angular-1-5-components/&#34;&gt;Communication between Angular 1.5 components and with API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velesin.io/2016/05/31/angular-1-5-fractal-project-structure/&#34;&gt;A flexible Angular 1.5 project structure (the &amp;ldquo;fractal&amp;rdquo; approach)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velesin.io/2016/07/12/angular-1-5-project-in-es6-es2015/&#34;&gt;Writing Angular 1.5 in ES6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velesin.io/2016/08/23/unit-testing-angular-1-5-components/&#34;&gt;Unit testing Angular 1.5 components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;style-guides-for-app&#34;&gt;Style guides for app&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/toddmotto/angular-styleguide&#34;&gt;AngularJS styleguide from Todd Motto&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;generators&#34;&gt;Generators&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Swiip/generator-gulp-angular/blob/master/docs/usage.md#features-included-in-the-gulpfile&#34;&gt;Yo gulp-angular generator&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lifecycle hooks in AngularJS 1.5</title>
      <link>https://qetr1ck-op.github.io/blog/post/Lifecycle-hooks-in-AngularJS-1-5/</link>
      <pubDate>Sun, 04 Sep 2016 10:48:03 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Lifecycle-hooks-in-AngularJS-1-5/</guid>
      <description>&lt;p&gt;Lifecycle hooks are simple functions that are called at specific points of a component&amp;rsquo;s life in Angular apps. They landed in AngularJS 1.5 and are used with &lt;code&gt;.component()&lt;/code&gt; method and they were inspired of Angular 2 hooks.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;oninit-require&#34;&gt;&amp;rdquo;$onInit&amp;rdquo; + &amp;ldquo;require&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s create tabs component that uses &lt;code&gt;$onInit&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt;. Full working exapmle:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/vshmyfe8/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;postling&#34;&gt;&amp;rdquo;$postLing&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;$postLink&lt;/code&gt; gives as non-hacky-looking way to control &lt;code&gt;link&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;We can actually use the it to set an initial value for active tab:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/jm0b38ma/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;onchanges&#34;&gt;&amp;rdquo;$onChanges&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;This is the most important one, and allow use component architecture with one-way data flow!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$onChanges&lt;/code&gt; method is called for a few reasons. The first is on component in initialization - component gets initial &lt;code&gt;changes&lt;/code&gt; object. The second reason it gets called is only when changes occur to &lt;code&gt;&amp;lt;&lt;/code&gt; (one-way databinding) and &lt;code&gt;@&lt;/code&gt; (for evaluating DOM attribute values) that are being bound the parent component.&lt;/p&gt;

&lt;p&gt;Once the &lt;code&gt;$onChenges&lt;/code&gt; gets called, you get special &lt;code&gt;changes&lt;/code&gt; object back:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var childComponent = {
  bindings: { user: &#39;&amp;lt;&#39; },
  controller: function () {
    this.$onChanges = function (changes) {
      // `changes` is a special instance of a constructor Object,
      // it contains a hash of a change Object and
      // also contains a function called `isFirstChange()`
      // it&#39;s implemented in the source code using a constructor Object
      // and prototype method to create the function `isFirstChange()`
    };
  }
};

angular
  .module(&#39;app&#39;)
  .component(&#39;childComponent&#39;, childComponent);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In example we&amp;rsquo;re using &lt;code&gt;bindings: { user: &#39;&amp;lt;&#39; }&lt;/code&gt; which means we receive he data through one-way databinding under the alias of &lt;code&gt;user&lt;/code&gt;:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/8cj1t4n7/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;cloning-changes-for-immutable-bindings&#34;&gt;Cloning &amp;ldquo;changes&amp;rdquo; for &amp;ldquo;immutable&amp;rdquo; bindings&lt;/h2&gt;

&lt;p&gt;Data passed through one-way databinding are not &lt;code&gt;$watch&lt;/code&gt;ed by Angular, however they are passed by reference. It means that any changes we make with object (primitives are not passed by reference) it affects the parent object, which acts as two-way databinding. We can clone data which are passed for non polluting changes from child to parent:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/Lf4y3oad/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;one-way-data-flow-events&#34;&gt;One-way data-flow + events&lt;/h2&gt;

&lt;p&gt;To get data back up to our &lt;code&gt;parentComponent&lt;/code&gt;, we need to delegate a function to be used as an event callback, let’s add a function called &lt;code&gt;updateUser&lt;/code&gt;, which expects an &lt;code&gt;event&lt;/code&gt; back as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var parentComponent = {
  ...
  controller: function () {
    ...
    this.updateUser = function (event) {
      this.user = event.user;
    };
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of just passig back &lt;code&gt;this.user&lt;/code&gt; into the function, we’re going to fake an &lt;code&gt;$event&lt;/code&gt; object, which complies with how Angular 2 does this (using EventEmitter), and also provides global consistency between your templates to fetch data back through the &lt;code&gt;$ctrl.updateUser($event);&lt;/code&gt; call we delegate down into the child component. The &lt;code&gt;$event&lt;/code&gt; argument is a real thing in Angular, you can use it with ng-submit and so on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var childComponent = {
  ...
  controller: function () {
    ...
    this.saveUser = function () {
      this.onUpdate({
        $event: {
          user: this.user
        }
      });
    };
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full example with delegating update of object:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/0rb4nsma/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;is-two-way-databinding-via-syntax-is-dead&#34;&gt;Is two-way databinding via syntax &amp;ldquo;=&amp;rdquo; is dead?&lt;/h2&gt;

&lt;p&gt;Yes. One-way bindings establishes as the best approach for data flow. React, Angular 2 and other all use it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://toddmotto.com/img/posts/binding-dead.jpg&#34; alt=&#34;Rip two-way bindings&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;ondestroy&#34;&gt;&amp;rdquo;$onDestroy&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;re using &lt;code&gt;$postLink&lt;/code&gt; to set DOM event listener or any non-native Angular logic, &lt;code&gt;$onDestroy&lt;/code&gt; is the place to clean up everything.&lt;/p&gt;

&lt;p&gt;The old &lt;code&gt;$scope&lt;/code&gt; way was kind of this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function SomeController($scope) {
  $scope.$on(&#39;$destroy&#39;, function () {
    // destroy event
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With new school it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var childComponent = {
  bindings: {
    user: &#39;&amp;lt;&#39;
  },
  controller: function () {
    this.$onDestroy = function () {
      // component scope is destroyed
    };
  }
};

angular
  .module(&#39;app&#39;)
  .component(&#39;childComponent&#39;, childComponent);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;docheck&#34;&gt;&amp;rdquo;$doCheck&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;In version 1.5.8 a new hook is introduced: &lt;code&gt;$doCheck&lt;/code&gt;. And this is the equivalent of the angular 2 &lt;code&gt;ngDoCheck&lt;/code&gt; implementation. It also serves the same purpose as the &lt;code&gt;$onChanges&lt;/code&gt;, allow to act on changes made to the bindable fields of a component. As &lt;code&gt;$onChanges&lt;/code&gt; uses the built-in change detection of angular, the &lt;code&gt;$doCheck&lt;/code&gt; implementation is totally up to you. The hook is called for every digest cycle of the component and just let’s you know you should check your bindings on changes so you can act on it.&lt;/p&gt;

&lt;p&gt;One of the case this could be useful is when you make use of the one-way &lt;code&gt;(&amp;lt;)&lt;/code&gt; binding for passing objects. In this case the &lt;code&gt;$onChanges&lt;/code&gt; hook will be called if the reference of the object changes and not when fields on the object it self change. So currently you had 2 possibilities to solve this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always make sure you are passing a new object. This way $onChanges hook will be called for every change because the reference of the object will change from time to time.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// the following won&#39;t trigger $onChanges.

function get() { 
  api.getData().then( (data) =&amp;gt; {
    ctrl.someModel.data = data
  }
}

// pass new object every time after changes
function get() { 
  api.getData().then( (data=&#39;42&#39;) =&amp;gt; {
    const updatedModel = Object.assign(ctrl.someModel, data);
    ctrl.someModel = updatedModel
  }
}

// And in the child component (assuming the model as been binded as &#39;data&#39;):

this.$onInit = function(bindings) {
  if (bindings.data &amp;amp;&amp;amp; bindings.data.currentValue) {
    console.log(bindings.data.currentValue) // &#39;42&#39; 
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Add a watch on the object to keep track of the changes. This also means you need to destroy and recreate the the watch every the reference of the object changes and you have an (unwanted) dependency on $scope inside your component:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.component(&amp;quot;component&amp;quot;,{
    template: &amp;quot;&amp;lt;div&amp;gt;{{$ctrl.item}}&amp;lt;/div&amp;gt;&amp;quot;,
    bindings: {
        inputItem: &amp;quot;&amp;lt;item&amp;quot;
    },
    controller: [&amp;quot;$scope&amp;quot;, function($scope){
        var $ctrl = this;
        var destroyWatch;
        this.$onChanges = function(changeObj){
            if(changeObj.inputItem){
                this.item = 
                  angular.copy(changeObj.inputItem.currentValue);
                if(destroyWatch) destroyWatch();
                destroyWatch = $scope.watch(function (){ 
                    return changeObj.inputItem.currentValue 
                }, function (){ /* handle Changes */ })
            }
        }
    }
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$doCheck&lt;/code&gt; hook now adds a third possibility to solve this issue. By checking manually if the object has changed you can act on it. This can be done by storing the passed value into a local variable, so it can be used in the next call as previous value for comparison:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.component(&amp;quot;component&amp;quot;,{
    template: &amp;quot;&amp;lt;div&amp;gt;{{$ctrl.item}}&amp;lt;/div&amp;gt;&amp;quot;,
    bindings: {
        inputItem: &amp;quot;&amp;lt;item&amp;quot;
    },
    controller: function(){
        var $ctrl = this;
        var previousInputItem;
        this.$doCheck = function(){
            if(!angular.equals(previousInputItem, this.inputItem)){
                previousInputItem = this.inputItem;
                this.item = angular.copy(this.inputItem);
            }
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change detection in angular 1.x is done using digest cycles and for every cycle the &lt;code&gt;$doCheck&lt;/code&gt; hook will be called. This means this will be called a lot. This is why you have the be careful using this hook so it doesn’t cause any performance issues. Also keep in mind that any change made to the model inside the &lt;code&gt;$doCheck&lt;/code&gt; hook will trigger a new digest cycle. If implemented wrong this can result into a loop of digest cycles.&lt;/p&gt;

&lt;p&gt;In angular 2 the change is implemented on a different (more performant) way and this will result in less calls of the &lt;code&gt;ngDoCheck&lt;/code&gt;. It will also throw an error if you trigger changes outside of the component in prod mode.&lt;/p&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toddmotto.com/angular-1-5-lifecycle-hooks#real-world-postlink&#34;&gt;Todd Motto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kristofdegrave.be/2016/07/component-lifecycle-docheck-angular-15x_22.html&#34;&gt;$doCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.angularjs.org/guide/component&#34;&gt;Off docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Moving from &#34;ngModel.$parsers&#34;/&#34;ng-if&#34; to &#34;ngModel.$validators&#34;/&#34;ngMessages&#34;</title>
      <link>https://qetr1ck-op.github.io/blog/post/Moving-from-ngModel-parsers-ng-if-to-ngModel-validators-ngMessages/</link>
      <pubDate>Sat, 03 Sep 2016 22:24:46 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Moving-from-ngModel-parsers-ng-if-to-ngModel-validators-ngMessages/</guid>
      <description>&lt;p&gt;Implementation custom Model validation is typically done by extending the built-in &lt;code&gt;$error&lt;/code&gt; object to &lt;code&gt;ngForm&lt;/code&gt; models.&lt;/p&gt;

&lt;p&gt;Prior to AngularJS 1.3 custom validation was done by injecting a function into the &lt;code&gt;ngModel.$parsers&lt;/code&gt; array pipeline and manually setting validation states using &lt;code&gt;$setValidity(&#39;visa&#39;, true)&lt;/code&gt; if the Model value matched a Visa credit card expression format, for example.&lt;/p&gt;

&lt;p&gt;AngularJS 1.3+ has the &lt;code&gt;$validators&lt;/code&gt; pipeline object, which requires no manual setting of validation states.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look of old school way then we can shift to &lt;code&gt;ngModel.$validators&lt;/code&gt; technique.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;old-school-parsers&#34;&gt;Old school &amp;ldquo;$parsers&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Let’s take some basic form markup, binding &lt;code&gt;name=&amp;quot;myForm&amp;quot;&lt;/code&gt; to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element so Angular takes control of our form and validation states. Next we’ll add an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with the name &lt;code&gt;creditCard&lt;/code&gt;, which builds up the Model Object internally so we can access &lt;code&gt;myForm.creditCard&lt;/code&gt; and handle our validation. I’ve added a &lt;code&gt;validate-visa&lt;/code&gt; attribute, which will serve as the Directive bound to the input, so we can capture the Model and validate it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form name=&amp;quot;myForm&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;Visa validation ($parsers)&amp;lt;/h3&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;creditCard&amp;quot; ng-model=&amp;quot;creditCardModel&amp;quot; validate-visa&amp;gt;
  {{ myForm.creditCard | json }}
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  &amp;quot;$validators&amp;quot;: {},
  &amp;quot;$asyncValidators&amp;quot;: {},
  &amp;quot;$parsers&amp;quot;: [],
  &amp;quot;$formatters&amp;quot;: [
    null
  ],
  &amp;quot;$viewChangeListeners&amp;quot;: [],
  &amp;quot;$untouched&amp;quot;: true,
  &amp;quot;$touched&amp;quot;: false,
  &amp;quot;$pristine&amp;quot;: true,
  &amp;quot;$dirty&amp;quot;: false,
  &amp;quot;$valid&amp;quot;: false,
  &amp;quot;$invalid&amp;quot;: true,
  &amp;quot;$error&amp;quot;: {},
  &amp;quot;$name&amp;quot;: &amp;quot;creditCard&amp;quot;,
  &amp;quot;$options&amp;quot;: null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The generated &lt;code&gt;ngModel.creditCard.$error&lt;/code&gt; object it the place where we need to hook into. At this point we want conditionally toggle DOM based on the boolean value of this property.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;myForm.creditCard.$error.visa&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; create the element, otherwise &lt;code&gt;false&lt;/code&gt; framework will remove it from DOM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form name=&amp;quot;myForm&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;Visa validation ($parsers)&amp;lt;/h3&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;creditCard&amp;quot; ng-model=&amp;quot;creditCardModel&amp;quot; validate-visa&amp;gt;
  &amp;lt;p ng-if=&amp;quot;myForm.creditCard.$error.visa&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Not a valid Visa format
  &amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to write logic for &lt;code&gt;validate-visa&lt;/code&gt; directive to tie in to the &lt;code&gt;ngModel&lt;/code&gt; and set states. Typically it&amp;rsquo;s done by using &lt;code&gt;ngMode.$parsers&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// create a validateVisa function
function validateVisa() {

  // link function
  function link($scope, $element, $attrs, $ctrl) {
    // Some basic Visa Regular Expression
    const VISA_REGEXP = /^4[0-9]{12}(?:[0-9]{3})?$/;
    // visaParser function, passing in the current viewValue
    function visaParser(viewValue) {
      // a Boolean variable evaluated by RegExp.test(String)
      const isValid = VISA_REGEXP.test(viewValue);
      // Manually set the validity of the &amp;quot;visa&amp;quot; property on 
      // the &amp;quot;$error&amp;quot; Object bound to the Model.
      // Note: $ctrl is the fourth argument in the &amp;quot;link&amp;quot; function
      // as we&#39;re requiring &amp;quot;ngModel&amp;quot; (see below in the return {} statement)
      $ctrl.$setValidity(&#39;visa&#39;, isValid);
      // return the &amp;quot;viewValue&amp;quot; if it&#39;s valid or undefined 
      // so Angular doesn&#39;t set the value
      return isValid ? viewValue : undefined; 
    }
    // push the &amp;quot;visaParser&amp;quot; function into the &amp;quot;$parsers&amp;quot; Array
    $ctrl.$parsers.push(visaParser);
  }

  // export the Directive Object
  // which requires the &amp;quot;ngModel&amp;quot; Controller and
  // binds the above &amp;quot;link&amp;quot; function
  return {
    require: &#39;ngModel&#39;,
    link: link
  };
  
}

angular
  .module(&#39;app&#39;)
  .directive(&#39;validateVisa&#39;, validateVisa);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax of pushing a function into &lt;code&gt;$parsers&lt;/code&gt; array isn&amp;rsquo;t very slick and we also manually set the validation state passing in string or boolean, which seems a very procedural way to do a thing.&lt;/p&gt;

&lt;p&gt;At this point &lt;code&gt;$error&lt;/code&gt; object which is bounded to the input looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  ...
  &amp;quot;$error&amp;quot;: {
    &amp;quot;visa&amp;quot;: true
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;new-school-validators&#34;&gt;New school &amp;ldquo;$validators&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;In AngularJS 1.3+ we&amp;rsquo;ve a much better way of doing things!&lt;/p&gt;

&lt;p&gt;Just like before we &lt;code&gt;require: &#39;ngModel&#39;&lt;/code&gt; into directive but instead of using &lt;code&gt;$parsers&lt;/code&gt; we can bind a function straight to &lt;code&gt;$validators&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function validateVisa() {

  function link($scope, $element, $attrs, $ctrl) {
    var VISA_REGEXP = /^4[0-9]{12}(?:[0-9]{3})?$/;
    $ctrl.$validators.visa = function visaParser(modelValue, viewValue) {
      var value = modelValue || viewValue;
      return (VISA_REGEXP.test(value));
    };
  }

  return {
    require: &#39;ngModel&#39;,
    link: link
  };
  
}

angular
  .module(&#39;app&#39;)
  .directive(&#39;validateVisa&#39;, validateVisa);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above doesn’t even need annotating, any &lt;code&gt;$validator&lt;/code&gt; property we add becomes the property name bound to &lt;code&gt;$error&lt;/code&gt;, and we just need to return a boolean. Super simple and much clearer to read. Usage as the Directive from an HTML perspective is identical, it’s just the difference of how we implement the validation that changes&lt;/p&gt;

&lt;h1 id=&#34;old-school-ng-if&#34;&gt;Old school &amp;ldquo;ng-if&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Using &lt;code&gt;ng-if&lt;/code&gt; is super simple, we tell to conditionally swap element based on property state bound to the &lt;code&gt;$error&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form name=&amp;quot;myForm&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;Visa validation (ngIf)&amp;lt;/h3&amp;gt;
  &amp;lt;input 
    type=&amp;quot;text&amp;quot; 
    name=&amp;quot;creditCard&amp;quot; 
    ng-model=&amp;quot;creditCardModel&amp;quot; 
    required=&amp;quot;&amp;quot;
    ng-minlength=&amp;quot;13&amp;quot;
    ng-maxlength=&amp;quot;16&amp;quot;
    validate-visa&amp;gt;
  &amp;lt;p ng-if=&amp;quot;myForm.creditCard.$error.required&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    This field is required
  &amp;lt;/p&amp;gt;
  &amp;lt;p ng-if=&amp;quot;myForm.creditCard.$error.visa&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Not a valid Visa format
  &amp;lt;/p&amp;gt;
  &amp;lt;p ng-if=&amp;quot;myForm.creditCard.$error.minlength&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Minimum of 13 characters
  &amp;lt;/p&amp;gt;
  &amp;lt;p ng-if=&amp;quot;myForm.creditCard.$error.maxlength&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Maximum of 16 characters
  &amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a very manual and repetitive process dealing with each &lt;code&gt;$error&lt;/code&gt; property.&lt;/p&gt;

&lt;h1 id=&#34;new-school-ngmassages&#34;&gt;New school &amp;ldquo;ngMassages&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Unlike &lt;code&gt;ng-if&lt;/code&gt; approach we&amp;rsquo;re passing &lt;code&gt;myForm.creditCard.$error&lt;/code&gt; only once into &lt;code&gt;ngMassages&lt;/code&gt;. The directive will look of &lt;code&gt;$error&lt;/code&gt; object and the corresponding massage will be rendered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form name=&amp;quot;myForm&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;Visa validation (ngMessages)&amp;lt;/h3&amp;gt;
  &amp;lt;input 
    type=&amp;quot;text&amp;quot; 
    name=&amp;quot;creditCard&amp;quot; 
    ng-model=&amp;quot;creditCardModel&amp;quot; 
    required=&amp;quot;&amp;quot;
    ng-minlength=&amp;quot;13&amp;quot;
    ng-maxlength=&amp;quot;16&amp;quot;
    validate-visa&amp;gt;
  &amp;lt;div ng-messages=&amp;quot;myForm.creditCard.$error&amp;quot;&amp;gt;
    &amp;lt;p ng-message=&amp;quot;required&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
      This field is required
    &amp;lt;/p&amp;gt;
    &amp;lt;p ng-message=&amp;quot;visa&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
      Not a valid Visa format
    &amp;lt;/p&amp;gt;
    &amp;lt;p ng-message=&amp;quot;minlength&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
      Minimum of 13 characters
    &amp;lt;/p&amp;gt;
    &amp;lt;p ng-message=&amp;quot;maxlength&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
      Maximum of 16 characters
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For reusable/generic validation states we can use &lt;code&gt;ngMassagesIncule&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/ng-template&amp;quot; id=&amp;quot;generic-messages&amp;quot;&amp;gt;
  &amp;lt;div ng-message=&amp;quot;required&amp;quot;&amp;gt;This field is required&amp;lt;/div&amp;gt;
  &amp;lt;div ng-message=&amp;quot;minlength&amp;quot;&amp;gt;This field is too short&amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And ramp up it with an existing &lt;code&gt;ngMassages&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-messages=&amp;quot;myForm.creditCard.$error&amp;quot;&amp;gt;
  &amp;lt;div ng-messages-include=&amp;quot;generic-messages&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;p ng-message=&amp;quot;visa&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Not a valid Visa format
  &amp;lt;/p&amp;gt;
  &amp;lt;p ng-message=&amp;quot;minlength&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Minimum of 13 characters
  &amp;lt;/p&amp;gt;
  &amp;lt;p ng-message=&amp;quot;maxlength&amp;quot; class=&amp;quot;invalid&amp;quot;&amp;gt;
    Maximum of 16 characters
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are some other powerful features well worth checking out inside ngMessages, see the &lt;a href=&#34;https://docs.angularjs.org/api/ngMessages&#34;&gt;documentation&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toddmotto.com/moving-from-ng-model-parsers-to-ng-model-validates-ng-messages/&#34;&gt;Todd Motto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Front End Interview Questions</title>
      <link>https://qetr1ck-op.github.io/blog/post/Front-End-Interview-Questions/</link>
      <pubDate>Sun, 14 Aug 2016 11:39:13 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Front-End-Interview-Questions/</guid>
      <description>&lt;p&gt;To rock the interview to achieve what you deserve and to improve your concepts about front end technologies, I have consolidated a list of questions and answers. It&amp;rsquo;s a one stop solution for front end interview process.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;web-core&#34;&gt;Web Core&lt;/h1&gt;

&lt;h2 id=&#34;javascript-basics&#34;&gt;JavaScript: basics&lt;/h2&gt;

&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the differences between &lt;code&gt;undeclared&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; JavaScript has two distinct values for nothing, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. Also there are &lt;code&gt;undeclared&lt;/code&gt; variables which don’t even exist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var declaredVariable = 1;

(function scoppedVariables() {
  undeclaredVariable = 1;
  var declaredVariable = 2;
})();

undeclaredVariable;
declaredVariable;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undeclared&lt;/code&gt; when it does not use the var keyword. It gets created on the global object, thus it operates in a different space as the declared variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; means, value of the variable is not defined. JavaScript has a global variable &lt;code&gt;undefined&lt;/code&gt; whose value is &amp;ldquo;undefined&amp;rdquo; and &lt;code&gt;typeof undefined&lt;/code&gt; is also &amp;ldquo;undefined&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; means empty or non-existent value which is used by programmers to indicate “no value”. &lt;code&gt;null&lt;/code&gt; is a primitive value and you can assign &lt;code&gt;null&lt;/code&gt; to any variable. You cannot add properties to it. Sometimes people wrongly assume that it is an object, because &lt;code&gt;typeof null&lt;/code&gt; returns &amp;ldquo;object&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the differences between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;? To what type &lt;code&gt;==&lt;/code&gt; operands will be converted to if they have
different types?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The simplest way of saying that, &lt;code&gt;==&lt;/code&gt; will not check types and &lt;code&gt;===&lt;/code&gt; will check whether both sides are of same type. So, &lt;code&gt;==&lt;/code&gt; under the hood converts to number type if they have not the same type and then do the comparison.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As &lt;code&gt;[]&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;[] == true&lt;/code&gt; should also be &lt;code&gt;true&lt;/code&gt;, right? Explain comparison algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Not.&lt;/p&gt;

&lt;p&gt;You are right about first part, &lt;code&gt;[]&lt;/code&gt;, empty array is an object and object is always truths.&lt;/p&gt;

&lt;p&gt;However, special case about &lt;code&gt;==&lt;/code&gt; (not-strict equal) is that it will do some implicit coercion.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Since left and right side of the equality are two different types, JavaScript can&amp;rsquo;t compare them directly.&lt;/li&gt;
&lt;li&gt;JavaScript implementation will try to convert &lt;code&gt;[]&lt;/code&gt; by using &lt;code&gt;toPrimitive&lt;/code&gt; (of JavaScript implementation). since &lt;code&gt;[].valueOf&lt;/code&gt; is not primitive will use &lt;code&gt;toString&lt;/code&gt; and will get &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now you are comparing &lt;code&gt;&amp;quot;&amp;quot; == 1&lt;/code&gt; and still left and right is not same type. Hence left side will be converted again to a number and empty string will be &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, they are of same type, you are comparing &lt;code&gt;0 === 1&lt;/code&gt; which will be &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Why &lt;code&gt;typeof bar === object&lt;/code&gt; isn&amp;rsquo;t right? How can this pitfall be avoided?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Use &lt;code&gt;Object.prototype.toString.call(&amp;lt;object&amp;gt;)&lt;/code&gt; or use Duck Typing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The surprising gotcha in JavaScript is that &lt;code&gt;null&lt;/code&gt; is also considered an object!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &lt;code&gt;NaN&lt;/code&gt;? What is its type? How can you reliably test if a value is equal to &lt;code&gt;NaN&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &amp;ldquo;not a number&amp;rdquo;, &amp;ldquo;number&amp;rdquo;, &lt;code&gt;NaN&lt;/code&gt; compared to anything – even itself! to &lt;code&gt;false&lt;/code&gt;. Use &lt;code&gt;Number.isNaN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The NaN property represents a value that is “not a number”. This special value results from an operation that could not be performed either because one of the operands was non-numeric (e.g., &amp;ldquo;abc&amp;rdquo; / 4), or because the result of the operation is non-numeric (e.g., an attempt to divide by zero).&lt;/p&gt;

&lt;p&gt;ES6 offers a new &lt;code&gt;Number.isNaN()&lt;/code&gt; function, which is a different and more reliable than the old global &lt;code&gt;isNaN()&lt;/code&gt; function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the significance, and what are the benefits, of including &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; at the beginning of a JavaScript source file?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; is a way to enforce stricter parsing and error handling on your code at runtime. Code errors that would otherwise have been ignored or would have failed silently will now generate errors or throw exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Some of the key benefits of strict mode include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Makes debugging easier. Code errors that would otherwise have been ignored or would have failed silently will now generate errors or throw exceptions, alerting you sooner to problems in your code and directing you more quickly to their source.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prevents accidental globals. Without strict mode, assigning a value to an undeclared variable automatically creates a global variable with that name. This is one of the most common errors in JavaScript. In strict mode, attempting to do so throws an error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Eliminates &lt;code&gt;this&lt;/code&gt; coercion. Without &lt;code&gt;strict mode&lt;/code&gt;, a reference to a this value of &lt;code&gt;undefined&lt;/code&gt; is automatically coerced to the global. This can cause many headfakes and pull-out-your-hair kind of bugs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disallows duplicate property names or parameter values. Strict mode throws an error when it detects a duplicate named property in an object (e.g.,&lt;code&gt;var object = {foo: &amp;quot;bar&amp;quot;, foo: &amp;quot;baz&amp;quot;};&lt;/code&gt;) or a duplicate named argument for a function (e.g., &lt;code&gt;function foo(val1, val2, val1){}&lt;/code&gt;), thereby catching what is almost certainly a bug in your code that you might otherwise have wasted lots of time tracking down.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Throws error on invalid usage of delete. The delete operator (used to remove properties from objects) cannot be used on non-configurable properties of the object. Non-strict code will fail silently when an attempt is made to delete a non-configurable property, whereas strict mode will throw an error in such a case.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;scope-and-hoisting-closure-and-functions&#34;&gt;Scope and hoisting, closure and functions&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result will be an error?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;say(&#39;World&#39;);

const phrase = &#39;Hello&#39;;

function say(name) {
  console.log(`${name}, ${phrase}!`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &amp;lsquo;undefined, World!&amp;rsquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result? What if to remove &lt;code&gt;var value = false&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var value = 0;

function f() {
  if (1) {
    value = true;
  } else {
    var value = false;
  }

  console.log(value);
}

f();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;true&lt;/code&gt;, after remove line of code, will be changed global variable and the result will be the same.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result? How to fix?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;fn1();
fn2();
fn3();
fn4();

function fn1() {
  setTimeout(() =&amp;gt; {
    console.log(&#39;fn1&#39;)
  })
}

function fn2() {
  console.log(&#39;fn2&#39;);
}

function fn3() {
  Promise.resolve().then(() =&amp;gt; {
    console.log(&#39;fn3&#39;);
  })
}

const fn4 = function () {
  console.log(&#39;fn4&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;fn4&lt;/code&gt; function expression isn&amp;rsquo;t hoisted. Change to function declaration. The result should be &lt;code&gt;fn2, fn4, fn3, fn1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is a closure? What is a practical use for a closure? Provide an example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Closure is a function with all accessible variables in lexical environment. Main usage is encapsulating data from outer usage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. What is the result? How to make them independent?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let initCount = 1;

function makeCounter() {
  return () =&amp;gt; initCount++
}

let counter = makeCounter();
let counter2 = makeCounter();

console.log( counter() ); // ?
console.log( counter() ); // ?

console.log( counter2() ); // ?
console.log( counter2() ); // ?
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Closures Inside in loop with &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If log the loop counter inside &lt;code&gt;setTimeout&lt;/code&gt;, what will be logged?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var i = 0; i &amp;lt; 10; i++) {
  setTimeout(function() {
    console.log(i);  
  }, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: The above will not output the numbers 0 through 9, but will simply print the number 10 ten times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The console log is inside the anonymous function of &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt; is executed when current call stack is over.&lt;/li&gt;
&lt;li&gt;So, the loop finishes and before setTimeout get the chance to execute. However, anonymous functions keep a reference to &lt;code&gt;i&lt;/code&gt; by creating a closure.&lt;/li&gt;
&lt;li&gt;Since, the loop is already finished, the value &lt;code&gt;i&lt;/code&gt; has been set to &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can fix it by avoiding closure. Just create a &lt;code&gt;IIFE&lt;/code&gt; (Immediately Invoked Function Expression), it will create its own scope and you can pass i to the function. In that case i will be a local variable (will not refer to i in the closure) and value of the i in every loop will be preserved.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
for(var i = 0; i &amp;lt; 10; i++) {
    setTimeout((function(i) {
      console.log(i);
    })(i), 10)
}

//or
for(var i = 0; i &amp;lt; 10; i++) {
  setTimeout(console.log.bind(console, i), 10);
}

// ES6
for(let i = 0; i &amp;lt; 10; i++) {
  setTimeout(() =&amp;gt; {
    console.log(i);  
  }, 10);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a simple function to tell whether &lt;code&gt;&#39;foo&#39;&lt;/code&gt; is passed as parameter or not?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; First convert &lt;code&gt;arguments&lt;/code&gt; to an array with &lt;code&gt;rest&lt;/code&gt; operator, after that simply use &lt;code&gt;Array.prototype.includes&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
function isFooPassed(){
  return Array.prototype.indexOf.call(arguments, &#39;foo&#39;) &amp;gt; 0;
}

// ES6
function isFooPassed(...params) {
  return params.includes(&#39;foo&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you use &amp;ldquo;Math.max&amp;rdquo; to find the max value in an array?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Math.max(...arr);  

//ES5 way
//Math.max.apply(Math, arr);  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you set a prefix before everything you log? for example, if you &lt;code&gt;log(&#39;my message&#39;)&lt;/code&gt; it will log: &lt;code&gt;(app) my message&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Just get the arguments, convert it to an array and &lt;code&gt;unshift&lt;/code&gt; whatever prefix you want to set. Finally, use apply to pass all the arguments to console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
function log(){
  var args = Array.prototype.slice.call(arguments);
  args.unshift(&#39;(app)&#39;);
  console.log.apply(console, args);
}

// ES6 
function log(...params){
  console.log([&#39;(app)&#39;, ...params]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Cashing / Memoization. How could you implement cache to save calculation time for a recursive fibonacci function?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fibonacci = (() =&amp;gt; {
  const memo = {};

  function f(n) {
    let value;

    if (memo[n]) {
      value = memo[n];
    } else {
      if (n === 0 || n === 1)
        value = n;
      else
        value = f(n - 1) + f(n - 2);

      memo[n] = value;
    }

    return value;
  }

  return f;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Memoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Because JavaScript objects behave like associative arrays, they are ideal candidates to act as caches. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function.  However, if the data is not cached, then the function is executed, and the result is added to the cache.&lt;/p&gt;

&lt;p&gt;In the following example, the original Fibonacci function is rewritten to include memoization. In the example, a self-executing anonymous function returns an inner function, f(), which is used as the Fibonacci function. When f() is returned, its closure allows it to continue to access the “memo” object, which stores all of its previous results. Each time f() is executed, it first checks to see if a result exists for the current value of “n”. If it does, then the cached value is returned. Otherwise, the original Fibonacci code is executed. Note that “memo” is defined outside of f() so that it can retain its value over multiple function calls. Recall that the original recursive function was called over 40 billion times to compute the 50th Fibonacci number. By implementing memoization, this number drops to 99.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why wrapping the entire content of a JavaScript source file in IIFE?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function($) { /*...*/ } )(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; This technique creates a closure around the entire contents of the file which, perhaps most importantly, creates a private namespace and thereby helps avoid potential name clashes between different JavaScript modules and libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Another feature of this technique is to allow for an easily referenceable (presumably shorter) alias for a global variable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explain why the following doesn&amp;rsquo;t work as an IIFE: &lt;code&gt;function foo(){ }();&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Because &lt;code&gt;foo&lt;/code&gt; isn’t being called! This is a function definition, it defines &lt;code&gt;foo&lt;/code&gt;. But it’s not a function expression - that is, it’s not understood by the JS parser to actually call a function.&lt;/p&gt;

&lt;p&gt;For the parser, things look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo(){
} // ok, done with that function definition
  // (silly human left off the semicolon, how embarrassing!)

(); // Are they trying to call something? What’s the function’s name?
    // PARSE ERROR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to prep the parser that we&amp;rsquo;re actually dealing with a function expression we have to wrap things up in &lt;code&gt;()&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(
  function foo(){
  }()
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also will work with &lt;code&gt;!&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; operators:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;+function() {
  
}();

!function() {

}();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;objects&#34;&gt;Objects&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What the heck is &lt;code&gt;this&lt;/code&gt; in JavaScript?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; At the time of execution of every function, JavaScript engine sets a property to the function called &lt;code&gt;this&lt;/code&gt; which refer to the current execution context. &lt;code&gt;this&lt;/code&gt; is always refer to an object and depends on how function is called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the global context or inside a function this refers to the &lt;code&gt;window&lt;/code&gt;/&lt;code&gt;global&lt;/code&gt; object. In ES6 module or with &lt;code&gt;use strict&lt;/code&gt; directive it&amp;rsquo;s &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;While executing a method in the context of an object, the object becomes the value of &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you use a constructor (by using &lt;code&gt;new&lt;/code&gt; keyword) to create an object, the value of &lt;code&gt;this&lt;/code&gt; will refer to the newly created object.&lt;/li&gt;
&lt;li&gt;Set the value of &lt;code&gt;this&lt;/code&gt; to any arbitrary object by passing the object as the first parameter of &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;arrow function&lt;/code&gt; for use parent LexicalEnvironment.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Why we need &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt;. If you want to use an arbitrary object as value of this, how will you do that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; To use an arbitrary object as value of this.&lt;/p&gt;

&lt;p&gt;There are at least four different ways to doing this by using &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;arrow function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qetr1ck-op.github.io/2016/08/06/call-apply-VS-bind-the-simplest-explanation/&#34;&gt;call &amp;amp; apply VS bind, the simplest explanation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How would you compare two objects?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; JavaScript has two different approaches for testing equality. Primitives like strings and numbers are compared by their value, while objects like arrays, dates, and user defined objects are compared by their reference. This means it compares whether two objects are referring to the same location in memory.&lt;/p&gt;

&lt;p&gt;Equality check will check whether two objects have same value for same property. To check that, you can get the keys for both the objects.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&#34;https://www.npmjs.com/package/lodash.isequal&#34;&gt;lodash&lt;/a&gt; or any npm equivalent.&lt;/p&gt;

&lt;p&gt;Or implement by own:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isEqual(a, b) {
    var aProps = Object.getOwnPropertyNames(a),
        bProps = Object.getOwnPropertyNames(b);

    if (aProps.length !== bProps.length) {
        return false;
    }

    for (var i = 0; i &amp;lt; aProps.length; i++) {
        var propName = aProps[i];
        
        if (a[propName] !== b[propName]) {
            return false;
        }
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Extend Core Object through prototype. Example 1. How could you write a method on instance of a date which will give you next day?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You need to declare a method on the prototype of Date object. To get access to the current value of the instance of the date use &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Date.prototype.nextDay = function () {
  return new Date(this.setDate(this.getDate() + 1));
} 

const date = new Date(); 
date; //Fri May 16 2014 20:47:14 GMT-0500 (Central Daylight Time)
date.nextDay();//Sat May 17 2014 20:47:14 GMT-0500 (Central Daylight Time)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Extend Core Object through prototype. Example 2. How could you make this work &lt;code&gt;[1,2,3,4,5].duplicator()&lt;/code&gt; to return &lt;code&gt;[1,2,3,4,5,1,2,3,4,5]&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; We need to add a method in the prototype of Array object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
Array.prototype.duplicator = function(){
  return this.concat(this);
}

Array.prototype.duplicator = function() {
  return [...this, ...this];
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;In what order are logging properties in the object?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var codes = {
  // keys of country: name of country
  &#39;7&#39;: &#39;Russian Federation&#39;,
  &#39;38&#39;: &#39;Ukraine&#39;,
  &#39;1&#39;: &#39;USA&#39;,
  &#39;57&#39;: &#39;Norway&#39;
};

for (var code in codes) console.log(code); // ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;1, 7, 38, 57&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;
If name of property is non-numeric string, such keys always moving in the order in which they assigned. On the other hand, if the name of the property - a number or a numeric string, then all modern browsers such properties are sorted for internal optimization.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why using &lt;code&gt;for...in&lt;/code&gt; for Array iteration is wrong?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Array indexes are just enumerable properties with integer names and are otherwise identical to general &lt;code&gt;Object&lt;/code&gt; properties. There is no guarantee that &lt;code&gt;for...in&lt;/code&gt; will return the indexes in any particular order. The &lt;code&gt;for...in&lt;/code&gt; loop statement will return all enumerable properties, including those with non–integer names and those that are inherited.&lt;/p&gt;

&lt;p&gt;Another point is that &lt;code&gt;for (var i = 0; i &amp;lt; arr.length; i++)&lt;/code&gt; is up to 10-100x time faster.&lt;/p&gt;

&lt;h3 id=&#34;oop&#34;&gt;OOP&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;How prototype inheritance works? Are you aware of classical approach and with OOLO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; In most languages, there are classes and objects. Classes inherit from other classes. In JavaScript, the inheritance is prototype-based. That means that there are no classes. Instead, an object inherits from another object. The main point is that one object can be &lt;code&gt;prototype&lt;/code&gt; of another object. That means if property isn’t found in the object - than it takes from &lt;code&gt;prototype&lt;/code&gt; object. In JavaScript this implementation is at the language level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; &lt;a href=&#34;http://qetr1ck-op.github.io/2014/09/15/OOP-in-prototype-style/&#34;&gt;OOP in prototype style&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example. Make a subclass from parent class &lt;code&gt;Animal&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// parent class or abstract class
function Animal(name) {
  this.name = name;
  this.speed = 0;
}

Animal.prototype.run = function() {
  console.log(`${this.name} run!`);
}

function Rabbit() {
  /*...*/
}

/*...*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function Animal(name) {
  this.name = name;
  this.speed = 0;
}

Animal.prototype.run = function() {
  console.log(`${this.name} run!`);
}

function Rabbit() {
  Animal.apply(this, arguments)
}

Rabbit.prototype = Object.create(Animal.prototype);

// optionally
Rabbit.prototype.constructor = Rabbit;

Rabbit.prototype.run = function() {
  // optionally
  Animal.prototype.run.apply(this);
  console.log(`${this.name} jumps!`);
};

var rabbit = new Rabbit(&#39;white rabbit&#39;);
rabbit.run();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Rewrite previous example to ES6 classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Animal {
  constructor(name) {
    this.name = name;
    this.speed = 0;
  }
  run() {
    console.log(`${this.name} run!`);
  }
}

class Rabbit extends Animal {
  constructor(name) {
    super(name)
  }
  run() {
    super.run();
    console.log(`${this.name} jumps`);
  };
}

var rabbit = new Rabbit(&#39;white rabbit&#39;);
rabbit.run();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Difference between: &lt;code&gt;function Person(){}&lt;/code&gt;, &lt;code&gt;var person = Person()&lt;/code&gt;, and &lt;code&gt;var person = new Person()&lt;/code&gt;? What &lt;code&gt;new&lt;/code&gt; operator do?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; In the example below we define a new &amp;ldquo;class&amp;rdquo; called Person with an empty constructor. Invoke function &lt;code&gt;Person()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;. On the other hand invoking &lt;code&gt;new Person&lt;/code&gt; will return an empty object &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a prototype-based language and contains no class statement, such as is found in C++ or Java. This is sometimes confusing for programmers accustomed to languages with a class statement. Instead, JavaScript uses functions as constructors for classes. Defining a class is as easy as defining a function. In the example below we define a new class called &lt;code&gt;Person&lt;/code&gt; with an empty constructor.&lt;/p&gt;

&lt;p&gt;And the spec says, the &lt;code&gt;new&lt;/code&gt; operator uses the internal &lt;code&gt;[[Construct]]&lt;/code&gt; method, and it basically does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initializes a new empty object (no properties)&lt;/li&gt;
&lt;li&gt;Sets the prototype of the new object to the value of the &lt;code&gt;prototype&lt;/code&gt; property of Person.

&lt;ul&gt;
&lt;li&gt;Note: The default value of &lt;code&gt;prototype&lt;/code&gt; for a function is an object (automatically created when the function is declared) with its prototype set to &lt;code&gt;Object.prototype&lt;/code&gt; and a &lt;code&gt;constructor&lt;/code&gt; property pointing back to the function Person.&lt;/li&gt;
&lt;li&gt;Note: The terminology can be confusing. The property named &lt;code&gt;prototype&lt;/code&gt; is not the same as the prototype of the object. Only functions have the property named &amp;ldquo;prototype&amp;rdquo;, but all objects have a prototype.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Calls the function &lt;code&gt;Person&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; set to the new object, and with the supplied &lt;code&gt;arguments&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If calling the function &lt;code&gt;Person&lt;/code&gt; returns an object, this object is the result of the expression. Otherwise the newly created object is the result of the expression.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;new F&lt;/code&gt; vs &lt;code&gt;Object.create&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;new F&lt;/code&gt; is &lt;code&gt;Object.create(F.prototype)&lt;/code&gt; with additionally running the constructor function. And giving the constructor the chance to return the actual object that should be the result of the expression instead of this. So basically &lt;code&gt;Object.create&lt;/code&gt; doesn&amp;rsquo;t execute the constructor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt; methods allows you to easily implement differential inheritance, where objects can directly inherit from other objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var userB = {
  sayHello: function() {
    console.log(&#39;Hello &#39;+ this.name);
  }
};

var bob = Object.create(userB, { // object descriptor
  &#39;id&#39; : {
    value: MY_GLOBAL.nextId(),
    enumerable:true // writable:false, configurable(deletable):false by default
  },
  &#39;name&#39;: {
    value: &#39;Bob&#39;,
    enumerable: true
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dom&#34;&gt;DOM&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Is there are a difference &lt;code&gt;window&lt;/code&gt; VS &lt;code&gt;document&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;  Yes. JavaScript has a global &lt;code&gt;window&lt;/code&gt; object and everything runs under it. &lt;code&gt;document&lt;/code&gt; is a property of &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window&lt;/code&gt; is global object that holds global variables, global functions, location, history everything is under it. Besides, &lt;code&gt;setTimeout&lt;/code&gt;, ajax call (&lt;code&gt;XMLHttpRequest&lt;/code&gt;), &lt;code&gt;console&lt;/code&gt; or &lt;code&gt;localStorage&lt;/code&gt; are part of window.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;document&lt;/code&gt; is also under &lt;code&gt;window&lt;/code&gt;. &lt;code&gt;document&lt;/code&gt; represents the &lt;code&gt;DOM&lt;/code&gt;,  the object oriented representation of the html markup. All the nodes are part of document. Hence you can use &lt;code&gt;getElementById&lt;/code&gt; or &lt;code&gt;addEventListener&lt;/code&gt; on document. These methods are not present in the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you make sure to run some javaScript when DOM is ready like &lt;code&gt;$(document).ready?&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are four different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put your script in the last tag of html body element. DOM would be ready by the time browser hits the script tag.&lt;/li&gt;
&lt;li&gt;Place your code inside a &lt;code&gt;DOMContentLoaded&lt;/code&gt; handler. This event will be fired when DOM is completely loaded.&lt;/li&gt;
&lt;li&gt;Watch changes in the &lt;code&gt;readyState&lt;/code&gt; of the &lt;code&gt;document&lt;/code&gt;. And the last state is &lt;code&gt;&amp;quot;complete&amp;quot;&lt;/code&gt; state, you can put your code there.&lt;/li&gt;
&lt;li&gt;Use jQuery &lt;code&gt;$(document).ready&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;window.onload&lt;/code&gt; VS &lt;code&gt;document.onload&lt;/code&gt; VS &lt;code&gt;document.addEventListener(&#39;DOMContentLoaded&#39;)&lt;/code&gt;. Do they fire at the same time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;
* &lt;code&gt;window.onload&lt;/code&gt; is fired when all page is loaded, including all resources (images, styles, iframes)
* &lt;code&gt;document.onload&lt;/code&gt; is fired when DOM (DOM tree built from markup code within the document) is ready which without external content.
* &lt;code&gt;DOMContentLoaded&lt;/code&gt; means that DOM has already been built, we can use handlers or search through the nodes, but resources such as images, styles don&amp;rsquo;t be loaded yet&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is &lt;code&gt;attribute&lt;/code&gt; similar to &lt;code&gt;property&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; We operate with DOM-properties via JS. Attributes are part of HTML markup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is a property?&lt;/p&gt;

&lt;p&gt;JS objects have DOM-properties. These properties are kind of like instance variables for the particular element. As such, a property can be different types (boolean, string, etc.). Properties can be accessed as object properties: &lt;code&gt;a.href&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What is an attribute?&lt;/p&gt;

&lt;p&gt;Attributes are in the HTML itself, rather than in the DOM. They are very similar to properties, but not quite as good. When a property is available it’s recommended that you work with properties rather than attributes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.hasAttribute(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.getAttribute(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.setAttribute(name, value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.removeAttribute(name)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.attributes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the different ways to get an element from DOM?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You can use the following methods in &lt;code&gt;document&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementById&lt;/code&gt; to get a element that has the provided Id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByClassName&lt;/code&gt; to get a nodelist (nodelist is not an array, rather it is array-like object) by providing a class name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagName&lt;/code&gt; to get a nodelist by the provided tag name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByName&lt;/code&gt; to get a nodelist by name property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelector&lt;/code&gt; you will pass css style selector and this will return first matched element in the DOM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;querySelectorAll&lt;/code&gt; will return a non-live nodelist by using depth-first pre order traversal of all the matched elements. Non-live means, any changes after selecting the elements will not be reflected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two more options but don&amp;rsquo;t used frequently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementsByName&lt;/code&gt; returns the list of elements by the provided name of the html tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagNameNS&lt;/code&gt; returns elements with particular tag name within the provided namespace&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Fastest way to Query DOM:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; If you have an ID of an element &lt;code&gt;getElmentById&lt;/code&gt; is the fastest way to select an element. However, you should not have so many ID in you document to avoid style repetition. &lt;code&gt;getElementsByClassName&lt;/code&gt; is the second quickest way to select an element.&lt;/p&gt;

&lt;p&gt;Here is the list. As we go downwards through the list, it takes more time to select elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID (#myID)&lt;/li&gt;
&lt;li&gt;Class (.myClass)&lt;/li&gt;
&lt;li&gt;Tag (div, p)&lt;/li&gt;
&lt;li&gt;Sibling (div+p, div~p)&lt;/li&gt;
&lt;li&gt;child (div&amp;gt;p)&lt;/li&gt;
&lt;li&gt;Descendant (div p)&lt;/li&gt;
&lt;li&gt;Universal (*)&lt;/li&gt;
&lt;li&gt;Attribute (input[type=&amp;ldquo;checkbox&amp;rdquo;])&lt;/li&gt;
&lt;li&gt;Pseudo (p:first-child)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Why &lt;code&gt;querySelectorAll(&#39;.my-class&#39;)&lt;/code&gt; is slower than &lt;code&gt;getElementsByClassName(&#39;my-class&#39;)&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;querySlectorAll&lt;/code&gt; is a generic purpose method. It is optimized for different kinds of selectors. Hence it has to check whether you put a &lt;code&gt;&amp;quot;#&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt; in front of the parameter you are passing. If you are just passing a class name with &lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt;, under the hood it uses &lt;code&gt;getElementsByClassName&lt;/code&gt; (could vary based on browser implements). Whereas if you directly uses &lt;code&gt;getElementsByClassName&lt;/code&gt; it directly uses this method and doesn&amp;rsquo;t have to go through all the initial processing of &lt;code&gt;querySelectorAll&lt;/code&gt;. Hence to search elements with a particular class name, &lt;code&gt;getElementsByClassName&lt;/code&gt; is faster than &lt;code&gt;querySelectorAll&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why we can&amp;rsquo;t use &lt;code&gt;forEach&lt;/code&gt; or similar array methods on a &lt;code&gt;NodeList&lt;/code&gt;? How could you solve this problem?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Both &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;nodeList&lt;/code&gt; have &lt;code&gt;length&lt;/code&gt; and you can loop through elements but they are not same object.&lt;/p&gt;

&lt;p&gt;Both are inherited from &lt;code&gt;Object&lt;/code&gt;. However &lt;code&gt;array&lt;/code&gt; has different &lt;code&gt;prototype&lt;/code&gt; object than &lt;code&gt;nodeList&lt;/code&gt;. &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc are on &lt;code&gt;array.prototype&lt;/code&gt; which doesn&amp;rsquo;t exist in the &lt;code&gt;NodeList.prototype&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;myArray --&amp;gt; Array.prototype --&amp;gt; Object.prototype --&amp;gt; null

myNodeList --&amp;gt; NodeList.prototype --&amp;gt; Object.prototype --&amp;gt; null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Convert &lt;code&gt;NodeList&lt;/code&gt; to an &lt;code&gt;array&lt;/code&gt;. After that you will have access to all &lt;code&gt;array.prototype&lt;/code&gt; methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// ES5
var myNodeList = document.querySelectorAll(&#39;.my-class&#39;);
var nodesArray = Array.prototype.slice.call(myNodeList);

//use array method on nodeList
nodesArray.forEach(function(el, idx){
  console.log(idx, el);
});

// ES6
const myNodeList = document.querySelectorAll(&#39;.my-class&#39;);

// Spread operator
[...myNodeList].forEach(cb);

// Array.from()
Array.from(myNodeList).forEach(cb);

// for...of statement
for (var el of myNodeList) cb(el);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How would you add/remove/toggle a class to an element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;el.classList.remove(&#39;my-class&#39;); //removing a class
el.classList.toggle(&#39;my-class&#39;);  // toggling a class
el.classList.contains(&#39;my-class&#39;); // checking whether class exists
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How to check if element isn&amp;rsquo;t empty, without children?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (!elem.childNodes.length) { ... }

if (!elem.hasChildNodes()) { ... }

if (!elem.firstChild) { ... }

if (!elem.lastChild) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How you would perform next operation: create element with content, add &lt;code&gt;data-foo&lt;/code&gt; attribute, append newly created element to whatever you want, then move it before some element, change text of it, remove it from DOM. How to clone an element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Use the next methods &lt;code&gt;document.createElement(tag)&lt;/code&gt;, &lt;code&gt;el.innerHTML&lt;/code&gt;, &lt;code&gt;parent.appendChild(el)&lt;/code&gt;, &lt;code&gt;parent.insertBefore(el, someEl)&lt;/code&gt;, &lt;code&gt;parent.removeChild(el)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For clone an element we can create function or use &lt;code&gt;el.cloneNode(true)&lt;/code&gt; where &lt;code&gt;true&lt;/code&gt; means deep cloning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to delete all children of element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function removeChildren(elem) {
  try {
    elem.innerHTML = &#39;&#39;; //dont work with table cells and etc.
  } catch (e) {
    while (elem.firstChild) {
      elem.removeChild(elem.firstChild);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;createTextNode vs innerHTML&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; It depends on content. &lt;code&gt;innerHTML&lt;/code&gt; inserts content as HTML, but &lt;code&gt;createTextNode&lt;/code&gt; inserts tags as text.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the best way to create a DOM element? Set &lt;code&gt;innherHTML&lt;/code&gt; or use &lt;code&gt;createElement&lt;/code&gt;? Do you know about &lt;code&gt;insertAdjacentHTML&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; According to jsPerf option 1 is approximately 3 times slower than option 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;appendChild&lt;/code&gt; does not cause a complete rebuild of the DOM or even all of the elements/nodes within the target.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;innerHTML&lt;/code&gt; does cause a complete rebuild of the content of the target element, which if you&amp;rsquo;re appending is unnecessary.&lt;/p&gt;

&lt;p&gt;Appending via &lt;code&gt;innerHTML += content&lt;/code&gt; makes the browser run through all of the nodes in the element building an HTML string to give to the JavaScript layer. Your code then appends text to it and sets innerHTML, causing the browser to drop all of the old nodes in the target, re-parse all of that HTML, and build new nodes. So in that sense, it may not be efficient. (However, parsing HTML is what browsers do and they&amp;rsquo;re really, really fast at it.)&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;innerHTML&lt;/code&gt; does indeed invalidate any references to elements within the target element you may be holding - because those elements don&amp;rsquo;t exist anymore, you removed them and then put in new ones (that look very similar) when you set &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In short, if you&amp;rsquo;re appending, I&amp;rsquo;d use &lt;code&gt;appendChild&lt;/code&gt; or &lt;code&gt;insertAdjacentHTML&lt;/code&gt;. If you&amp;rsquo;re replacing, there are very valid situations where using innerHTML is a better option than creating the tree yourself via the DOM API.&lt;/p&gt;

&lt;p&gt;Finally, it&amp;rsquo;s worth mentioning &lt;code&gt;insertAdjacentHTML&lt;/code&gt;, which is a function that you can use to insert nodes and elements into or next to an element using an HTML string. You can append to an element with it: &lt;code&gt;theElement.insertAdjacentHTML(&amp;quot;beforeend&amp;quot;, &amp;quot;the HTML goes here&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &lt;code&gt;createDocumentFragment&lt;/code&gt; and why you might use it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; If you are changing DOM that cause expensive reflow, you can avoid it by using &lt;code&gt;documentFragment&lt;/code&gt; as it is managed in the memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;documentFragment&lt;/code&gt; a very lightweight or minimal part of a DOM or a subtree of a DOM tree. It is very helpful when you are manipulating a part of DOM for multiple times. It becomes expensive to hit a certain portion of DOM for hundreds time. You might cause reflow for hundred times.&lt;/p&gt;

&lt;p&gt;A bad practice, you are hitting the DOM every single time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//
var list = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, ... ],
    el, text;
for (var i = 0; i &amp;lt; list.length; i++) {
    el = document.createElement(&#39;li&#39;);
    text = document.createTextNode(list[i]);
    el.appendChild(text);
    document.body.appendChild(el);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A good practice, you causing reflow one time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fragment = document.createDocumentFragment(),
    list = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, ...],
    el, text;
for (var i = 0; i &amp;lt; list.length; i++) {
    el = document.createElement(&#39;li&#39;);
    text = document.createTextNode(list[i]);
    el.appendChild(text);
    fragment.appendChild(el);
}
document.body.appendChild(fragment);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When would you use &amp;ldquo;document.write()&amp;rdquo; ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; In terms of vendors supplying third parties or analytics code (like Google Analytics) it&amp;rsquo;s actually the easiest way for them to distribute such snippets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
  var url = &#39;http://ads.com/buyme?screen=&#39; + screen.width + &amp;quot;x&amp;quot; + screen.height;

  document.write(&#39;&amp;lt;script src=&amp;quot;&#39; + url + &#39;&amp;quot;&amp;gt;&amp;lt;/scr&#39; + &#39;ipt&amp;gt;&#39;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It keeps the scripts small&lt;/li&gt;
&lt;li&gt;They don&amp;rsquo;t have to worry about overriding already established onload events or including the necessary abstraction to add onload events safely&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s extremely compatible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;document.write&lt;/code&gt; only works while the page is loading; If you call it after the page is done loading, it will overwrite the whole page.&lt;/p&gt;

&lt;p&gt;This effectively means you have to call it from an inline script block - And that will prevent the browser from processing parts of the page that follow. Scripts and Images will not be downloaded until the writing block is finished.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is reflow? What causes reflow? How could you reduce reflow?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; When you change size or position of an element in the page, all the elements after it has to change their position according to the changes you made. For example, if you change height on an element, all the elements under it has to move down in the page to accomodate a change in height. Hence, flow of the elements in the page is changed and this is called &lt;em&gt;reflow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Re-flows could be very expensive and it might have a performance hit specially in the smaller devices like phone. As it might causes changes in the portion (or whole) layout of the page.&lt;/p&gt;

&lt;p&gt;The following cases causes reflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change layout (geometry of the page)&lt;/li&gt;
&lt;li&gt;resize the window&lt;/li&gt;
&lt;li&gt;change height/width of any element&lt;/li&gt;
&lt;li&gt;changing font&lt;/li&gt;
&lt;li&gt;change font size&lt;/li&gt;
&lt;li&gt;move DOM element (animation)&lt;/li&gt;
&lt;li&gt;adding or removing stylesheet&lt;/li&gt;
&lt;li&gt;calculating offset height or offset width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display: none;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to avoid: To avoid reflow, try to avoid doing things in the above list and some more in the below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;avoid setting multiple inline style&lt;/li&gt;
&lt;li&gt;apply animation to the elements that are positioned fixed or absolute&lt;/li&gt;
&lt;li&gt;avoid tables for layout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More: &lt;a href=&#34;http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#animations&#34;&gt;reflow and repaint: css performance makes your JS slow&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is repaint and when does this happen?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; repaint happens when you change the look of an element without changing the size and shape. This doesn&amp;rsquo;t cause reflow as geometry of the element didn&amp;rsquo;t changed.&lt;/p&gt;

&lt;p&gt;How it happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change background color&lt;/li&gt;
&lt;li&gt;change text color&lt;/li&gt;
&lt;li&gt;visibility hidden&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attribute does in a script tag?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; HTML parser will ignore &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; keyword for inline script (script that does not have a src attribute).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with &lt;code&gt;&amp;lt;script async src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; browser downloads the file during HTML parsing and will pause the HTML parser to execute it when it has finished downloading&lt;/li&gt;
&lt;li&gt;with &lt;code&gt;&amp;lt;script defer src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; browser downloads the file during HTML parsing and will only execute it after the parser has completed. defer scripts are also guarenteed to execute in the order that they appear in the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;1.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;2.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;//1
&amp;lt;script src=&amp;quot;big.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;small.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

//2
&amp;lt;script async src=&amp;quot;big.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script async src=&amp;quot;small.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

//3
&amp;lt;script defer src=&amp;quot;big.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script defer src=&amp;quot;small.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;events&#34;&gt;Events&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What is event bubble? How does event flows (event phases)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; to understand event bubble, you have to understand what happen when you click on anything on a page.&lt;/p&gt;

&lt;p&gt;The event flow model specified by DOM Level 2 Events has three phases to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capture: When you clicked, browser knows a click event occurred. It starts from the &lt;code&gt;window&lt;/code&gt; (lowest level/root of your website), then goes to &lt;code&gt;document&lt;/code&gt;, then &lt;code&gt;html&lt;/code&gt; root tag, then &lt;code&gt;body&lt;/code&gt;, then &lt;code&gt;table&lt;/code&gt;&amp;hellip; its trying to reach the the as lowest level of element as possible. This is called capture phase (phase -1).&lt;/li&gt;
&lt;li&gt;Target: When browser reach the lowest level of element. In this case, you have clicked on a table cell (table data) hence target would be &lt;code&gt;td&lt;/code&gt; tag. Then browser checks whether you have any click handler attached to this element. If there is any, browser executes that click hander. This is called target phase (phase -2).
&lt;code&gt;Bubbling&lt;/code&gt;: After firing click hander attached to &lt;code&gt;td&lt;/code&gt;, browser walks toward root. One level upward and check whether there is any click handler attached with table row &lt;code&gt;tr&lt;/code&gt; element. If there is any it will execute that. Then it goes to &lt;code&gt;tbody&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;. In this stage its moving upward and this is called event bubbling or bubbling phase (phase-3).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Event handlers with &lt;code&gt;on&amp;lt;eventName&amp;gt;&lt;/code&gt; doesn&amp;rsquo;t know anything about capture phase.&lt;/p&gt;

&lt;p&gt;To capture on &lt;code&gt;capture&lt;/code&gt; phase need to &lt;code&gt;addEventListener(&amp;lt;eventName&amp;gt;, &amp;lt;cb&amp;gt;, true)&lt;/code&gt;, otherwise it will work by bubble phase.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Explain event delegation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Event delegation allows you to avoid adding event listeners to specific nodes, instead, the event listener is added to one parent. That event listener analyzes bubbled events to find a match on child elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that we have a parent UL element with several child elements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;ul id=&amp;quot;parent-list&amp;quot;&amp;gt;
  &amp;lt;li id=&amp;quot;post-1&amp;quot;&amp;gt;Item 1&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-2&amp;quot;&amp;gt;Item 2&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-3&amp;quot;&amp;gt;Item 3&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-4&amp;quot;&amp;gt;Item 4&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-...&amp;quot;&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li id=&amp;quot;post-1001&amp;quot;&amp;gt;Item 1001&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s also say that something needs to happen when each child element is clicked.  You could add a separate event listener to each individual &lt;code&gt;LI&lt;/code&gt; element, but what if &lt;code&gt;LI&lt;/code&gt; elements are frequently added and removed from the list?  Adding and removing event listeners would be a nightmare, especially if addition and removal code is in different places within your app. The better solution is to add an event listener to the parent UL element.&lt;/p&gt;

&lt;p&gt;When the event bubbles up to the &lt;code&gt;UL&lt;/code&gt; element, you check the event object&amp;rsquo;s target property to gain a reference to the actual clicked node:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Get the element, add a click listener...
document.getElementById(&amp;quot;parent-list&amp;quot;).addEventListener(&amp;quot;click&amp;quot;, function(e) {
  // e.target is the clicked element!
  // If it was a list item
  if(e.target &amp;amp;&amp;amp; e.target.nodeName == &amp;quot;LI&amp;quot;) {
    // List item found!  Output the ID!
    console.log(&amp;quot;List item &amp;quot;, e.target.id.replace(&amp;quot;post-&amp;quot;, &amp;quot;&amp;quot;), &amp;quot; was clicked!&amp;quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Can you remove an event handler from an element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;target.removeEventListener(&#39;click&#39;, &amp;lt;handledName&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How could you prevent a click on an anchor from going to the link? How could you stop further propagation of an event?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;preventDefault()&lt;/code&gt; inside event handler. However, this doesn&amp;rsquo;t stop further propagation. To stop it &lt;code&gt;event.stopPropagation();&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to capture all click in a page?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; You can leverage event bubble to get all the clicks. As all the clicks will be bubbled up to the body.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.querySelector(&#39;body&#39;).addEventListener(&#39;click&#39;, function(e){
  console.log(&#39;body clicked&#39;, e.target);
});

//or
window.onclick = function(e){
  console.log(&#39;someone clicked&#39;, e.target)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ajax&#34;&gt;AJAX&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Explain AJAX in as much detail as possible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; AJAX is a way to communicate to the server without reloading the page. Once we receive the data from the server, we can then manipulate those data and display unto certain parts of the page, this is why we don’t need to reload the page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; AJAX stands for Asynchronous JavaScript and XML. In a nutshell, it is the use of the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object to communicate with server-side scripts. It can send as well as receive information in a variety of formats, including JSON, XML, HTML, and even text files. AJAX’s most appealing characteristic, however, is its &amp;ldquo;asynchronous&amp;rdquo; nature, which means it can do all of this without having to refresh the page&lt;/p&gt;

&lt;p&gt;Typical example for GET request with &lt;code&gt;XMLHttpRequest&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/qetr1ck-op/f52380392d7f0afb4835f8257a483ff7.js&#34;&gt;&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;What is COMET? How to achieve this technique?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; he AJAX - is a &amp;ldquo;request sent - get the result,&amp;rdquo; and the COMET - is &amp;ldquo;a continuous channel through which the data come.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comet is a Web application model that enables web servers to send data to the client without having to explicitly request it.&lt;/p&gt;

&lt;p&gt;Examples COMET-app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chat - man sitting and watching what others write. At the same time new messages arrive &amp;ldquo;on their own&amp;rdquo;, he should not have to press a button to refresh the chat window.&lt;/li&gt;
&lt;li&gt;Auction - a person looks at the screen and sees renewed the current bid for the goods.&lt;/li&gt;
&lt;li&gt;Editing interface - when one editor is beginning to change the document, others see the information about it. Perhaps, and collaborative editing, editors when they see each other&amp;rsquo;s changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;COMET techniques overview:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polling: a simple method based on periodically polling the server.&lt;/li&gt;
&lt;li&gt;Long poll: A method by which a client opens a connection and doesn&amp;rsquo;t close it up until the event occurs. In the event occurs, the client receives a notification and then opens a connection again.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Infinite&amp;rdquo; iframe: The method is based on html document download features. It creates an invisible iframe, which reads &amp;ldquo;infinite&amp;rdquo; file. When an event occurs, a new row is added to the file. The string can be a javascript snippet.&lt;/li&gt;
&lt;li&gt;HTML5 WebSockets: specification defines an API establishing &amp;ldquo;socket&amp;rdquo; connections between a web browser and a server. In plain words: There is an persistent connection between the client and the server and both parties can start sending data at any time.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;How to work with HTTP headers in AJAX. Do we have a restriction?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are three methods &lt;code&gt;setRequestHeader(name, value)&lt;/code&gt;, &lt;code&gt;getResponseHeader(name)&lt;/code&gt;, &lt;code&gt;getAllResponseHeaders()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Send JSON Object with Ajax?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Use &lt;code&gt;xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;)&lt;/code&gt; and &lt;code&gt;JSON.stringify(&amp;lt;object&amp;gt;)&lt;/code&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var jsonRequest = &amp;quot;json_name=&amp;quot; + JSON.stringify({name:&amp;quot;John&amp;quot;, time:&amp;quot;2pm&amp;quot;});
var xhr = new XMLHttpRequest();

xhr.open(&amp;quot;POST&amp;quot;, &amp;quot;/submit&amp;quot;);
xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;);
xhr.send(json_upload);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Sending POST data using an XMLHttpRequest using different encoding patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; With &lt;code&gt;XMLHttpRequest&lt;/code&gt; we don&amp;rsquo;t need explicitly set header with &lt;code&gt;Content-type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In spec are 3 types for submitting body entity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var xhr = new XMLHttpRequest();

var body = &#39;name=&#39; + encodeURIComponent(name) +
  &#39;&amp;amp;surname=&#39; + encodeURIComponent(surname);

xhr.open(&amp;quot;POST&amp;quot;, &#39;/submit&#39;, true)
xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)

xhr.onreadystatechange = ...;

xhr.send(body);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;multipart/form-data&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form name=&amp;quot;person&amp;quot;&amp;gt;
  &amp;lt;input name=&amp;quot;name&amp;quot; value=&amp;quot;John&amp;quot;&amp;gt;
  &amp;lt;input name=&amp;quot;surname&amp;quot; value=&amp;quot;Doe&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;script&amp;gt;
  var formData = new FormData(document.forms.person);

  formData.append(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);

  var xhr = new XMLHttpRequest();
  xhr.open(&amp;quot;POST&amp;quot;, &amp;quot;/url&amp;quot;);
  xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;multipart/form-data&#39;)
  xhr.send(formData);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;What is CORS? What techniques you know to avoid it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;es6&#34;&gt;ES6&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When standard was finalized?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ES6 specification was finalized in June 2015, (hence ES2015).&lt;/p&gt;

&lt;p&gt;Future versions of the specification will follow the ES[YYYY] pattern, e.g ES2016 for ES7.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tooling&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get ES6 working today, you need a JavaScript-to-JavaScript transpiler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They allow you to compile code in the latest version into older versions of the language&lt;/li&gt;
&lt;li&gt;As browser support gets better, we’ll transpile ES2016 and ES2017 into ES6 and beyond&lt;/li&gt;
&lt;li&gt;We’ll need better source mapping functionality&lt;/li&gt;
&lt;li&gt;They’re the most reliable way to run ES6 source code in production today (although browsers get ES5)&lt;/li&gt;
&lt;li&gt;
Use &lt;code&gt;babel&lt;/code&gt; to transpile ES6 into ES5 for static build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;babelify&lt;/code&gt; to incorporate babel into your &lt;code&gt;Gulp&lt;/code&gt;, &lt;code&gt;Grunt&lt;/code&gt;, or &lt;code&gt;npm&lt;/code&gt; run build process&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Node.js&lt;/code&gt; v4.x.x or greater as they have decent ES6 support baked in, thanks to v8&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;babel-node&lt;/code&gt; with any version of node, as it transpiles modules into ES5&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Assignment Destructing, the Rapid Table&lt;/p&gt;

&lt;p&gt;Spread Operator and Rest Parameters&lt;/p&gt;

&lt;p&gt;Arrow Functions&lt;/p&gt;

&lt;p&gt;Template Literals&lt;/p&gt;

&lt;p&gt;Object Literals&lt;/p&gt;

&lt;p&gt;Classes&lt;/p&gt;

&lt;p&gt;Let and Const&lt;/p&gt;

&lt;p&gt;Symbols&lt;/p&gt;

&lt;p&gt;Iterators&lt;/p&gt;

&lt;p&gt;Generators&lt;/p&gt;

&lt;p&gt;Promises&lt;/p&gt;

&lt;p&gt;Maps / WeakMaps&lt;/p&gt;

&lt;p&gt;Sets / WeakSets&lt;/p&gt;

&lt;p&gt;Modules&lt;/p&gt;

&lt;p&gt;Proxy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TODO with &lt;a href=&#34;https://ponyfoo.com/articles/es6&#34;&gt;https://ponyfoo.com/articles/es6&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;javascript-advance&#34;&gt;JavaScript: advance&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;What do you think of AMD vs CommonJS and ES6 modules?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For many years JS had a single widely accepted module format, which is to say, there was none. Everything was a global variable petulantly hanging off the window object.&lt;/p&gt;

&lt;p&gt;Dark Ages. Long ago an adhoc group formed to solve the global conflict. The fruits of this vigilante justice are known today as CommonJS. Multiple competing formats were proposed and implemented in the wild by these dashing radicals and two bright lights emerged with significant adherents: AMD and CJS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Asynchronous Module Design&lt;/em&gt; (AMD) accounts for the async nature of JS but some felt the aesthetics were harder to read with a wrapper function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CommonJS&lt;/em&gt; (CJS) is synchronous, thus blocking, but generally understood to be an easier read.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// this is an AMD module
define(function () {
  return something
})

// and this is CommonJS
module.exports = something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript vendors and concerned citizens began formally standardizing modules into the language proper. After years of thrashing, a standard module format has finally emerged with ES6.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is asynchronous programming, and why is it important in JS? Non-blocking I/O in JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Synchronous programming means that code is executed sequentially from top-to-bottom, blocking on long-running tasks such as network requests and disk I/O.&lt;/p&gt;

&lt;p&gt;Asynchronous programming means that the engine runs in an event loop. When a blocking operation is needed, the request is started, and the code keeps running without blocking for the result. When the response is ready, an interrupt is fired, which causes an event handler to be run, where the control flow continues. In this way, a single program thread can handle many concurrent operations.&lt;/p&gt;

&lt;p&gt;Node is asynchronous by default, meaning that the server works in much the same way, waiting in a loop for a network request, and accepting more incoming requests while the first one is being handled.&lt;/p&gt;

&lt;p&gt;In JavaScript, almost all I/O is non-blocking. This includes:
* Networking requests
* DB operations
* Disk reads and writes
* User interfaces are asynchronous by nature, and spend most of their time waiting for user input to interrupt the event loop and trigger event handlers&lt;/p&gt;

&lt;p&gt;The single thread of execution asks the runtime to perform an operation, providing a callback function and then moves on to do something else. When the operation has been completed, a message is enqueued along with the provided callback function. At some point in the future, the message is dequeued and the callback fired.&lt;/p&gt;

&lt;p&gt;Let’s compare two bits of code that make HTTP requests to &lt;code&gt;www.google.com&lt;/code&gt; and output the response to console with &lt;code&gt;Node.js&lt;/code&gt; and the &lt;code&gt;Request&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;request(&#39;http://www.google.com&#39;, function(error, response, body) {
  console.log(body);
});

console.log(&#39;Done!&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;The request function is executed, passing an anonymous function as a callback to execute when a response is available sometime in the future.&lt;/li&gt;
&lt;li&gt;“Done!” is immediately output to the console&lt;/li&gt;
&lt;li&gt;Sometime in the future, the response comes back and our callback is executed, outputting its body to the console&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Do request two parallel request to &lt;code&gt;http://httpbin.org/ip&lt;/code&gt; and &lt;code&gt;http://httpbin.org/user-agent&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Promise.all([fetch(&#39;http://httpbin.org/ip&#39;), fetch(&#39;http://httpbin.org/user-agent&#39;)])
  .then(resps =&amp;gt; {
    return Promise.all([resps[0].json(), resps[1].json()])
  })
  .then((jsons) =&amp;gt; console.log(jsons))
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Resolve promises one after another (i.e. in sequence)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function runSerial() {
    return Promise.resolve()
        .then(task1)
        .then(task2)
        .then(() =&amp;gt; {
            console.log(&amp;quot; ---- done ----&amp;quot;);
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With dynamic length of tasks&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let urls = [&#39;guest.json&#39;, &#39;user.json&#39;];
let results = [];
let chain = Promise.resolve();

urls.forEach(function(url) {
  chain = chain
    .then(() =&amp;gt; httpGet(url))
    .then((result) =&amp;gt; {
      results.push(result);
    });
});

chain.then(() =&amp;gt; {
  console.log(results);
});

// with reduce
urls
  .reduce((promise, url) =&amp;gt; {
    return promise.then(() =&amp;gt; httpGet(url)).then((json) =&amp;gt; results.push(json));
  }, Promise.resolve())
  .then(() =&amp;gt; {
    console.log(results);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The Event Loop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The decoupling of the caller from the response allows for the JavaScript runtime to do other things while waiting for your asynchronous operation to complete and their callbacks to fire. But where in memory do these callbacks live – and in what order are they executed? What causes them to be called?&lt;/p&gt;

&lt;p&gt;JavaScript runtimes contain a message queue which stores a list of messages to be processed and their associated callback functions. These messages are queued in response to external events (such as a mouse being clicked or receiving the response to an HTTP request) given a callback function has been provided. If, for example a user were to click a button and no callback function was provided – no message would have been enqueued.&lt;/p&gt;

&lt;p&gt;In a loop, the queue is polled for the next message (each poll referred to as a “tick”) and when a message is encountered, the callback for that message is executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.appsdev.is.ed.ac.uk/blog/wp-content/uploads/2015/03/Event-loop.png&#34; alt=&#34;Event Loop&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Macrotasks and Microtasks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take this little bit of JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;script start&#39;)

const interval = setInterval(() =&amp;gt; {  
  console.log(&#39;setInterval&#39;)
}, 0)

setTimeout(() =&amp;gt; {  
  console.log(&#39;setTimeout 1&#39;)
  Promise.resolve().then(() =&amp;gt; {
    console.log(&#39;promise 3&#39;)
  }).then(() =&amp;gt; {
    console.log(&#39;promise 4&#39;)
  }).then(() =&amp;gt; {
    setTimeout(() =&amp;gt; {
      console.log(&#39;setTimeout 2&#39;)
      Promise.resolve().then(() =&amp;gt; {
        console.log(&#39;promise 5&#39;)
      }).then(() =&amp;gt; {
        console.log(&#39;promise 6&#39;)
      }).then(() =&amp;gt; {
        clearInterval(interval)
      })
    }, 0)
  })
}, 0)

Promise.resolve().then(() =&amp;gt; {  
  console.log(&#39;promise 1&#39;)
}).then(() =&amp;gt; {
  console.log(&#39;promise 2&#39;)
})
console.log(&#39;script end&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;script start
script end
promise 1  
promise 2  
setInterval  
setTimeout 1  
promise 3  
promise 4  
setInterval  
setTimeout 2  
setInterval  
promise 5  
promise 6  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To understand this you need to know how the event loop handles macrotasks and microtasks.&lt;/p&gt;

&lt;p&gt;macrotasks: &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;, I/O, UI rendering
microtasks: &lt;code&gt;process.nextTick&lt;/code&gt;, &lt;code&gt;Promises&lt;/code&gt;, &lt;code&gt;Object.observe&lt;/code&gt;, &lt;code&gt;MutationObserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&#34;&gt;A great post&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &amp;ldquo;classical inheritance&amp;rdquo; and &amp;ldquo;prototypal inheritance&amp;rdquo;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Class Inheritance: instances inherit from classes (like a blueprint — a description of the class), and create sub-class relationships: hierarchical class taxonomies. Instances are typically instantiated via constructor functions with the &lt;code&gt;new&lt;/code&gt; keyword. Class inheritance may or may not use the &lt;code&gt;class&lt;/code&gt; keyword from ES6.&lt;/p&gt;

&lt;p&gt;Prototypal Inheritance: instances inherit directly from other objects. Instances are typically instantiated via factory functions or &lt;code&gt;Object.create()&lt;/code&gt;. Instances may be composed from many different objects, allowing for easy selective inheritance.&lt;/p&gt;

&lt;p&gt;Good to hear:
* Classes: create tight coupling or hierarchies/taxonomies.
* Prototypes: mentions of concatenative inheritance, prototype delegation, functional inheritance, object composition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the pros and cons of functional programming vs object-oriented programming?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP Pros: It’s easy to understand the basic concept of objects and easy to interpret the meaning of method calls. OOP tends to use an imperative style rather than a declarative style, which reads like a straight-forward set of instructions for the computer to follow.&lt;/p&gt;

&lt;p&gt;OOP Cons: OOP Typically depends on shared state. Objects and behaviors are typically tacked together on the same entity, which may be accessed at random by any number of functions with non-deterministic order, which may lead to undesirable behavior such as race conditions.&lt;/p&gt;

&lt;p&gt;FP Pros: Using the functional paradigm, programmers avoid any shared state or side-effects, which eliminates bugs caused by multiple functions competing for the same resources. With features such as the availability of point-free style (aka tacit programming), functions tend to be radically simplified and easily recomposed for more generally reusable code compared to OOP.&lt;/p&gt;

&lt;p&gt;FP Cons: Over exploitation of FP features such as point-free style and large compositions can potentially reduce readability because the resulting code is often more abstractly specified, more terse, and less concrete.
More people are familiar with OO and imperative programming than functional programming, so even common idioms in functional programming can be confusing to new team members.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What does &amp;ldquo;favor object composition over class inheritance&amp;rdquo; mean?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a quote from &amp;ldquo;Design Patterns: Elements of Reusable Object-Oriented Software&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Object composition is a way to combine simple objects or data types into more complex ones. It means that code reuse should be achieved by assembling smaller units of functionality into new objects instead of inheriting from classes and creating object taxonomies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { a, b, c } from &#39;components&#39;;
composedObject = Object.assign({}, a, b, c);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Good to hear:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid class hierarchies.&lt;/li&gt;
&lt;li&gt;Avoid brittle base class problem.&lt;/li&gt;
&lt;li&gt;Avoid tight coupling.&lt;/li&gt;
&lt;li&gt;Avoid rigid taxonomy (forced is-a relationships that are eventually wrong for new use cases).&lt;/li&gt;
&lt;li&gt;Avoid the gorilla banana problem (“what you wanted was a banana, what you got was a gorilla holding the banana, and the entire jungle”).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;What are two-way data binding and one-way data flow, and how are they different?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two way data binding means that UI fields are bound to model data dynamically such that when a UI field changes, the model data changes with it and vice-versa.&lt;/p&gt;

&lt;p&gt;One way data flow means that the model is the single source of truth. Changes in the UI trigger messages that signal user intent to the model (or “store” in React). Only the model has the access to change the app’s state. The effect is that data always flows in a single direction, which makes it easier to understand.&lt;/p&gt;

&lt;p&gt;One way data flows are deterministic, whereas two-way binding can cause side-effects which are harder to follow and understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good to hear:&lt;/strong&gt;
React is the new canonical example of one-way data flow, so mentions of React are a good signal. Cycle.js is another popular implementation of uni-directional data flow.
Angular is a popular framework which uses two-way binding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the pros and cons of monolithic vs microservice architectures?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A monolithic architecture means that your app is written as one cohesive unit of code whose components are designed to work together, sharing the same memory space and resources.&lt;/p&gt;

&lt;p&gt;A microservice architecture means that your app is made up of lots of smaller, independent applications capable of running in their own memory space and scaling independently from each other across potentially many separate machines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good to hear:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Monolithic Pros: The major advantage of the monolithic architecture is that most apps typically have a large number of cross-cutting concerns, such as logging, rate limiting, and security features such audit trails and DOS protection.&lt;/p&gt;

&lt;p&gt;When everything is running through the same app, it’s easy to hook up components to those cross-cutting concerns.&lt;/p&gt;

&lt;p&gt;Monolithic cons: Monolithic app services tend to get tightly coupled and entangled as the application evolves, making it difficult to isolate services for purposes such as independent scaling or code maintainability.&lt;/p&gt;

&lt;p&gt;Monolithic architectures are also much harder to understand, because there may be dependencies, side-effects, and magic which are not obvious when you’re looking at a particular service or controller.&lt;/p&gt;

&lt;p&gt;Microservice pros: Microservice architectures are typically better organized, since each microservice has a very specific job, and is not concerned with the jobs of other components. Decoupled services are also easier to recompose and reconfigure to serve the purposes of different apps (for example, serving both the web clients and public API).&lt;/p&gt;

&lt;p&gt;They can also have performance advantages depending on how they’re organized because it’s possible to isolate hot services and scale them independent of the rest of the app.&lt;/p&gt;

&lt;p&gt;Microservice cons: As you’re building a new microservice architecture, you’re likely to discover lots of cross-cutting concerns that you did not anticipate at design time. A monolithic app could establish shared magic helpers or middleware to handle such cross-cutting concerns without much effort.&lt;/p&gt;

&lt;h2 id=&#34;markup&#34;&gt;Markup&lt;/h2&gt;

&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What is doctype? Why do u need it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;doctype&lt;/code&gt; is an instruction to the browser to inform about the version of html document and how browser should render it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It ensures how element should be displayed on the page by most of the browser. And it also makes browser&amp;rsquo;s life easier. otherwise, browser will guess and will go to quirks mode. Moreover, &lt;code&gt;doctype&lt;/code&gt; is required to validate markup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Difference between standard/strict mode and quirks mode?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; quirks mode in browser allows u to render page for as old browsers. This is for backward compatibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the use of &lt;code&gt;data-&lt;/code&gt; attribute?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; allow you to store extra information/data in the DOM and allows to write valid html with embedded private data. You can easily access data attribute by using JS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;myDiv&amp;quot; data-user=&amp;quot;jsDude&amp;quot; data-list-size=&amp;quot;5&amp;quot; data-maxage=&amp;quot;180&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &lt;code&gt;span&lt;/code&gt; and &lt;code&gt;div&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;div&lt;/code&gt; is a block element, &lt;code&gt;span&lt;/code&gt; is inline.&lt;/p&gt;

&lt;p&gt;This means that to use them semantically, divs should be used to wrap sections of a document, while spans should be used to wrap small portions of text, images, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When should you use section, div or article?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; To decide which of these three elements is appropriate, choose the first suitable option:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Would the enclosed content would make sense on it’s own in a feed reader? If so use &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Is the enclosed content related? If so use &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally if there’s no semantic relationship use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;What is &amp;ldquo;Semantic HTML?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Semantic HTML is a coding style where the tags embody what the text is meant to convey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Semantic HTML, tags like &lt;code&gt;&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt;&lt;/code&gt; for bold, and &lt;code&gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; for italic should not be used, reason being they just represent formatting, and provide no indication of meaning or structure. The semantically correct thing to do is use &lt;code&gt;&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/code&gt;. These tags will have the same bold and italic effects, while demonstrating meaning and structure (emphasis in this case).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are some new HTML5 markup elements?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://www.w3.org/TR/html-markup/bdi.html#bdi&#34;&gt;several&lt;/a&gt;: &lt;article&gt;, &lt;aside&gt;, &lt;bdi&gt;, &lt;command&gt;, &lt;details&gt;, &lt;figure&gt;, &lt;figcaption&gt;, &lt;summary&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;hgroup&gt;, &lt;mark&gt;, &lt;meter&gt;, &lt;nav&gt;, &lt;progress&gt;, &lt;ruby&gt;, &lt;rt&gt;, &lt;section&gt;, &lt;time&gt;, and &lt;wpr&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the new media-related elements in HTML5?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML5 has strong support for media. There are now special &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags. There are additional A/V support tags as well: &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; is a container for 3rd party applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &lt;code&gt;SVG&lt;/code&gt; and &lt;code&gt;Canvas&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SVG&lt;/code&gt; is a document format for scalable vector graphics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Canvas&lt;/code&gt; is a javascript API for drawing vector graphics to a bitmap of a specific size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.&lt;/p&gt;

&lt;p&gt;With SVG you can view, save and edit the file in many different tools.&lt;/p&gt;

&lt;p&gt;In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.&lt;/p&gt;

&lt;p&gt;Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.&lt;/p&gt;

&lt;p&gt;Canvas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pixel based&lt;/li&gt;
&lt;li&gt;Single HTML element.(Inspect element in Developer tool. You can see only canvas tag)&lt;/li&gt;
&lt;li&gt;Modified through script only&lt;/li&gt;
&lt;li&gt;Event model/user interaction is granular (x,y)&lt;/li&gt;
&lt;li&gt;Performance is better with smaller surface, a larger number of objects (&amp;gt;10k), or both&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SVG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shape based&lt;/li&gt;
&lt;li&gt;Multiple graphical elements, which become part of the SVG DOM&lt;/li&gt;
&lt;li&gt;Modified through script and CSS&lt;/li&gt;
&lt;li&gt;Event model/user interaction is abstracted (rect, path)&lt;/li&gt;
&lt;li&gt;Performance is better with smaller number of objects (&amp;lt;10k), a larger surface, or both&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Describe the difference between &lt;code&gt;cookies&lt;/code&gt;, &lt;code&gt;sessionStorage&lt;/code&gt;, and &lt;code&gt;localStorage&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;localStorage&lt;/code&gt;, &lt;code&gt;sessionStorage&lt;/code&gt; and &lt;code&gt;cookies&lt;/code&gt; are all client storage solutions.&lt;/p&gt;

&lt;p&gt;Cookies are small text files that websites place in a browser for tracking or login purposes. Meanwhile, &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; are new objects, both of which are storage specifications but vary in scope and duration. Of the two, &lt;code&gt;localStorage&lt;/code&gt; is permanent and website-specific whereas &lt;code&gt;sessionStorage&lt;/code&gt; only lasts as long as the duration of the longest open tab.&lt;/p&gt;

&lt;p&gt;You can save to &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; only primitives, for object you need you use &lt;code&gt;JSON.stringify1&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;

&lt;h2 id=&#34;general-website-optimization-questions&#34;&gt;General Website Optimization Questions&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;How do you optimize a website’s assets?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are a &lt;a href=&#34;https://www.sitepoint.com/web-site-optimization-steps/&#34;&gt;number of answers&lt;/a&gt; to this question: File concatenation, file compression, CDN Hosting, offloading assets, re-organizing and refining code, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are ways to reduce page load time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Again there are &lt;a href=&#34;https://blog.crazyegg.com/2013/12/11/speed-up-your-website/&#34;&gt;many answers&lt;/a&gt; here: Reduce image sizes, remove unnecessary widgets, HTTP compression, put CSS at the top and script references at the bottom or in external files, reduce lookups, minimize redirects, caching, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What kind of things must you be wary of when design or developing for multilingual sites?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Another problem with &lt;a href=&#34;https://www.nomensa.com/blog/2010/7-tips-for-multi-lingual-website-accessibility&#34;&gt;many solutions&lt;/a&gt;: setting the default language, using Unicode encoding, using the &lt;code&gt;lang&lt;/code&gt; attribute, being aware of standard font sizes and text direction, and language word length (may affect layout).&lt;/p&gt;

&lt;h1 id=&#34;technologies&#34;&gt;Technologies&lt;/h1&gt;

&lt;h2 id=&#34;js-framework&#34;&gt;JS Framework&lt;/h2&gt;

&lt;h3 id=&#34;angularjs&#34;&gt;AngularJS&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;List at least three ways to communicate between modules of your application using core AngularJS functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; There are at least three idiomatic way to achieve this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using services&lt;/li&gt;
&lt;li&gt;Using events&lt;/li&gt;
&lt;li&gt;Directly between controllers, using &lt;code&gt;ControllerAs&lt;/code&gt;, or other forms of inheritance&lt;/li&gt;
&lt;li&gt;By assigning models on &lt;code&gt;$rootScope&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Directly between controllers, using &lt;code&gt;$parent&lt;/code&gt;, &lt;code&gt;$$childHead&lt;/code&gt;, &lt;code&gt;$$nextSibling&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Which means of communication between modules of your application are easily testable?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The big deal is in DI pattern.&lt;/p&gt;

&lt;p&gt;Using a &lt;code&gt;service&lt;/code&gt; is definitely easy to test. Services are injected, and in a test either a real &lt;code&gt;service&lt;/code&gt; can be used or it can be mocked.&lt;/p&gt;

&lt;p&gt;Events can be tested. In unit testing controllers, they usually are instantiated. For testing events on &lt;code&gt;$rootScope&lt;/code&gt;, it must be injected into the test.&lt;/p&gt;

&lt;p&gt;For testing direct &lt;code&gt;communication&lt;/code&gt; between &lt;code&gt;controller&lt;/code&gt;s, the expected results should probably be mocked. Otherwise, controllers would need to be manually instantiated to have the right context.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most popular e2e testing tool for AngularJS is Protractor. Describe how e2e testing of AngularJS applications work?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The e2e tests are executed against a running app, that is a fully initialized system. They most often spawn a browser instance and involve the actual input of commands through the user interface. The written code is evaluated by an automation program, such as a Selenium server (webdriver). That program sends commands to a browser instance, then evaluates the visible results and reports back to the user.&lt;/p&gt;

&lt;p&gt;The assertions are handled by another library, for Protractor (end-to-end) / Karma (unit tests) the default is Jasmine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are the basic steps to unit test an AngularJS filter?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Inject the module that contains the filter.&lt;/li&gt;
&lt;li&gt;Provide any mocks that the filter relies on.&lt;/li&gt;
&lt;li&gt;Get an instance of the filter using $filter(&amp;lsquo;yourFilterName&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;Assert your expectations.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;describe(&#39;Filter: myFltr&#39;, function () {
  var myFltr;

  beforeEach(function () {
    // Load the filters&#39;s module
    module(&#39;myApp&#39;);

    // Provide any mocks needed
    module(function ($provide) {
      //$provide.value(&#39;Name&#39;, new MockName());
    });

    // Inject in angular constructs otherwise,
    // you would need to inject these into each test
    inject(function ($filter) {
      myFltr = $filter(&#39;myFltr&#39;);
    });
  });

  it(&#39;should exist&#39;, function () {
    expect(!!myFltr).toBe(true);
  });

  describe(&#39;when evaluating an expression&#39;, function () {
    it(&#39;should return the expected output&#39;, function () {
      var text = &#39;AngularJS&#39;;
      expect(myFltr(text)).toBe(&#39;my filter: &#39; + text);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;When a scope is terminated, “destroy” events are fired. What are they used for, and why are there two?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first one is an AngularJS event, “$destroy” can be used by AngularJS scopes where they are accessible, such as in controllers or link functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;scope.$on(‘$destroy’, function () {
  // handle the destroy, i.e. clean up.
});

// in 1.5.x
$onDestroy() {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The jqLite / jQuery event is called whenever a node is removed, which may just happen without scope teardown:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;element.on(‘$destroy’, function () {
  // respectful jQuery plugins already have this handler.
  // angular.element(document.body).off(‘someCustomEvent’);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;How do you reset a &lt;code&gt;$timeout&lt;/code&gt;, and disable a &lt;code&gt;$watch()&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; The key to both is assigning the result of the function to a variable.&lt;/p&gt;

&lt;p&gt;To cleanup the timeout, just &lt;code&gt;.cancel()&lt;/code&gt; it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var customTimeout = $timeout(function () {
  // arbitrary code
}, 55);

$timeout.cancel(customTimeout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same applies to &lt;code&gt;$interval()&lt;/code&gt;. To disable a watch, just call it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var deregisterWatchFn = $rootScope.$watch(‘someGloballyAvailableProperty’, function (newVal) {
  if (newVal) {
    // we invoke that deregistration function, to disable the watch
    deregisterWatchFn();
    ...
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Name and describe the phases of a directive definition function execution, or describe how directives are instantiated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each directive undergoes something similar to a life cycle as AngularJS compiles and links the DOM. The directive lifecycle begins and ends within the AngularJS bootstrapping process, before the page is rendered.&lt;/p&gt;

&lt;p&gt;In a directive’s life cycle, there are four distinct functions that can execute if they are defined. Each enables the developer to control and customize the directive at different points of the life cycle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;compile&lt;/code&gt; function allows the directive to manipulate the DOM before it is compiled and linked thereby allowing it to add/remove/change directives, as well as, add/remove/change other DOM elements.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;controller&lt;/code&gt; function facilitates directive communication. Sibling and child directives can request the controller of their siblings and parents to communicate information.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;pre-link&lt;/code&gt; function allows for private &lt;code&gt;$scope&lt;/code&gt; manipulation before the &lt;code&gt;post-link&lt;/code&gt; process begins.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;post-link&lt;/code&gt; method is the primary workhorse method of the directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.directive(&amp;quot;directiveName&amp;quot;,function () {
  return {
    controller: function() {
      // controller code here...
    },
    compile: {
      // compile code here...
      return {
        pre: function() {
          // pre-link code here...
        },
        post: function() {
          // post-link code here...
        }
      };
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commonly, not all of the functions are needed. In most circumstances, developers will simply create a &lt;code&gt;controller&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; (which refers to &lt;code&gt;post-link&lt;/code&gt;) function following the pattern below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.directive(&amp;quot;directiveName&amp;quot;,function () {
  return {
    controller: function() {
      // controller code here...
    },

    link: function() {
      // post-link code here...
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More &lt;a href=&#34;https://www.toptal.com/angular-js/angular-js-demystifying-directives&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does interpolation, e.g. &lt;code&gt;{% raw %}{{ someModel }}{% endraw %}&lt;/code&gt;, actually works?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the compilation process the &lt;code&gt;compiler&lt;/code&gt; uses the &lt;code&gt;$interpolate&lt;/code&gt; service to see if text nodes and element attributes contain interpolation markup with embedded expressions.&lt;/p&gt;

&lt;p&gt;If that is the case, the compiler adds watches on the computed interpolation function, which will update the corresponding text nodes or attribute values as part of the normal digest cycle.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does the digest phase work?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a nutshell, on every digest cycle all scope models are compared against their previous values. That is dirty checking. If change is detected, the watches set on that model are fired. Then another digest cycle executes, and so on until all models are stable.&lt;/p&gt;

&lt;p&gt;As long as core directives are used, we don’t need to worry, but when external code changes models the digest cycle needs to be called manually. Usually to do that, &lt;code&gt;$apply()&lt;/code&gt;, &lt;code&gt;$digest()&lt;/code&gt;, &lt;code&gt;$timeout()&lt;/code&gt;, &lt;code&gt;$evalAsync()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;List a few ways to improve performance in an AngularJS app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first one can be enabled through the &lt;code&gt;$compileProvider&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;.config(function ($compileProvider) {
  $compileProvider.debugInfoEnabled(false);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call this method to enable/disable various debug runtime information in the compiler such as adding binding information and a reference to the current scope on to DOM elements. If enabled, the compiler will add the following to DOM elements that have been bound to the scope&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng-binding&lt;/code&gt; CSS class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$binding&lt;/code&gt; data property containing an array of the binding expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using one-time binding where possible. Those bindings are set, e.g. in &lt;code&gt;{ { ::someModel } }&lt;/code&gt; interpolations by prefixing the model with two colons. In such a case, no watch is set and the model is ignored during digest.&lt;/p&gt;

&lt;p&gt;Making $httpProvider use applyAsync:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myApp.config(function ($httpProvider) {
  $httpProvider.useApplyAsync(true);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! If the application now receives multiple &lt;code&gt;$http&lt;/code&gt; responses at around the same time, this is what happens (a bit simplified though):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The call’s promise is pushed into a queue&lt;/li&gt;
&lt;li&gt;An asynchronous &lt;code&gt;$apply&lt;/code&gt; is scheduled in case there’s no one scheduled yet, by telling the browser to execute &lt;code&gt;setTimeout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once timed out, the queue is flushed and the actual&lt;code&gt;$apply&lt;/code&gt; is triggered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;setTimeout()&lt;/code&gt; is called with a 0 delay which causes an actual delay of around 10 milliseconds depending on the browser. That means, if our three asynchronous calls return at around the same time (somewhere inside that particular timeout delay), they get resolve with a single &lt;code&gt;$digest&lt;/code&gt; cycle instead of three which speeds up our application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is $rootScope and how does it relate to $scope?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;$rootScope&lt;/code&gt; is the parent object of all &lt;code&gt;$scope&lt;/code&gt; Angular objects created in a web page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &amp;ldquo;ng-show&amp;rdquo;/&amp;ldquo;ng-hide&amp;rdquo; and &amp;ldquo;ng-if&amp;rdquo; directives?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;ng-show&lt;/code&gt;/&lt;code&gt;ng-hide&lt;/code&gt; will always insert the DOM element, but will display/hide it based on the condition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-if&lt;/code&gt; will not insert the DOM element until the condition is not fulfilled.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-if&lt;/code&gt; is better when we needed the DOM to be loaded conditionally, as it will help load page bit faster compared to &lt;code&gt;ng-show&lt;/code&gt;/&lt;code&gt;ng-hide&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where should we implement the DOM manipulation in AngularJS?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the directives. DOM Manipulations should not exist in controllers, services or anywhere else but in directives.&lt;/p&gt;

&lt;p&gt;Otherwise it&amp;rsquo;s:
* It is not reusable
* It is not testable
* It include css hard coded selectors dependencies&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is it a good or bad practice to use AngularJS together with jQuery?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jQuery takes a traditional imperative approach to manipulating the DOM. In an imperative approach, it is up to the programmer to express the individual steps leading up to the desired outcome. What do I mean by this? So if we want an action to occur when a user types say 150 characters into an input, in jQuery we would say, &amp;ldquo;every time the user hits a key, check how many characters are in the input, if it exceeds 150 characters, do the action.&amp;rdquo; Every step is addressed along the way.&lt;/p&gt;

&lt;p&gt;AngularJS however takes a declarative approach to DOM manipulation. Here instead of worrying about all of the step by step details regarding how to do the desired outcome, AngularJS abstracts that and allows you to just say what you want done, in this case, &amp;ldquo;AngularJS, when the state of the input is at 150 characters, do this.&amp;rdquo; We are just declaring what we want and AngularJS worries about the rest, taking care of everything for us.&lt;/p&gt;

&lt;p&gt;It might seem like I&amp;rsquo;m just splitting hairs here, but it&amp;rsquo;s really an important distinction. AngularJS wants you basing your actions around the data models you create. It&amp;rsquo;s how the entire framework works and how your applications will be structured.&lt;/p&gt;

&lt;p&gt;To simply begin writing side scripts in jQuery where you are plucking out elements and setting up side event listeners just goes against the AngularJS approach in my opinion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you were to migrate from Angular 1.4 to Angular 1.5, what is the main thing that would need refactoring?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Changing &lt;code&gt;.directive&lt;/code&gt; to &lt;code&gt;.component&lt;/code&gt; to adapt to the new Angular 1.5 components. More about &lt;a href=&#34;http://qetr1ck-op.github.io/2016/07/22/Exploring-AngularJS-1-5-component-method/&#34;&gt;.component approach&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lifecycle hooks in Angular 1.5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$onInit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$postLink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$onChanges&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$onDestroy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More in &lt;a href=&#34;https://toddmotto.com/angular-1-5-lifecycle-hooks&#34;&gt;awesome post&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How would you specify that a scope variable should have one-time binding only?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By using &lt;code&gt;::model.property&lt;/code&gt; in front of it. This allows the check if the candidate is aware of the available variable bindings in AngularJS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between one-way binding and two-way binding?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One way binding implies that the scope variable in the html will be set to the first value its model is bound to (i.e. assigned to).&lt;/p&gt;

&lt;p&gt;Two way binding implies that the scope variable will change it’s value everytime its model is assigned to a different value&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the role of services in AngularJS and name any services made available by default?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Services are objects that provide separation of concerns to an AngularJS app.&lt;/li&gt;
&lt;li&gt;Services can be created using a factory method or a service method.&lt;/li&gt;
&lt;li&gt;Services are singleton components. All components of the application (into which the service is injected) will work with single instance of the service.&lt;/li&gt;
&lt;li&gt;Allows developing of business logic without depending on the View logic which will work with it.&lt;/li&gt;
&lt;li&gt;A typical service can be injected into another service or into an Controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Few of the inbuilt services in AngularJS are:
– the &lt;code&gt;$http&lt;/code&gt; service: The &lt;code&gt;$http&lt;/code&gt; service is a core Angular service that facilitates communication with the remote HTTP servers via the browser’s XMLHttpRequest object or via JSONP
– the &lt;code&gt;$log&lt;/code&gt; service: Simple service for logging. Default implementation safely writes the message into the browser’s console
– the &lt;code&gt;$anchorScroll&lt;/code&gt;: it scrolls to the element related to the specified hash or (if omitted) to the current value of &lt;code&gt;$location.hash()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are Providers and when to use them?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In Angular apps most of these objects are instantiated and wired together automatically by the &lt;code&gt;$injector&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;$injector&lt;/code&gt; creates two types of objects, &lt;em&gt;services&lt;/em&gt; and &lt;em&gt;specialized objects&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Services are objects whose API is defined by the developer writing the service.&lt;/li&gt;
&lt;li&gt;Specialized objects conform to a specific Angular framework API. These objects are one of controllers, directives, filters or animations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The injector needs to know how to create these objects. You tell it by registering a &amp;ldquo;recipe&amp;rdquo; for creating your object with the injector. There are five recipe types.&lt;/p&gt;

&lt;p&gt;The most verbose, but also the most comprehensive one is a &lt;code&gt;Provider&lt;/code&gt; recipe. The remaining four recipe types — &lt;code&gt;Value&lt;/code&gt;, &lt;code&gt;Factory&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Constant&lt;/code&gt; — are just syntactic sugar on top of a provider recipe.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Provider&lt;/code&gt; recipe is the core recipe type and all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe with the most abilities, but for most services it&amp;rsquo;s overkill.&lt;/p&gt;

&lt;p&gt;When to use?&lt;/p&gt;

&lt;p&gt;You should use the Provider recipe only when you want to expose an API for application-wide configuration that must be made before the application starts. This is usually interesting only for reusable services whose behavior might need to vary slightly between applications.&lt;/p&gt;

&lt;p&gt;The Provider recipe is syntactically defined as a custom type that implements a &lt;code&gt;$get&lt;/code&gt; method. This method is a factory function just like the one we use in the Factory recipe. In fact, if you define a Factory recipe, an empty Provider type with the $get method set to your factory function is automatically created under the hood.&lt;/p&gt;

&lt;p&gt;More in &lt;a href=&#34;https://docs.angularjs.org/guide/providers&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;fundamentals&#34;&gt;Fundamentals&lt;/h1&gt;

&lt;h2 id=&#34;data-structure-and-algorithm&#34;&gt;Data Structure and algorithm&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Binary search&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A binary search tree is a great place to store data in an ordered way to allow for an easy search for specific information.
It works by comparing the target value to the midpoint of the array; if they are not equal, the lower or upper half of the array is eliminated depending on the result and the search is repeated until the position of the target value is found.&lt;/p&gt;

&lt;p&gt;The basic algorithm, then, can be described as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If currentValue equals value, you’re done.&lt;/li&gt;
&lt;li&gt;If value is less than currentValue, go left. Go to step 1.&lt;/li&gt;
&lt;li&gt;If value is greater than currentValue, go right. Go to step 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Binary search is intuitively recursive; however, it can be done iteratively by keeping track of the bounds of the search with two pointers. Binary search is efficient for sorted arrays that are stored contiguously (close together) in memory, making &lt;code&gt;O(log n)&lt;/code&gt; comparisons, where &lt;code&gt;n&lt;/code&gt; is the number of elements in the array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function binarySearch(items, value){

    var startIndex  = 0,
        stopIndex   = items.length - 1,
        middle      = Math.floor((stopIndex + startIndex)/2);

    while(items[middle] != value &amp;amp;&amp;amp; startIndex &amp;lt; stopIndex){

        //adjust search area
        if (value &amp;lt; items[middle]){
            stopIndex = middle - 1;
        } else if (value &amp;gt; items[middle]){
            startIndex = middle + 1;
        }

        //recalculate middle
        middle = Math.floor((stopIndex + startIndex)/2);
    }

    //make sure it&#39;s the right value
    return (items[middle] != value) ? -1 : middle;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The fastest method to create unique items in array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With primitive values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Set([1, 2, 2, 1, 5]); // [1, 2, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Array.prototype.unique = function() {
    var o = {}, i, l = this.length, r = [];
    for(i=0; i&amp;lt;l;i+=1) o[this[i]] = this[i];
    for(i in o) r.push(o[i]);
    return r;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is somewhat classified  as “Hash Sorting Algorithm” where every item in the array is a hash value and a hash function inserts item into a bucket, replacing existing values in case of hash collision. As such, this can be applied to any programming language for faster sieving of very large arrays.&lt;/p&gt;

&lt;p&gt;This algorithm has a linear time complexity of &lt;code&gt;O(2n)&lt;/code&gt; in worst case scenario. This is way better than what we will observe for the classic method as described below.&lt;/p&gt;

&lt;p&gt;The classic (worst and most popular) method of finding unique items in an array runs two loops in a nested order to compare each element with rest of the elements. Consequently, the time complexity of the classic method to find the unique items in an array is around quadratic &lt;code&gt;O(n²)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = [], l = this.length;
  for(var i=0; i&amp;lt;l; i++) {
    for(var j=i+1; j&amp;lt;l; j++)
          if (this[i] === this[j]) j = ++i;
    a.push(this[i]);
  }
  return a;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The fastest method to find items in array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a classical hash table with complexity of &lt;code&gt;O(n)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var result = arr.reduce(function(map, obj) {
  map[obj.id] = obj;
  return map;
}, {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And search in the structure is &lt;code&gt;O(1)&lt;/code&gt;;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big-O Complexity Chart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://bigocheatsheet.com/&#34;&gt;An awesome cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.qwihvpqxq&#34;&gt;10 Interview Questions Every JavaScript Developer Should Know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Exploring AngularJS 1.5 .component() method</title>
      <link>https://qetr1ck-op.github.io/blog/post/Exploring-AngularJS-1-5-component-method/</link>
      <pubDate>Fri, 22 Jul 2016 22:20:03 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Exploring-AngularJS-1-5-component-method/</guid>
      <description>&lt;p&gt;AngularJS 1.5 introduce &lt;code&gt;.component()&lt;/code&gt; helper method which is much simpler than the &lt;code&gt;.directive()&lt;/code&gt; definitions and advocates best practices and common default behavior.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;.component()&lt;/code&gt; will allow to write in Angular 2 style as well, which will turn transition to Angular 2 much easier.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s compare the difference in syntax and the possibility of new abstraction.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;from-directrive-to-component&#34;&gt;From &amp;ldquo;directrive()&amp;rdquo; to &amp;ldquo;component()&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;The syntax change is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// before
module.directive(name, fn);

// after
module.component(name, options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve rebuild a simple &lt;code&gt;counter&lt;/code&gt; directive which which we&amp;rsquo;ll refactor to &lt;code&gt;component()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module
  .directive(&#39;counter&#39;, function counter() {
    return {
      scope: {},
      bindToController: {
        count: &#39;=&#39;
      },
      contorllerAs: &#39;$ctlr&#39;,
      controller: function() {
        this.increment = () =&amp;gt; this.count++;
        this.decrement = () =&amp;gt; this.count--;
      },
      template: `
        &amp;lt;div&amp;gt;
          &amp;lt;input type=&amp;quot;number&amp;quot; ng-model=&amp;quot;$ctlr.count&amp;quot;&amp;gt;
          &amp;lt;button ng-click=&amp;quot;$ctrl.increment()&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
          &amp;lt;button ng-click=&amp;quot;$ctrl.decrement()&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
      `
    }
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;function-to-object&#34;&gt;Function to Object&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s start from the top and refactor the function argument to object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// before
module
  .directive(&#39;counter&#39;, function counter() {
    return {

    }
  })

// after
module
  .component(&#39;counter&#39;, {

  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and simple.&lt;/p&gt;

&lt;h1 id=&#34;scope-and-bindtocontroller-become-bindings&#34;&gt;&amp;ldquo;scope&amp;rdquo; and &amp;ldquo;bindToController&amp;rdquo; become &amp;ldquo;bindings&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;In &lt;code&gt;directive()&lt;/code&gt; the &lt;code&gt;scope&lt;/code&gt; property allows us to define whether we want to isolate the &lt;code&gt;$scope&lt;/code&gt; or inherit it. So repeating every time just create an extra boilerplate. With &lt;a href=&#34;https://docs.angularjs.org/api/ng/service/$compile&#34;&gt;bindToController&lt;/a&gt; we can explicitly define binding directly to instance of controller via &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;bindings&lt;/code&gt; we can remove this boilerplate and simple define what we want to pass down to the component.&lt;/p&gt;

&lt;p&gt;And &lt;code&gt;component()&lt;/code&gt; will always have an isolated scope.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// before
module
  .directive(&#39;counter&#39;, function counter() {
    return {
      scope: {
        count: &#39;=&#39;
      },
      bindToController: true
    }
  })

// after
module
  .component(&#39;counter&#39;, {
    binding: {
      count: &#39;=&#39;
    }
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;controller-and-contorlleras-changes&#34;&gt;Controller and &amp;ldquo;contorllerAs&amp;rdquo; changes&lt;/h1&gt;

&lt;p&gt;Nothing has changed in the way we declare &lt;code&gt;controller&lt;/code&gt;, however it&amp;rsquo;s now smarter and has a default &lt;code&gt;contorllerAs&lt;/code&gt; value of &lt;code&gt;$ctrl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Under the hood it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// inside angular.js
controllerAs: identifierForController(options.controller) || options.controllerAs || &#39;$ctrl&#39;

//...

var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
function identifierForController(controller, ident) {
  if (ident &amp;amp;&amp;amp; isString(ident)) return ident;
  if (isString(controller)) {
    var match = CNTRL_REG.exec(controller);
    if (match) return match[3];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to do the following inside &lt;code&gt;.component()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  ...
  controller: &#39;FooController as foo&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on the information we refactor our &lt;code&gt;Directive&lt;/code&gt; to &lt;code&gt;Component&lt;/code&gt; by dropping controllerAs property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// before
.directive(&#39;counter&#39;, function counter() {
  return {
    scope: {
      count: &#39;=&#39;
    },
    bindToController: true,
    controller: function () {
      this.increment = () =&amp;gt; this.count++;
      this.decrement = () =&amp;gt; this.count--;
    },
    controllerAs: &#39;counter&#39;
  };
});

// after
.component(&#39;counter&#39;, {
  bindings: {
    count: &#39;=&#39;
  },
  controller: function () {
    this.increment = () =&amp;gt; this.count++;
    this.decrement = () =&amp;gt; this.count--;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things now are becoming much simpler and funny.&lt;/p&gt;

&lt;h1 id=&#34;template&#34;&gt;Template&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;template&lt;/code&gt; property can be defined as a function property with injected &lt;code&gt;$elem&lt;/code&gt; and &lt;code&gt;$attrs&lt;/code&gt; values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  ...
  template: function ($element, $attrs) {
    // access to $element and $attrs
    return `
      &amp;lt;div&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;$ctrl.count&amp;quot;&amp;gt;
        &amp;lt;button type=&amp;quot;button&amp;quot; ng-click=&amp;quot;$ctrl.decrement();&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;button type=&amp;quot;button&amp;quot; ng-click=&amp;quot;$ctrl.increment();&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    `
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;inheriting-behavior-with-require&#34;&gt;Inheriting behavior with &amp;ldquo;require&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;Inherited Directive or Component methods will be bound to &lt;code&gt;this.parent&lt;/code&gt; property in the Controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  ...
  require: {
    parent: &#39;^^parentComponet&#39;
  },
  controller: function() {
    // use this object to access to required Object
    this.parent.foo();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;one-way-binding&#34;&gt;One-way binding&lt;/h1&gt;

&lt;p&gt;A new syntax expression for isolate scope values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  ...
  bindings: {
    oneWay: &#39;&amp;lt;&#39;,
    twoWay: &#39;=&#39;
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;But still remember that object are passed by reference, and Angular doesn&amp;rsquo;t make a clone of the object when it passed via &lt;code&gt;one-way binding&lt;/code&gt;, it actually sets the same value, which means that objects have still &lt;code&gt;two-way binding&lt;/code&gt; somehow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;upgrading-to-angular-2&#34;&gt;Upgrading to Angular 2&lt;/h1&gt;

&lt;p&gt;Writing in this style using &lt;code&gt;.component()&lt;/code&gt; allows you easily transit to Angular 2, it&amp;rsquo;d look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Component } from &#39;@angular/core&#39;

@Component({
  selector: &#39;counter&#39;,
  template: `
    &amp;lt;div&amp;gt;
      &amp;lt;input type=&amp;quot;number&amp;quot; [(ng-model)]=&amp;quot;count&amp;quot;&amp;gt;
      &amp;lt;button (click)=&amp;quot;increment()&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;button (click)=&amp;quot;decrement()&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  `,
})

export default class CounterComponent {
  constructor() {}
  increment() {
    this.count++;
  }
  decrement() {
    this.count++;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toddmotto.com/exploring-the-angular-1-5-component-method/&#34;&gt;toddmotto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>TOP 10 mistakes when you develop on AngularJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/top-10-mistakes-when-you-develop-on-angularjs/</link>
      <pubDate>Wed, 23 Sep 2015 18:40:03 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/top-10-mistakes-when-you-develop-on-angularjs/</guid>
      <description>&lt;p&gt;The top 10 mistakes when beginners start to develop on AngularJS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;mvc-directory-structure&#34;&gt;MVC directory structure&lt;/h1&gt;

&lt;p&gt;When you work with MVC / MVW frameworks it&amp;rsquo;s convenience to structure code by &lt;code&gt;MVC components&lt;/code&gt; using the following template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;templates/
├───login.html
└───feed.html
app/
├───app.js
└───controllers/
    ├───LoginController.js
    └───FeedController.js
    directives/
    └───FeedEntryDirective.js
    services/
    ├───LoginService.js
    └───FeedService.js
    filters/
    └───CapitalizeFilter.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But when project will rise it&amp;rsquo;s hard to use such structure of folders. You always need to open a few folder at the same time. It isn&amp;rsquo;t depend what IDE or tool you use (Sublime, VS, Vim with NerdTree) - it&amp;rsquo;s uncomfortable.&lt;/p&gt;

&lt;p&gt;To avoid this this developers often use grouping by &lt;code&gt;functionality type&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;app/
├───app.js
└───Feed/
    ├───feed.html
    ├───FeedController.js
    ├───FeedEntryDirective.js
    └───FeedService.js
    Login/
    ├───_login.html
    ├───LoginController.js
    └───LoginService.js
    Shared/
    └───CapitalizeFilter.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The structure allows more faster search for files which are related to the same feature. It may puzzled at the beginning to share js with html or even with test files. But it saves a lot of time, because it&amp;rsquo;s more natural.&lt;/p&gt;

&lt;h1 id=&#34;not-scalable-modules&#34;&gt;Not scalable Modules&lt;/h1&gt;

&lt;p&gt;At the beginning of development all functionalities include in a &lt;strong&gt;single module&lt;/strong&gt;. But manage a such type of code is inconvenient:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let app = angular.module(&#39;app&#39;,[]);
app.service(&#39;MyService&#39;, function(){
    //service code
});

app.controller(&#39;MyCtrl&#39;, function($scope, MyService){
    //controller code
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next most common approach is grouping objects &lt;strong&gt;by type&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let services = angular.module(&#39;services&#39;,[]);
services.service(&#39;MyService&#39;, function(){
    //service code
});

let controllers = angular.module(&#39;controllers&#39;, [&#39;services&#39;]);
controllers.controller(&#39;MyCtrl&#39;, function($scope, MyService){
    //controller code
});

let app = angular.module(&#39;app&#39;, [&#39;controllers&#39;, &#39;services&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For better scalability and future re-usability - split code &lt;strong&gt;by feature&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let sharedServicesModule = angular.module(&#39;sharedServices&#39;,[]);
sharedServices.service(&#39;NetworkService&#39;, function($http){});

let loginModule = angular.module(&#39;login&#39;, [&#39;sharedServices&#39;]);
loginModule.service(&#39;loginService&#39;, function(NetworkService){});
loginModule.controller(&#39;loginCtrl&#39;, function($scope, loginService){});

let app = angular.module(&#39;app&#39;, [&#39;sharedServices&#39;, &#39;login&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;minification-with-dependency-injection&#34;&gt;Minification with Dependency Injection&lt;/h1&gt;

&lt;p&gt;Pattern DI in AngularJS uses out of box. DI helps to keep code clean and helps with testing process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let app = angular.module(&#39;app&#39;,[]);
app.controller(&#39;MainCtrl&#39;, function($scope, $timeout) { //MainCtrl has dependency on $scope and $timeout
    $timeout(function(){
        console.log($scope);
    }, );
});

//And code after minification:

let app=angular.module(&amp;quot;app&amp;quot;,[]);app.controller(&amp;quot;MainCtrl&amp;quot;,function(e,t){t(function(){console.log(e)})})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now AngularJS can&amp;rsquo;t resolve minificated variables. Easiest solution is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.controller(&#39;MainCtrl&#39;, [&#39;$scope&#39;, &#39;$timeout&#39;, function($scope, $timeout){
    $timeout(function() {
        console.log($scope);
    });
}]);

//another best practice approach with $inject

app.controller(&#39;MainCtrl&#39;, mainCtrl);

mainCtrl.$inject = [&#39;$scope&#39;, &#39;$timeout&#39;];

function mainCtrl($scope, $timeout) {
     $timeout(function() {
        console.log($scope);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Angular can resolve dependency.&lt;/p&gt;

&lt;p&gt;Another way to handle DI with minification is &lt;a href=&#34;https://github.com/olov/ng-annotate&#34;&gt;ng-annotate&lt;/a&gt; module. More information on official &lt;a href=&#34;https://docs.angularjs.org/tutorial/step_05#a-note-on-minification&#34;&gt;AngularJS docs&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;global-dependencies&#34;&gt;Global Dependencies&lt;/h1&gt;

&lt;p&gt;Often when writing AngularJS apps there will be a dependency on an object that binds itself to the global scope. This means it&amp;rsquo;s available in any AngularJS code, but this breaks the dependency injection model.&lt;/p&gt;

&lt;p&gt;AngularJS makes it simple to encapsulate these globals into modules so they can be injected like standard AngularJS modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let underscore = angular.module(&#39;underscore&#39;, []);
underscore.factory(&#39;_&#39;, function() {
    return window._; //Underscore must already be loaded on the page
});

let app = angular.module(&#39;app&#39;, [&#39;underscore&#39;]);

app.controller(&#39;MainCtrl&#39;, [&#39;$scope&#39;, &#39;_&#39;, function($scope, _) {
    init = function() {
        _.keys($scope);
    }

    init();
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;fat-controllers&#34;&gt;Fat controllers&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s easy, especially when starting out, to put to much logic in the controller. Controller should &lt;strong&gt;never&lt;/strong&gt; do a DOM manipulation. That&amp;rsquo;s work for directives! Likewise business logic should live in services.&lt;/p&gt;

&lt;p&gt;App data should be also stored and fetched in services, except when we need bound to the &lt;code&gt;$scope&lt;/code&gt;. Services are singletons that persist throughout the lifetime of the application, while controllers are transient between application states. If data is stored in the controller then it will need to be fetched from somewhere when it is instantiate.&lt;/p&gt;

&lt;p&gt;AngularJS works best when following the Single Responsibility Principle (SRP). If the controller is a coordinator between the view and the model, then the amount of logic it has should be minimal. This will also make testing much simpler.&lt;/p&gt;

&lt;h1 id=&#34;service-vs-factory-vs-provider&#34;&gt;Service vs Factory vs Provider&lt;/h1&gt;

&lt;p&gt;What is service:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It provides methods to keep, share and organize data across the lifetime of the Angular app&lt;/li&gt;
&lt;li&gt;Lazy loads, Angular only creates instance of a service when an application component depends on it&lt;/li&gt;
&lt;li&gt;Singleton object, application component dependent on the service work with the single instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An Angular service can be created in five different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;factory&lt;/li&gt;
&lt;li&gt;provider&lt;/li&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;li&gt;constant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most verbose, but also the most comprehensive one is a &lt;strong&gt;Provider&lt;/strong&gt; recipe. The remaining four recipe types — Value, Factory, Service and Constant — are just syntactic sugar on top of a provider recipe.&lt;/p&gt;

&lt;p&gt;Here is a great examples by Misko:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.value(&#39;a&#39;, 123);
module.constant(&#39;A&#39;, 321); //can&#39;t modify with a decorator

function Controller(a, A) {
    expect(a).toEqual(123);
    expect(A).toEqual(231);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case the injectors simply return the value. But what if you want to compute the value?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.factory(&#39;b&#39;, function(a) {
    return a*2;
});

function Controller(b) {
    expect(b).toEqual(246);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;strong&gt;factory&lt;/strong&gt; is a function which responsible to creating or/and modifying the value. Notice that the the factory function can ask for other &lt;strong&gt;dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to be more OO and have a class?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.factory(&#39;greeterFactory&#39;, function(a) {
    function Greeter(a) {
        this.greet = function() {
            return &#39;Hello &#39; + a;
        }
    }
    
    return new Greeter(a);
});

//or with service
module.service(&#39;greeterService&#39;, function(a) {
    this.greet = function() {
        return &#39;Hello &#39; + a;
    }
});

function Controller(greeterFactory, greeterService) {
    expect(greeter instanceof Greeter).toBe(true);
    expect(greeter.greet()).toEqual(&#39;Hello 123&#39;);
    
    const greeter2 = new greeter2;
    expect(greeter2 instanceof greeterFactory).toBe(true);
    expect(greeter2.greet()).toEqual(&#39;Hello 123&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if we want to configure service function before injection? Use &lt;strong&gt;provider&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.provider(&#39;greeter3&#39;, function() {
    var salutation = &#39;Hello&#39;;
    this.setSalutation = function(s) {
        salutation = s;
    }

    function Greeter(a) {
        this.greet = function() {
            return `${salutation} ${a}`;
        }
    }

    this.$get = function(a) {
        return new Greeter(a);
    };
});

// configuration in config phase
module(&#39;abc&#39;, []).config(function(greeter3Provider) {
    greeter3Provider.setSalutation(&#39;Halo&#39;);
});

function Controller(greeter2) {
    expect(greeter2.greet()).toEqual(&#39;Halo 123&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a side note, &lt;strong&gt;service&lt;/strong&gt;, &lt;strong&gt;factory&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt; are all derived from provider:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.service = function(name, Class) {
    provider.provide(name, function() {
        this.$get = function($injector) {
            return $injector.instantiate(Class);
        };
    });
}

module.factory = function(name, factory) {
    provider.provide(name, function() {
        this.$get = function($injector) {
            return $injector.invoke(factory);
        };
    });
}

module.value = function(name, value) {
    provider.factory(name, function() {
        return value;
    });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;always-dot-in-vm-scope-s&#34;&gt;Always dot in VM $scope&amp;rsquo;s&lt;/h1&gt;

&lt;p&gt;In AngularJS every &lt;code&gt;$scope&lt;/code&gt; prototypical inherits from its parent &lt;code&gt;$scope&lt;/code&gt; till the highest level &lt;code&gt;$rootScope&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-controller=&amp;quot;navCtrl&amp;quot;&amp;gt;
   &amp;lt;span&amp;gt;{{user}}&amp;lt;/span&amp;gt; &amp;lt;!-- won&#39;t be updating --&amp;gt;
   &amp;lt;div ng-controller=&amp;quot;loginCtrl&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;{{user}}&amp;lt;/span&amp;gt;
      &amp;lt;input ng-model=&amp;quot;user&amp;quot;&amp;gt;&amp;lt;/input&amp;gt; &amp;lt;!-- changes update only loginCtrl scope --&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When looking up for &lt;code&gt;primitive&lt;/code&gt; value, the prototype chain is not consulted. If &lt;code&gt;navCtrl&lt;/code&gt; updated simultaneously then a prototype chain lookup is required, this won&amp;rsquo;t happen when the value is an &lt;strong&gt;object&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-controller=&amp;quot;navCtrl&amp;quot;&amp;gt;
   &amp;lt;span&amp;gt;{{user.name}}&amp;lt;/span&amp;gt;
   &amp;lt;div ng-controller=&amp;quot;loginCtrl&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;{{user.name}}&amp;lt;/span&amp;gt;
      &amp;lt;input ng-model=&amp;quot;user.name&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;unit-testing-angularjs-apps&#34;&gt;Unit testing AngularJS apps&lt;/h1&gt;

&lt;p&gt;JavaScript is a dynamically typed language which comes with great power of expression, but it also comes with almost no help from the compiler.
For this reason we feel very strongly that any code written in JavaScript needs to come with a strong &lt;a href=&#34;https://docs.angularjs.org/guide/unit-testing&#34;&gt;set of tests&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;not-to-do-an-end-to-end-testing-with-protractor&#34;&gt;Not to do an end-to-end testing with Protractor&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/protractor&#34;&gt;Protractor&lt;/a&gt; uses the &lt;a href=&#34;http://jasmine.github.io/1.3/introduction.html&#34;&gt;Jasmine&lt;/a&gt; test framework for defining tests. Protractor has a very robust API for different page interactions.
There are other end to end test tools, but Protractor has the advantage of understanding how to work with AngularJS code, especially when it comes to &lt;code&gt;$digest&lt;/code&gt; cycles and more.&lt;/p&gt;

&lt;h1 id=&#34;full-spectrum-testing-with-karma&#34;&gt;Full-Spectrum Testing with Karma&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-karma.html&#34;&gt;Awesome post&lt;/a&gt; about testing AngularJS with &lt;code&gt;Karma&lt;/code&gt;, passage from the post:&lt;/p&gt;

&lt;p&gt;Karma is an amazing testing tool which is designed to take all the frustration out of setting up a working test runner when testing JavaScript code.
Karma works by spawning up each browser that is specified within its configuration file and then running JavaScript code against those browsers to see if they pass certain tests.
Communication between Karma and each of the browsers is handled with the karma service running in the terminal using socket.io.
Each time a test is run, Karma records its status and then tallies up which browsers have failed for each test and which ones passed and timed out.
This makes each test work 100% natively in each browser without the need to test individually.
Also, since the Karma service runs on a port and keeps track of browsers by itself, you can easily hook up other browsers and devices to it just by visiting its broadcasting port.
Oh and did I mention that Karma is fast? Yeah it&amp;rsquo;s really fast&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;using-jquery&#34;&gt;Using jQuery&lt;/h1&gt;

&lt;p&gt;AngularJS is a framework for building scalable apps. jQuery is a famous library for simplifying DOM manipulation, event handling, AJAX operation.&lt;/p&gt;

&lt;p&gt;AngularJS is about architecture of app, not augmenting HTML pages.&lt;/p&gt;

&lt;p&gt;Try to stop using jQuery and imperative paradigm, just let your code to extend HTML syntax in declarative style.&lt;/p&gt;

&lt;p&gt;DOM manipulation should only be done in directives, but this doesn&amp;rsquo;t mean they have to be jQuery wrappers. Always consider what features AngularJS already provides before reaching for jQuery.&lt;/p&gt;

&lt;p&gt;Save my day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.airpair.com/angularjs/posts/top-10-mistakes-angularjs-developers-make&#34;&gt;Original post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Firebase and AngularJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/Firebase-and-AngularJS/</link>
      <pubDate>Wed, 10 Dec 2014 23:45:45 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Firebase-and-AngularJS/</guid>
      <description>&lt;p&gt;AngularFire is the officially supported AngularJS binding for Firebase. The combination of Angular and Firebase provides a three-way data binding between your HTML, your, JavaScript, and the Firebase database.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;who-and-why&#34;&gt;Who and why?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt; is developed by Google and its a rich API to store and sync data in realtime. Firebase has full-featured libraries for support all major web framework.&lt;/p&gt;

&lt;p&gt;AngularFire is the officially supported by AngularJS binding fir Firebase. The combination of Angular and Firebase provides a &lt;code&gt;three-way&lt;/code&gt; between your Firebase data store and Angular&amp;rsquo;s bindings (i.e. JavaScript variables to DOM elements).&lt;/p&gt;

&lt;h1 id=&#34;quick-start&#34;&gt;Quick start&lt;/h1&gt;

&lt;p&gt;Simply include source from CDN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Angular --&amp;gt;
&amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.2/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- Firebase --&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.firebase.com/js/client/2.0.4/firebase.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- AngularFire --&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.firebase.com/libs/angularfire/0.9.0/angularfire.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also sources are available via &lt;a href=&#34;http://bower.io/search/?q=firebase&#34;&gt;Bower&lt;/a&gt; or &lt;a href=&#34;https://github.com/firebase/generator-angularfire&#34;&gt;Yeoman&lt;/a&gt; scaffolding.&lt;/p&gt;

&lt;p&gt;Next we need to include ANgularFire service by adding &lt;code&gt;firebase&lt;/code&gt; as a module dependency in our app. And than inject dependency the &lt;code&gt;$firebase&lt;/code&gt; into a controller, factory, or service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var app = angular.module(&#39;app&#39;, [&#39;firebase&#39;]);

app.controller(&#39;MainCtrl&#39;, function($scope, $firebase) {
    var ref = new Fireabase(&amp;quot;https://&amp;lt;your-firebase&amp;gt;.firebaseio.com/&amp;quot;);
    var sync = $firebase(ref);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;synchronize-data-with-asobject-thee-way-data-binding&#34;&gt;Synchronize data with $asObject(). Thee way data-binding&lt;/h1&gt;

&lt;p&gt;Keep in mind that &lt;code&gt;$firebase&lt;/code&gt; does not actually download any data from the Firebase server until &lt;code&gt;$asArray()&lt;/code&gt; or &lt;code&gt;$asObject()&lt;/code&gt; are called.&lt;/p&gt;

&lt;p&gt;The full list for &lt;code&gt;$firebase&lt;/code&gt; methods can be found in the &lt;a href=&#34;https://www.firebase.com/docs/web/libraries/angular/api.html#firebaseobject&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Synchronizing changes from the server is pretty magical via &lt;code&gt;$save()&lt;/code&gt;. To achieve three-way data binding simply call &lt;code&gt;$bindTo()&lt;/code&gt; on a synchronized object and now any changes in the DOM are pushed to Angular, and then automatically to Firebase. And inversely, any changes on the server get pushed into Angular and straight to the DOM:&lt;/p&gt;

&lt;p data-height=&#34;506&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;QwyJvg&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/QwyJvg/&#39;&gt;Synchronize data with $asObject(). Thee way data-binding&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;

# Synchronize Arrays with $asArray()

Synchronized arrays should be used for any list of objects that will be sorted, iterated and have unique IDs. The complete list of methods can be found in the [API](https://www.firebase.com/docs/web/libraries/angular/api.html#firebasearray) for `$FirebaseArray`.

The contents of this array are synchronized with a remote server, and AngularFire controls adding, removing, and ordering the elements. Because of this special arrangement, AngularFire provides the concurrency safe methods `$add()`, `$remove()`, and `$save()` to modify the array elements.

&lt;p data-height=&#34;348&#34; data-theme-id=&#34;10606&#34; data-slug-hash=&#34;ByjXeq&#34; data-default-tab=&#34;result&#34; data-user=&#34;qetr1ck-op&#34; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/qetr1ck-op/pen/ByjXeq/&#39;&gt;Synchronize Arrays with $asArray()&lt;/a&gt; by qetr1ck-op (&lt;a href=&#39;http://codepen.io/qetr1ck-op&#39;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Save my day:
*   &lt;a href=&#34;https://www.firebase.com/docs/web/libraries/angular/guide/&#34;&gt;AngularFire Development Guide&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Class manipulation in Javascript, jQuery and AngularJS</title>
      <link>https://qetr1ck-op.github.io/blog/post/Class-manipulation-in-Javascript-jQuery-and-AngularJS/</link>
      <pubDate>Wed, 02 Jul 2014 23:24:37 +0000</pubDate>
      
      <guid>https://qetr1ck-op.github.io/blog/post/Class-manipulation-in-Javascript-jQuery-and-AngularJS/</guid>
      <description>&lt;p&gt;In this article, I would like to create short reference for how &lt;code&gt;add/remove/toogle&lt;/code&gt; class in pure Javascript and with framework.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;javascript&#34;&gt;Javascript&lt;/h1&gt;

&lt;h2 id=&#34;classname&#34;&gt;className&lt;/h2&gt;

&lt;p&gt;Property &lt;code&gt;className&lt;/code&gt; has value of HTML-atribute &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body class=&amp;quot;class1 class2&amp;quot;&amp;gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(document.body.className);
//class1 class2

document.body.className += &#39; class3&#39;;

console.log(document.body.className);
//class1 class2 class3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;classlist&#34;&gt;classList&lt;/h2&gt;

&lt;p&gt;Property &lt;code&gt;classList&lt;/code&gt; gives convenient interface for work with certain classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.classList.contains(cls)&lt;/code&gt; - return &lt;code&gt;true/false&lt;/code&gt; if element has class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.classList.add/remove(cls)&lt;/code&gt; - adding/removing class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.classList.toogle(cls)&lt;/code&gt; - if element has class &lt;code&gt;cls&lt;/code&gt;, remove it, else add class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jquery&#34;&gt;jQuery&lt;/h1&gt;

&lt;p&gt;These methods inspect and manpulate classes assigned to elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(elem).hasClass(cls)&lt;/code&gt; - return &lt;code&gt;true/false&lt;/code&gt; if element has class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(elem).addClass/removeClass(cls)&lt;/code&gt; - adding/removing class &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(elem).toogleClass(cls)&lt;/code&gt; - if element has class(es) &lt;code&gt;cls&lt;/code&gt;, remove it, else add class(es) &lt;code&gt;cls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angularjs&#34;&gt;AngularJS&lt;/h1&gt;

&lt;h2 id=&#34;ng-class&#34;&gt;ng-class&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ng-class&lt;/code&gt; accepts an &amp;ldquo;expression&amp;rdquo; that must evaluate to one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;string&lt;/code&gt; of space-delimited class names&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;array&lt;/code&gt; of class names&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;map/object&lt;/code&gt; of class names to boolean values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/yjiAp/&#34;&gt;AngularJS, ng-class example&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.
&lt;script async src=&#34;//codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ng-style&#34;&gt;ng-style&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ng-style&lt;/code&gt; accepts an &amp;ldquo;expression&amp;rdquo; that must evaluate to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an &lt;code&gt;map/object&lt;/code&gt; of CSS style names to CSS values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the Pen &lt;a href=&#34;http://codepen.io/qetr1ck-op/pen/KyBjs/&#34;&gt;AngularJS, ng-style example&lt;/a&gt; by qetr1ck-op (&lt;a href=&#34;http://codepen.io/qetr1ck-op&#34;&gt;@qetr1ck-op&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>